;;; -*- Mode: Lisp; Syntax: Ansi-Common-Lisp; Package: RACER; Base: 10 -*-

;;; Copyright (c) 1998-2014, 
;;; Volker Haarslev, Ralf Moeller, Michael Wessel.  
;;; All rights reserved.

;;; Racer is distributed under the following BSD 3-clause license

;;; Redistribution and use in source and binary forms, with or without
;;; modification, are permitted provided that the following conditions are
;;; met:

;;; Redistributions of source code must retain the above copyright notice,
;;; this list of conditions and the following disclaimer.

;;; Redistributions in binary form must reproduce the above copyright
;;; notice, this list of conditions and the following disclaimer in the
;;; documentation and/or other materials provided with the distribution.

;;; Neither the name Racer nor the names of its contributors may be used
;;; to endorse or promote products derived from this software without
;;; specific prior written permission.

;;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
;;; CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
;;; BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
;;; FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
;;; VOLKER HAARSLEV, RALF MOELLER, NOR MICHAEL WESSEL BE LIABLE FOR ANY
;;; DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
;;; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
;;; GOODS OR SERVICES, LOSS OF USE, DATA, OR PROFITS, OR BUSINESS
;;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
;;; IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
;;; OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
;;; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

(in-package :racer)

;;;
;;;----------------------------------------------
;;;    Automatically Generated Docgen Stubs   
;;;          Version: 2.0, Build: 2013-03-07 
;;;          Date: March 07 2013, 13:05  
;;;----------------------------------------------
;;;

(defun load-documentation ()

(progn 

(clear-all-documentation)

(add-doc-entry (:title "All Functions")
               (:type :section)
               (:protected t)
               (:label all-functions)
               (:description "Please choose:"))

(add-doc-entry (:title "Unclassified Functions (SHOULD BE EMPTY!!!)")
               (:type :section)
               (:protected t)
               (:label unclassified)
               (:description "Please choose:"))

(add-doc-entry (:title "Racer Reference Manual")
               (:label reference-toplevel)
               (:type :section)
               (:protected t)
               (:in-sections)
               (:description "Please choose:"))

(add-doc-entry (:title "Knowledge Bases")
               (:label kb-toplevel)
               (:type :section)
               (:protected t)
               (:in-sections (reference-toplevel 1))
               (:description "Please choose:"))

(add-doc-entry (:title "General Management Functions")
               (:label kb-management)
               (:type :section)
               (:protected t)
               (:in-sections kb-toplevel)
               (:description "Please choose:"))

(add-doc-entry (:title "The ABox")
               (:label abox-toplevel)
               (:type :section)
               (:protected t)
               (:in-sections (kb-toplevel 3))
               (:description "Please choose:"))

(add-doc-entry (:title "The TBox")
               (:label tbox-toplevel)
               (:type :section)
               (:protected t)
               (:in-sections (kb-toplevel 2))
               (:description "Please choose:"))

(add-doc-entry (:title "The new Racer Query Language (nRQL)")
               (:label nrql-toplevel)
               (:type :section)
               (:protected t)
               (:in-sections (reference-toplevel 5))
               (:description "Please choose:"))

(add-doc-entry (:title "The Racer OWLAPI (NOSA)")
               (:label owlapi-toplevel)
               (:type :section)
               (:protected t)
               (:in-sections (reference-toplevel 6))
               (:description "Please choose:"))

(add-doc-entry (:title "General Functions")
               (:label general)
               (:type :section)
               (:protected t)
               (:in-sections (reference-toplevel 2))
               (:description "Please choose:"))

(add-doc-entry (:title "The DIG Interface")
               (:label dig)
               (:type :section)
               (:protected t)
               (:in-sections (reference-toplevel 8))
               (:description "Please choose:"))

(add-doc-entry (:title "The OWLlink Interface")
               (:label owllink)
               (:type :section)
               (:protected t)
               (:in-sections (reference-toplevel 7))
               (:description "Please choose:"))

(add-doc-entry (:title "Server-Scripting with MiniLisp")
               (:label minilisp)
               (:type :section)
               (:protected t)
               (:in-sections (reference-toplevel 9))
               (:description "Please choose:"))

(add-doc-entry (:title "The Explanation Facility")
               (:label explanations)
               (:type :section)
               (:protected t)
               (:in-sections (reference-toplevel 10))
               (:description "Please choose:"))

(add-doc-entry (:title "The Publish-Subscribe Facility")
               (:label publish-subscribe)
               (:type :section)
               (:protected t)
               (:in-sections (reference-toplevel 11))
               (:description "Please choose:"))

(add-doc-entry (:title "The Online Documentation Facility")
               (:label doc)
               (:type :section)
               (:protected t)
               (:in-sections (reference-toplevel 12))
               (:description "Please choose:"))

(add-doc-entry (:title "Functions for Benchmarking and Testing")
               (:label testing)
               (:type :section)
               (:protected t)
               (:in-sections (reference-toplevel 13))
               (:description "Please choose:"))

(add-doc-entry (:title "The Timenet Event Recognition Facility")
               (:label events)
               (:type :section)
               (:protected t)
               (:in-sections (reference-toplevel 14))
               (:description "Please choose:"))

(add-doc-entry (:title "Updating Racer")
               (:label updates)
               (:type :section)
               (:protected t)
               (:in-sections (reference-toplevel 20))
               (:description "Please choose:"))

(add-doc-entry (:title "Racer Plugins")
               (:label plugins)
               (:type :section)
               (:protected t)
               (:in-sections (reference-toplevel 16))
               (:description "Please choose:"))

(add-doc-entry (:title "Racer Patches")
               (:label patches)
               (:type :section)
               (:protected t)
               (:in-sections (reference-toplevel 17))
               (:description "Please choose:"))

(add-doc-entry (:title "General Management Functions")
               (:label abox-management)
               (:type :section)
               (:protected t)
               (:in-sections (abox-toplevel 1))
               (:description "Please choose:"))

(add-doc-entry (:title "Tell Statements")
               (:label abox-tell)
               (:type :section)
               (:protected t)
               (:in-sections (abox-toplevel 2))
               (:description "Please choose:"))

(add-doc-entry (:title "OWL-Related Tell Statements")
               (:label abox-owl-tell)
               (:type :section)
               (:protected t)
               (:in-sections (abox-tell 3))
               (:description "Please choose:"))

(add-doc-entry (:title "Concrete Domain-Related Tell Statements")
               (:label abox-cd-tell)
               (:type :section)
               (:protected t)
               (:in-sections (abox-tell 2))
               (:description "Please choose:"))

(add-doc-entry (:title "Retraction")
               (:label abox-forget)
               (:type :section)
               (:protected t)
               (:in-sections (abox-toplevel 3))
               (:description "Please choose:"))

(add-doc-entry (:title "OWL-Related Retraction")
               (:label abox-owl-forget)
               (:type :section)
               (:protected t)
               (:in-sections (abox-forget 3))
               (:description "Please choose:"))

(add-doc-entry (:title "Concrete Domain-Related Retraction")
               (:label abox-cd-forget)
               (:type :section)
               (:protected t)
               (:in-sections (abox-forget 2))
               (:description "Please choose:"))

(add-doc-entry (:title "Basic Queries")
               (:label abox-ask)
               (:type :section)
               (:protected t)
               (:in-sections (abox-toplevel 4))
               (:description "Please choose:"))

(add-doc-entry (:title "OWL-Related Basic Queries")
               (:label abox-owl-ask)
               (:type :section)
               (:protected t)
               (:in-sections (abox-ask 3))
               (:description "Please choose:"))

(add-doc-entry (:title "Concrete Domain-Related Basic Queries")
               (:label abox-cd-ask)
               (:type :section)
               (:protected t)
               (:in-sections (abox-ask 2))
               (:description "Please choose:"))

(add-doc-entry (:title "ABox Difference")
               (:label abox-diff)
               (:type :section)
               (:protected t)
               (:in-sections abduction (abox-toplevel 5))
               (:description "Please choose:"))

(add-doc-entry (:title "General Management Functions")
               (:label tbox-management)
               (:type :section)
               (:protected t)
               (:in-sections (tbox-toplevel 1))
               (:description "Please choose:"))

(add-doc-entry (:title "Tell Statements")
               (:label tbox-tell)
               (:type :section)
               (:protected t)
               (:in-sections (tbox-toplevel 2))
               (:description "Please choose:"))

(add-doc-entry (:title "OWL-Related Tell Statements")
               (:label tbox-owl-tell)
               (:type :section)
               (:protected t)
               (:in-sections (tbox-tell 3))
               (:description "Please choose:"))

(add-doc-entry (:title "Concrete Domain-Related Tell Statements")
               (:label tbox-cd-tell)
               (:type :section)
               (:protected t)
               (:in-sections (tbox-tell 2))
               (:description "Please choose:"))

(add-doc-entry (:title "Retraction")
               (:label tbox-forget)
               (:type :section)
               (:protected t)
               (:in-sections (tbox-toplevel 3))
               (:description "Please choose:"))

(add-doc-entry (:title "OWL-Related Retraction")
               (:label tbox-owl-forget)
               (:type :section)
               (:protected t)
               (:in-sections (tbox-forget 3))
               (:description "Please choose:"))

(add-doc-entry (:title "Concrete Domain-Related Retraction")
               (:label tbox-cd-forget)
               (:type :section)
               (:protected t)
               (:in-sections (tbox-forget 2))
               (:description "Please choose:"))

(add-doc-entry (:title "Basic Queries")
               (:label tbox-ask)
               (:type :section)
               (:protected t)
               (:in-sections (tbox-toplevel 4))
               (:description "Please choose:"))

(add-doc-entry (:title "OWL-Related Basic Queries")
               (:label tbox-owl-ask)
               (:type :section)
               (:protected t)
               (:in-sections (tbox-ask 3))
               (:description "Please choose:"))

(add-doc-entry (:title "Concrete Domain-Related Basic Queries")
               (:label tbox-cd-ask)
               (:type :section)
               (:protected t)
               (:in-sections (tbox-ask 2))
               (:description "Please choose:"))

(add-doc-entry (:title "Input/Output Functions")
               (:label io)
               (:type :section)
               (:protected t)
               (:in-sections (reference-toplevel 4))
               (:description "Please choose:"))

(add-doc-entry (:title "Preserving Server States via Images")
               (:label persistence)
               (:type :section)
               (:protected t)
               (:in-sections (io 2))
               (:description "Please choose:"))

(add-doc-entry (:title "The OWL Interface")
               (:label owl-interface)
               (:type :section)
               (:protected t)
               (:in-sections (reference-toplevel 3))
               (:description "Please choose:"))

(add-doc-entry (:title "The Semantic Web Rule Language (SWRL)")
               (:label swrl)
               (:type :section)
               (:protected t)
               (:in-sections (owl-interface 1))
               (:description "Please choose:"))

(add-doc-entry (:title "The AllegroGraph TripleStore Interface")
               (:label agraph)
               (:type :section)
               (:protected t)
               (:in-sections (owl-interface 2))
               (:description "Please choose:"))

(add-doc-entry (:title "The SPARQL Query Language Interface")
               (:label sparql)
               (:type :section)
               (:protected t)
               (:in-sections agraph)
               (:description "Please choose:"))

(add-doc-entry (:title "General Management Functions")
               (:label owlapi-management)
               (:type :section)
               (:protected t)
               (:in-sections (owlapi-toplevel 1))
               (:description "Please choose:"))

(add-doc-entry (:title "Axiom Constructors")
               (:label owlapi-tell)
               (:type :section)
               (:protected t)
               (:in-sections (owlapi-toplevel 2))
               (:description "Please choose:"))

(add-doc-entry (:title "Basic OWLAPI Queries")
               (:label owlapi-ask)
               (:type :section)
               (:protected t)
               (:in-sections (owlapi-toplevel 3))
               (:description "Please choose:"))

(add-doc-entry (:title "nRQL Queries")
               (:label nrql-abox)
               (:type :section)
               (:protected t)
               (:in-sections (nrql-toplevel 1))
               (:description "Please choose:"))

(add-doc-entry (:title "nRQL TBox Queries")
               (:label nrql-tbox)
               (:type :section)
               (:protected t)
               (:in-sections (nrql-toplevel 3))
               (:description "Please choose:"))

(add-doc-entry (:title "Abductive Queries")
               (:label abduction)
               (:type :section)
               (:protected t)
               (:in-sections (nrql-abox 5))
               (:description "Please choose:"))

(add-doc-entry (:title "Query Inference")
               (:label query-reasoning)
               (:type :section)
               (:protected t)
               (:in-sections (nrql-toplevel 6))
               (:description "Please choose:"))

(add-doc-entry (:title "The Query Optimizer")
               (:label query-optimizer)
               (:type :section)
               (:protected t)
               (:in-sections (nrql-toplevel 5))
               (:description "Please choose:"))

(add-doc-entry (:title "Defined Queries")
               (:label defined-queries)
               (:type :section)
               (:protected t)
               (:in-sections (nrql-toplevel 4))
               (:description "Please choose:"))

(add-doc-entry (:title "nRQL Rules")
               (:label rule-management)
               (:type :section)
               (:protected t)
               (:in-sections (nrql-toplevel 2))
               (:description "Please choose:"))

(add-doc-entry (:title "The Substrate Layer")
               (:label substrate-management)
               (:type :section)
               (:protected t)
               (:in-sections (nrql-toplevel 7))
               (:description "Please choose:"))

(add-doc-entry (:title "The Data Substrate")
               (:label data-substrate)
               (:type :section)
               (:protected t)
               (:in-sections (substate-management 1))
               (:description "Please choose:"))

(add-doc-entry (:title "The RCC Substrate")
               (:label rcc-substrate)
               (:type :section)
               (:protected t)
               (:in-sections (substate-management 2))
               (:description "Please choose:"))

(add-doc-entry (:title xml-read-tbox-file)
               (:label xml-read-tbox-file)
               (:type :function)
               (:in-sections all-functions io tbox-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (filename))
               (:returns)
               (:description
                "A file in XML format containing TBox declarations is parsed 
			   and the resulting TBox is returned.")
               (:arguments
                (filename
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title xml-output)
               (:label xml-output)
               (:type :function)
               (:in-sections all-functions general io)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (unknown))
               (:returns)
               (:description nil)
               (:arguments)
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title xml-native-output)
               (:label xml-native-output)
               (:type :function)
               (:in-sections all-functions general io)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (unknown))
               (:returns)
               (:description nil)
               (:arguments)
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title xml-input)
               (:label xml-input)
               (:type :function)
               (:in-sections all-functions general io)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (unknown))
               (:returns)
               (:description nil)
               (:arguments)
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title verify-with-concept-tree-list)
               (:label verify-with-concept-tree-list)
               (:type :function)
               (:in-sections all-functions testing)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (tree-list &optional tbox ignore-error))
               (:returns)
               (:description nil)
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (ignore-error
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title verify-with-abox-individuals-list)
               (:label verify-with-abox-individuals-list)
               (:type :function)
               (:in-sections all-functions testing)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (individuals-list &optional abox))
               (:returns)
               (:description nil)
               (:arguments
                (individuals-list
                 (:list :abox-individual)
                 "A list of objects of the following type: An ABox individual, e.g. @ic{betty}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title use-triple-store)
               (:label use-triple-store)
               (:type :function)
               (:in-sections all-functions agraph)
               (:corresponding-macro nil)
               (:protected t)
               (:signature
                (db
                 &key
                 kb-name
                 graph
                 subgraph
                 partition
                 told-only
                 init
                 verbose
                 directory
                 ignore-import))
               (:returns)
               (:description nil)
               (:arguments
                (db :triplestore-name "A triple-store name, a symbol")
                (kb-name :tbox-name "A TBox name, e.g. @ic{family}")
                (told-only
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (init
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (verbose
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (directory :directory
                           "A directory stringm e.g. @ic{\"/home/mi.wessel/test/\"}")
                (ignore-import :boolean
                               "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title unsubscribe-1)
               (:label unsubscribe-1)
               (:type :function)
               (:in-sections all-functions publish-subscribe)
               (:corresponding-macro unsubscribe)
               (:protected t)
               (:signature
                (subscriber-name &optional query-concept abox))
               (:returns)
               (:description
                "Functional interface for @funref{unsubscribe}")
               (:arguments
                (subscriber-name :symbol "A symbol")
                (query-concept
                 :concept-name
                 "A concept name, e.g. @ic{woman}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title unpublish-1)
               (:label unpublish-1)
               (:type :function)
               (:in-sections all-functions publish-subscribe)
               (:corresponding-macro unpublish)
               (:protected t)
               (:signature (individual &optional abox))
               (:returns)
               (:description "Functional interface for unpublish.")
               (:arguments
                (individual
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title triple-store-read-file)
               (:label triple-store-read-file)
               (:type :function)
               (:in-sections all-functions agraph io)
               (:corresponding-macro nil)
               (:protected t)
               (:signature
                (filename
                 &key
                 db
                 init
                 verbose
                 if-exists
                 index-p
                 graph
                 data-version-level
                 &allow-other-keys))
               (:returns)
               (:description nil)
               (:arguments
                (filename
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}")
                (db :triplestore-name "A triple-store name, a symbol")
                (init
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (verbose
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (if-exists
                 (:one-of :supersede :error)
                 "One of the following symbols: @ic{:supersede, :error}")
                (index-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title triple-store-open-p)
               (:label triple-store-open-p)
               (:type :function)
               (:in-sections all-functions agraph)
               (:corresponding-macro :unknown)
               (:protected t)
               (:signature (&optional db-name))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description nil)
               (:arguments
                (db-name
                 :triplestore-name
                 "A triple-store name, a symbol"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title triple-store-graphs)
               (:label triple-store-graphs)
               (:type :function)
               (:in-sections all-functions agraph)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&key db directory))
               (:returns)
               (:description nil)
               (:arguments
                (db :triplestore-name "A triple-store name, a symbol")
                (directory :directory
                           "A directory stringm e.g. @ic{\"/home/mi.wessel/test/\"}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title transmit-file)
               (:label transmit-file)
               (:type :function)
               (:in-sections all-functions io)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (extension n-bytes))
               (:returns)
               (:description nil)
               (:arguments
                (extension
                 :file-extension
                 "A file extension string, e.g. @ic{\"txt\"} or @ic{\"owl\"}")
                (n-bytes
                 :non-negative-integer
                 "A non-negative integer (possibly 0)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title transitive-p)
               (:label transitive-p)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro transitive?)
               (:protected t)
               (:signature (role-term &optional tbox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description
                "Checks if @arg{role-term} is a transitive role in the specified TBox.")
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title told-value)
               (:label told-value)
               (:type :function)
               (:in-sections all-functions abox-cd-tell)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (object &optional abox))
               (:returns)
               (:description
                "Returns an explicitly asserted value for an object that is 
			   declared as filler for a certain attribute w.r.t. an individual.")
               (:arguments
                (object
                 :cd-object
                 "A concrete domain object, e.g. @ic{betty-age}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title timenet-answer-query)
               (:label timenet-answer-query)
               (:type :function)
               (:in-sections all-functions events)
               (:corresponding-macro timenet-retrieve)
               (:protected t)
               (:signature (query &key abox))
               (:returns
                :timenet-query-result
                "A timenet query result")
               (:description nil)
               (:arguments
                (query :timenet-query "unknown")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title tbox-prepared-p)
               (:label tbox-prepared-p)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro tbox-prepared?)
               (:protected t)
               (:signature (&optional tbox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description
                "It is checked if internal index structures are 
			   already computed for the specified TBox.")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title tbox-cyclic-p)
               (:label tbox-cyclic-p)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro tbox-cyclic?)
               (:protected t)
               (:signature (&optional tbox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description
                "It is checked if cyclic GCIs are present in a TBox.")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title tbox-coherent-p)
               (:label tbox-coherent-p)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro tbox-coherent?)
               (:protected t)
               (:signature (&optional tbox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description
                "This function checks if there are any unsatisfiable 
			   atomic concepts in the given TBox.")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title tbox-classified-p)
               (:label tbox-classified-p)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro tbox-classified?)
               (:protected t)
               (:signature (&optional tbox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description
                "It is checked if the specified TBox has already been classified.")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title taxonomy)
               (:label taxonomy)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&optional tbox))
               (:returns
                :taxonomy
                "A taxonomy, a nested list structure, e.g. @pc{((TOP NIL (PERSON)) (FATHER (PERSON) (BOTTOM)) (MOTHER (PERSON) (BOTTOM)) (PERSON (TOP) (FATHER MOTHER)) (BOTTOM (FATHER MOTHER) NIL))}")
               (:description
                "Returns the whole taxonomy for the specified TBox.")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title symmetric-p)
               (:label symmetric-p)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro symmetric?)
               (:protected t)
               (:signature (role-term &optional tbox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description
                "Checks if @arg{role-term} is symmetric in the specified TBox.")
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title swrl-forward-chaining)
               (:label swrl-forward-chaining)
               (:type :function)
               (:in-sections all-functions swrl)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&key abox verbose delete-rules))
               (:returns)
               (:description nil)
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (verbose
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (delete-rules
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title subscribe-1)
               (:label subscribe-1)
               (:type :function)
               (:in-sections all-functions publish-subscribe)
               (:corresponding-macro subscribe)
               (:protected t)
               (:signature
                (subscriber-name
                 query-concept
                 &optional
                 abox
                 ip
                 port
                 simple-protocol-p))
               (:returns)
               (:description
                "Functional interface for @funref{subscribe}")
               (:arguments
                (subscriber-name :symbol "A symbol")
                (query-concept
                 :concept-name
                 "A concept name, e.g. @ic{woman}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (ip
                 :ip-address
                 "A TCP-IP IP address as a string, e.g. @ic{\"192.168.0.1\"}")
                (port :ip-port "A TCP-IP port, e.g. @ic{8080}")
                (simple-protocol-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title store-tboxes-image)
               (:label store-tboxes-image)
               (:type :function)
               (:in-sections all-functions io)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (tboxes filename))
               (:returns)
               (:description "Store an image of a list of TBoxes.")
               (:arguments
                (tboxes
                 (:list :tbox-name)
                 "A list of objects of the following type: A TBox name, e.g. @ic{family}")
                (filename
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title store-tbox-image)
               (:label store-tbox-image)
               (:type :function)
               (:in-sections all-functions io)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (filename &optional tbox))
               (:returns)
               (:description "Store an image of a TBox.")
               (:arguments
                (filename
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title store-kbs-image)
               (:label store-kbs-image)
               (:type :function)
               (:in-sections all-functions io)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (filename kbs))
               (:returns)
               (:description "Store an image of a list of @arg{kbs}")
               (:arguments
                (filename
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}")
                (kbs
                 (:list :abox-name)
                 "A list of objects of the following type: The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title store-kb-image)
               (:label store-kb-image)
               (:type :function)
               (:in-sections all-functions io)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (filename &optional kb))
               (:returns)
               (:description "Store an image of an kb.")
               (:arguments
                (filename
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}")
                (kb
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title store-aboxes-image)
               (:label store-aboxes-image)
               (:type :function)
               (:in-sections all-functions io)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (filename aboxes))
               (:returns)
               (:description "Store an image of a list of Aboxes.")
               (:arguments
                (filename
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}")
                (aboxes
                 (:list :abox-name)
                 "A list of objects of the following type: The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title store-abox-image)
               (:label store-abox-image)
               (:type :function)
               (:in-sections all-functions io)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (filename &optional abox))
               (:returns)
               (:description "Store an image of an Abox.")
               (:arguments
                (filename
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title set-unique-name-assumption)
               (:label set-unique-name-assumption)
               (:type :function)
               (:in-sections all-functions abox-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (value))
               (:returns)
               (:description
                "This form globally instructs Racer to make the 
			   unique name assumption if @arg{t} is specified as the argument. 
			   If @arg{nil} is specified, Racer will not make the unique name 
			   assumption (the default).")
               (:arguments
                (value
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title set-server-timeout)
               (:label set-server-timeout)
               (:type :function)
               (:in-sections all-functions general)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (timeout))
               (:returns)
               (:description
                "Set a timeout for query answering (in seconds). 
			   If @arg{nil} is provided as an argument, no timeout will be used 
			   (the default).")
               (:arguments
                (timeout
                 :non-negative-integer
                 "A non-negative integer (possibly 0)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title set-find-tbox)
               (:label set-find-tbox)
               (:type :function)
               (:in-sections all-functions tbox-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (tbox-name1 tbox-name2))
               (:returns)
               (:description "Changes the name of a TBox.")
               (:arguments
                (tbox-name1 :tbox-name "A TBox name, e.g. @ic{family}")
                (tbox-name2
                 :tbox-name
                 "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title set-find-abox)
               (:label set-find-abox)
               (:type :function)
               (:in-sections all-functions abox-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (abox-name1 abox-name2))
               (:returns)
               (:description "Changes the name of an ABox.")
               (:arguments
                (abox-name1
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (abox-name2
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title set-current-tbox)
               (:label set-current-tbox)
               (:type :function)
               (:in-sections all-functions tbox-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (tbox))
               (:returns)
               (:description "The function sets the current TBox.")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title set-current-abox)
               (:label set-current-abox)
               (:type :function)
               (:in-sections all-functions abox-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (abox))
               (:returns)
               (:description "Gets a version indicator for a ABox.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title set-attribute-filler)
               (:label set-attribute-filler)
               (:type :function)
               (:in-sections all-functions abox-cd-tell)
               (:corresponding-macro attribute-filler)
               (:protected t)
               (:signature
                (abox individual value attribute &optional type))
               (:returns)
               (:description
                "Set the filler of an attribute w.r.t. an individual.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (individual
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (value
                 :cd-value
                 "A concrete domain value, e.g. @ic{\"betty\"} or 35")
                (attribute
                 :cd-attribute
                 "A concrete domain attribute, e.g. @ic{age}")
                (type
                 :cd-type
                 "A concrete domain base type, e.g. @ic{integer, racer-boolean, string, real}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title server-case)
               (:label server-case)
               (:type :function)
               (:in-sections all-functions ignore)
               (:corresponding-macro nil)
               (:protected t)
               (:signature nil)
               (:returns)
               (:description nil)
               (:arguments)
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title sequence)
               (:label sequence)
               (:type :function)
               (:in-sections all-functions general)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (unknown))
               (:returns)
               (:description nil)
               (:arguments)
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title save-tbox)
               (:label save-tbox)
               (:type :function)
               (:in-sections all-functions io tbox-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature
                (pathname-or-stream
                 &optional
                 tbox
                 &key
                 syntax
                 transformed
                 avoid-duplicate-definitions
                 if-exists
                 if-does-not-exist
                 uri
                 anonymized
                 header))
               (:returns)
               (:description
                "If a pathname is specified, a TBox is saved to a file. 
			   In case a stream is specified the TBox is written to the stream 
			   (the stream must already be open) and the keywords @arg{if-exists} and 
			   @arg{if-does-not-exist} are ignored.")
               (:arguments
                (pathname-or-stream
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (syntax
                 (:one-of :race :krss :owl :test)
                 "One of the following symbols: @ic{:race, :krss, :owl, :test}")
                (transformed
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (avoid-duplicate-definitions
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (if-exists
                 (:one-of :supersede :error)
                 "One of the following symbols: @ic{:supersede, :error}")
                (if-does-not-exist
                 (:one-of :create :error)
                 "One of the following symbols: @ic{:create, :error}")
                (uri
                 :uri
                 "A URI string, e.g. @ic{\"http://www.example-ontology.com#person\"}")
                (anonymized
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (header
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title save-ontology-to-triple-store)
               (:label save-ontology-to-triple-store)
               (:type :function)
               (:in-sections all-functions agraph io owl-interface)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&rest args))
               (:returns)
               (:description nil)
               (:arguments (args :unknown "What is this?!"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title save-kb)
               (:label save-kb)
               (:type :function)
               (:in-sections all-functions io kb-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature
                (pathname-or-stream
                 &key
                 tbox
                 abox
                 if-exists
                 if-does-not-exist
                 uri
                 syntax
                 ontology-name
                 header))
               (:returns)
               (:description
                "If a pathname is specified, a TBox is saved to a file. 
				In case a stream is specified the TBox is written to the stream (the stream 
				must already be open) and the keywords @arg{if-exists} and @arg{if-does-not-exist} are ignored.")
               (:arguments
                (pathname-or-stream
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (if-exists
                 (:one-of :supersede :error)
                 "One of the following symbols: @ic{:supersede, :error}")
                (if-does-not-exist
                 (:one-of :create :error)
                 "One of the following symbols: @ic{:create, :error}")
                (uri
                 :uri
                 "A URI string, e.g. @ic{\"http://www.example-ontology.com#person\"}")
                (syntax
                 (:one-of :race :krss :owl :test)
                 "One of the following symbols: @ic{:race, :krss, :owl, :test}")
                (ontology-name :owlapi-ontology-name
                               "An OWLAPI2 ontology name, a TBox / ABox name")
                (header
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title save-abox)
               (:label save-abox)
               (:type :function)
               (:in-sections all-functions io abox-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature
                (pathname-or-stream
                 &optional
                 abox
                 &key
                 syntax
                 transformed
                 if-exists
                 if-does-not-exist
                 header
                 uri
                 import-list
                 ontology-name))
               (:returns)
               (:description
                "If a pathname is specified, an ABox is saved to a file. 
			   In case a stream is specified, the ABox is written to the stream 
			   (the stream must already be open) and the keywords @arg{if-exists} and 
			   @arg{if-does-not-exist} are ignored.")
               (:arguments
                (pathname-or-stream
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (syntax
                 (:one-of :race :krss :owl :test)
                 "One of the following symbols: @ic{:race, :krss, :owl, :test}")
                (transformed
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (if-exists
                 (:one-of :supersede :error)
                 "One of the following symbols: @ic{:supersede, :error}")
                (if-does-not-exist
                 (:one-of :create :error)
                 "One of the following symbols: @ic{:create, :error}")
                (header
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (uri
                 :uri
                 "A URI string, e.g. @ic{\"http://www.example-ontology.com#person\"}")
                (import-list
                 (:list (:list :prefix-string :url))
                 "A list of objects of the following type: A list of length 2 with objects of the following types: A namespace prefix string, e.g. @ic{\"rdfs\"} or @ic{\"family\"}, A URL string, e.g. @ic{\"http://www.example-ontology.com\"}")
                (ontology-name :owlapi-ontology-name
                               "An OWLAPI2 ontology name, a TBox / ABox name"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title roles-equivalent-1)
               (:label roles-equivalent-1)
               (:type :function)
               (:in-sections all-functions tbox-tell)
               (:corresponding-macro roles-equivalent)
               (:protected t)
               (:signature (role1 role2 tbox))
               (:returns)
               (:description "Declares two roles to be equivalent.")
               (:arguments
                (role1 :role "A role, e.g. @ic{has-child}")
                (role2 :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title roles-disjoint-1)
               (:label roles-disjoint-1)
               (:type :function)
               (:in-sections all-functions tbox-tell)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (role1 role2 tbox))
               (:returns)
               (:description nil)
               (:arguments
                (role1 :role "A role, e.g. @ic{has-child}")
                (role2 :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title role-used-as-datatype-property-p)
               (:label role-used-as-datatype-property-p)
               (:type :function)
               (:in-sections all-functions tbox-owl-ask)
               (:corresponding-macro :unknown)
               (:protected t)
               (:signature (role-name tbox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description
                "Returns @ic{t} if the role is declared as a datatype property or @ic{nil} otherwise.")
               (:arguments
                (role-name :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title role-used-as-annotation-property-p)
               (:label role-used-as-annotation-property-p)
               (:type :function)
               (:in-sections all-functions tbox-owl-ask)
               (:corresponding-macro :unknown)
               (:protected t)
               (:signature (role-name tbox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description
                "Returns @ic{t} if the role is declared as an annotation property or @ic{nil} otherwise.")
               (:arguments
                (role-name :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title role-subsumes-p)
               (:label role-subsumes-p)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro role-subsumes?)
               (:protected t)
               (:signature (role-term-1 role-term-2 tbox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description
                "Checks if two roles are subsuming each other.")
               (:arguments
                (role-term-1 :role "A role, e.g. @ic{has-child}")
                (role-term-2 :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title role-satisfiable-p)
               (:label role-satisfiable-p)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro role-satisfiable?)
               (:protected t)
               (:signature (role tbox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description nil)
               (:arguments
                (role :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title role-p)
               (:label role-p)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro role?)
               (:protected t)
               (:signature (role-term &optional tbox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description
                "Checks if @arg{role-term} is a role term for a role in the specified TBox.")
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title role-is-used-as-datatype-property)
               (:label role-is-used-as-datatype-property)
               (:type :function)
               (:in-sections all-functions tbox-owl-tell)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (rolename tbox))
               (:returns)
               (:description
                "States that a role is to be interpreted as a datatype property role.")
               (:arguments
                (rolename :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title role-is-used-as-annotation-property)
               (:label role-is-used-as-annotation-property)
               (:type :function)
               (:in-sections all-functions tbox-owl-tell)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (rolename tbox))
               (:returns)
               (:description
                "States that a role is to be interpreted as an annotation property role.")
               (:arguments
                (rolename :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title role-is-transitive)
               (:label role-is-transitive)
               (:type :function)
               (:in-sections all-functions tbox-tell)
               (:corresponding-macro transitive)
               (:protected t)
               (:signature (rolename tbox))
               (:returns)
               (:description
                "States that a role is to be interpreted as transitive.")
               (:arguments
                (rolename :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title role-is-symmetric)
               (:label role-is-symmetric)
               (:type :function)
               (:in-sections all-functions tbox-tell)
               (:corresponding-macro symmetric)
               (:protected t)
               (:signature (rolename tbox))
               (:returns)
               (:description nil)
               (:arguments
                (rolename :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title role-is-reflexive)
               (:label role-is-reflexive)
               (:type :function)
               (:in-sections all-functions tbox-tell)
               (:corresponding-macro reflexive)
               (:protected t)
               (:signature (rolename tbox))
               (:returns)
               (:description nil)
               (:arguments
                (rolename :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title role-is-irreflexive)
               (:label role-is-irreflexive)
               (:type :function)
               (:in-sections all-functions tbox-tell)
               (:corresponding-macro irreflexive)
               (:protected t)
               (:signature (rolename tbox))
               (:returns)
               (:description nil)
               (:arguments
                (rolename :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title role-is-functional)
               (:label role-is-functional)
               (:type :function)
               (:in-sections all-functions tbox-tell)
               (:corresponding-macro functional)
               (:protected t)
               (:signature (rolename tbox))
               (:returns)
               (:description
                "States that a role is to be interpreted as functional.")
               (:arguments
                (rolename :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title role-is-asymmetric)
               (:label role-is-asymmetric)
               (:type :function)
               (:in-sections all-functions tbox-tell)
               (:corresponding-macro asymmetric)
               (:protected t)
               (:signature (rolename tbox))
               (:returns)
               (:description nil)
               (:arguments
                (rolename :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title role-has-range)
               (:label role-has-range)
               (:type :function)
               (:in-sections all-functions tbox-tell)
               (:corresponding-macro range)
               (:protected t)
               (:signature (rolename concept tbox &optional errorp))
               (:returns)
               (:description "Declares the range of a role.")
               (:arguments
                (rolename :role "A role, e.g. @ic{has-child}")
                (concept
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (errorp
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title role-has-parent)
               (:label role-has-parent)
               (:type :function)
               (:in-sections all-functions tbox-tell)
               (:corresponding-macro implies-role)
               (:protected t)
               (:signature (rolename-1 rolename-2 tbox))
               (:returns)
               (:description "Defines a parent of a role.")
               (:arguments
                (rolename-1 :role "A role, e.g. @ic{has-child}")
                (rolename-2 :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title role-has-domain)
               (:label role-has-domain)
               (:type :function)
               (:in-sections all-functions tbox-tell)
               (:corresponding-macro domain)
               (:protected t)
               (:signature (rolename concept tbox &optional errorp))
               (:returns)
               (:description "Declares the domain of a role.")
               (:arguments
                (rolename :role "A role, e.g. @ic{has-child}")
                (concept
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (errorp
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title role-equivalent-p)
               (:label role-equivalent-p)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro role-equivalent?)
               (:protected t)
               (:signature (role-1 role-2 tbox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description "Checks if two roles are equivalent.")
               (:arguments
                (role-1 :role "A role, e.g. @ic{has-child}")
                (role-2 :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title role-disjoint-p)
               (:label role-disjoint-p)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro role-disjoint?)
               (:protected t)
               (:signature (role-term-1 role-term-2 tbox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description nil)
               (:arguments
                (role-term-1 :role "A role, e.g. @ic{has-child}")
                (role-term-2 :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title retrieve-related-individuals)
               (:label retrieve-related-individuals)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:corresponding-macro related-individuals)
               (:protected t)
               (:signature (role-term abox))
               (:returns
                (:list (:list :abox-individual :abox-individual))
                "A list of objects of the following type: A list of length 2 with objects of the following types: An ABox individual, e.g. @ic{betty}, An ABox individual, e.g. @ic{betty}")
               (:description
                "Functional equivalents of @funref{related-individuals.}")
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title retrieve-individual-told-datatype-fillers)
               (:label retrieve-individual-told-datatype-fillers)
               (:type :function)
               (:in-sections all-functions abox-owl-ask)
               (:corresponding-macro individual-told-datatype-fillers)
               (:protected t)
               (:signature
                (ind
                 datatype-role
                 &optional
                 direct-p
                 abox
                 with-types-p))
               (:returns
                (:list :cd-value)
                "A list of objects of the following type: A concrete domain value, e.g. @ic{\"betty\"} or 35")
               (:description
                "Functional equivalent of @funref{individual-told-datatype-fillers}")
               (:arguments
                (ind
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (datatype-role
                 :datatype-property
                 "An OWL2 datatype property, a special role, e.g. @ic{hasAge}")
                (direct-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (with-types-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title retrieve-individual-told-attribute-value)
               (:label retrieve-individual-told-attribute-value)
               (:type :function)
               (:in-sections all-functions abox-cd-ask)
               (:corresponding-macro individual-told-attribute-value)
               (:protected t)
               (:signature (ind attribute abox))
               (:returns
                :cd-value
                "A concrete domain value, e.g. @ic{\"betty\"} or 35")
               (:description
                "Functional equivalent of @funref{individual-told-attribute-value}")
               (:arguments
                (ind
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (attribute
                 :cd-attribute
                 "A concrete domain attribute, e.g. @ic{age}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title retrieve-individual-synonyms)
               (:label retrieve-individual-synonyms)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:corresponding-macro individual-synonyms)
               (:protected t)
               (:signature (individual &optional told-only abox))
               (:returns
                (:list :abox-individual)
                "A list of objects of the following type: An ABox individual, e.g. @ic{betty}")
               (:description
                "Gets all individuals which can be proven to refer to the same domain object.")
               (:arguments
                (individual
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (told-only
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title retrieve-individual-fillers)
               (:label retrieve-individual-fillers)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:corresponding-macro individual-fillers)
               (:protected t)
               (:signature (ind-predecessor role-term abox &key told))
               (:returns
                (:list :abox-individual)
                "A list of objects of the following type: An ABox individual, e.g. @ic{betty}")
               (:description
                "Gets all individuals that are fillers of a role for a specified individual.")
               (:arguments
                (ind-predecessor
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (role-term :role "A role, e.g. @ic{has-child}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (told
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title retrieve-individual-filled-roles)
               (:label retrieve-individual-filled-roles)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:corresponding-macro individual-filled-roles)
               (:protected t)
               (:signature
                (ind-predecessor
                 ind-filler
                 abox
                 &key
                 synsets-p
                 negated-p
                 no-inverses-p
                 roles))
               (:returns
                (:list :role)
                "A list of objects of the following type: A role, e.g. @ic{has-child}")
               (:description
                "This function gets all roles that hold between the 
			   specified pair of individuals.")
               (:arguments
                (ind-predecessor
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (ind-filler
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (synsets-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (negated-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (no-inverses-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (roles
                 (:list :role)
                 "A list of objects of the following type: A role, e.g. @ic{has-child}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title retrieve-individual-attribute-fillers)
               (:label retrieve-individual-attribute-fillers)
               (:type :function)
               (:in-sections all-functions abox-cd-ask)
               (:corresponding-macro individual-attribute-fillers)
               (:protected t)
               (:signature (ind attribute abox))
               (:returns
                (:list :cd-object)
                "A list of objects of the following type: A concrete domain object, e.g. @ic{betty-age}")
               (:description
                "Gets all object names that are fillers of an attribute for a specified individual.")
               (:arguments
                (ind
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (attribute
                 :cd-attribute
                 "A concrete domain attribute, e.g. @ic{age}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title retrieve-individual-antonyms)
               (:label retrieve-individual-antonyms)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:corresponding-macro individual-antonyms)
               (:protected t)
               (:signature (individual &optional told-only abox))
               (:returns
                (:list :abox-individual)
                "A list of objects of the following type: An ABox individual, e.g. @ic{betty}")
               (:description nil)
               (:arguments
                (individual
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (told-only
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title retrieve-individual-annotation-property-fillers)
               (:label retrieve-individual-annotation-property-fillers)
               (:type :function)
               (:in-sections all-functions abox-cd-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature
                (individual-name role abox &optional with-types-p))
               (:returns
                (:list :cd-value)
                "A list of objects of the following type: A concrete domain value, e.g. @ic{\"betty\"} or 35")
               (:description "Gets told values for attributes.")
               (:arguments
                (individual-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (role
                 :annotation-role
                 "An OWL2 annotation property, a special role, e.g. @ic{rdfs:comment}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (with-types-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title retrieve-direct-predecessors)
               (:label retrieve-direct-predecessors)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:corresponding-macro direct-predecessors)
               (:protected t)
               (:signature (role-term ind-filler abox))
               (:returns
                (:list :abox-individual)
                "A list of objects of the following type: An ABox individual, e.g. @ic{betty}")
               (:description
                "Gets all individuals that are predecessors of a role for a specified individual.")
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (ind-filler
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title retrieve-concept-instances)
               (:label retrieve-concept-instances)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:corresponding-macro concept-instances)
               (:protected t)
               (:signature (concept-term abox &optional candidates))
               (:returns
                (:list :abox-individual)
                "A list of objects of the following type: An ABox individual, e.g. @ic{betty}")
               (:description
                "Gets all individuals from an ABox that are 
			   instances of the specified concept.")
               (:arguments
                (concept-term :concept-expression
                              "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (candidates
                 (:list :abox-individual)
                 "A list of objects of the following type: An ABox individual, e.g. @ic{betty}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title restore-tboxes-image)
               (:label restore-tboxes-image)
               (:type :function)
               (:in-sections all-functions io persistence)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (filename))
               (:returns)
               (:description "Restore an image of a set of TBoxes.")
               (:arguments
                (filename
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title restore-tbox-image)
               (:label restore-tbox-image)
               (:type :function)
               (:in-sections all-functions io persistence)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (filename))
               (:returns)
               (:description "Restore an image of a TBox.")
               (:arguments
                (filename
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title restore-kbs-image)
               (:label restore-kbs-image)
               (:type :function)
               (:in-sections all-functions io persistence)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (filename))
               (:returns)
               (:description "Restore an image of a set of kbs.")
               (:arguments
                (filename
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title restore-kb-image)
               (:label restore-kb-image)
               (:type :function)
               (:in-sections all-functions io persistence)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (filename))
               (:returns)
               (:description "Restore an image of a kb.")
               (:arguments
                (filename
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title restore-aboxes-image)
               (:label restore-aboxes-image)
               (:type :function)
               (:in-sections all-functions io persistence)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (filename))
               (:returns)
               (:description "Restore an image of a set of aboxes.")
               (:arguments
                (filename
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title restore-abox-image)
               (:label restore-abox-image)
               (:type :function)
               (:in-sections all-functions io persistence)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (filename))
               (:returns)
               (:description "Restore an image of an Abox.")
               (:arguments
                (filename
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title reflexive-p)
               (:label reflexive-p)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro reflexive?)
               (:protected t)
               (:signature (role-term &optional tbox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description
                "Checks if @arg{role-term} is reflexive in the specified TBox.")
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title recognize-events)
               (:label recognize-events)
               (:type :function)
               (:in-sections all-functions events)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&optional abox))
               (:returns
                (:list (:list :symbol :timenet-query-result))
                "A list of objects of the following type: A list of length 2 with objects of the following types: A symbol, A timenet query result")
               (:description nil)
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title realize-abox)
               (:label realize-abox)
               (:type :function)
               (:in-sections all-functions abox-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&optional abox individual-name))
               (:returns)
               (:description
                "This function checks the consistency of the ABox 
			   and computes the mostspecific concepts for each individual in the ABox.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (individual-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title rdfs-read-tbox-file)
               (:label rdfs-read-tbox-file)
               (:type :function)
               (:in-sections all-functions io tbox-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (filename))
               (:returns)
               (:description
                "A file in RDFS format containing TBox declarations is 
			   parsed and the resulting TBox is returned. The name of the TBox is 
			   the filename without file type.")
               (:arguments
                (filename
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title racer-read-file)
               (:label racer-read-file)
               (:type :function)
               (:in-sections all-functions io kb-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (filename))
               (:returns)
               (:description
                "A File in RACER format (as described in this document) containing TBox
and/or ABox declarations is loaded.")
               (:arguments
                (filename
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title racer-read-document)
               (:label racer-read-document)
               (:type :function)
               (:in-sections all-functions io kb-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (url-spec &key verbose))
               (:returns)
               (:description
                "A File in RACER format (as described in this document) containing TBox
and/or ABox declarations is loaded.")
               (:arguments
                (url-spec
                 :url
                 "A URL string, e.g. @ic{\"http://www.example-ontology.com\"}")
                (verbose
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title racer-answer-query-with-explanation)
               (:label racer-answer-query-with-explanation)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:corresponding-macro nil)
               (:protected t)
               (:signature
                (res-args
                 query
                 &rest
                 args
                 &key
                 cutoff-fn
                 hypo-mode-stack
                 c-mode
                 r-mode
                 only-best-p
                 order-by
                 reverse-order-p
                 ensure-permutations-p
                 how-many
                 strategy
                 simple-result-p
                 runtime-consistency-checking-p
                 final-consistency-checking-p
                 same-as-only-p
                 candidate-individuals
                 binding-validator
                 &allow-other-keys))
               (:returns
                :nrql-abductive-query-answer
                "A nRQL abductive query answer, e.g. 
@pc{(T (((:TUPLE (?X IND-2)) (:NEW-INDS IND-2) (:HYPOTHESIZED-ASSERTIONS (INSTANCE IND-2 C)))))}")
               (:description nil)
               (:arguments
                (res-args
                 :nrql-query-head
                 "A nRQL query head, e.g. @ic{(?x (told-value (age ?x)))}")
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (args :unknown "What is this?!")
                (only-best-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (order-by
                 (:one-of :new-paper-fn :cae :cae2 :rasouli-paper-fn)
                 "One of the following symbols: @ic{:new-paper-fn, :cae, :cae2, :rasouli-paper-fn}")
                (reverse-order-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (ensure-permutations-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (how-many :non-negative-integer
                          "A non-negative integer (possibly 0)")
                (simple-result-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (runtime-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (final-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (same-as-only-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (candidate-individuals
                 (:list :abox-individual)
                 "A list of objects of the following type: An ABox individual, e.g. @ic{betty}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title quiet-sequence)
               (:label quiet-sequence)
               (:type :function)
               (:in-sections all-functions general)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (unknown))
               (:returns)
               (:description nil)
               (:arguments)
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title publish-file)
               (:label publish-file)
               (:type :function)
               (:in-sections all-functions publish-subscribe)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (filename url content-type))
               (:returns)
               (:description nil)
               (:arguments
                (filename
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}")
                (url :url
                     "A URL string, e.g. @ic{\"http://www.example-ontology.com\"}")
                (content-type
                 :content-type
                 "MIME type string, e.g. @ic{\"text/html\"} or @ic{\"image/jpeg\"}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title publish-1)
               (:label publish-1)
               (:type :function)
               (:in-sections all-functions publish-subscribe)
               (:corresponding-macro publish)
               (:protected t)
               (:signature (individual &optional abox))
               (:returns)
               (:description "Functional interface for publish.")
               (:arguments
                (individual
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title print-tbox-tree)
               (:label print-tbox-tree)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&optional tbox stream hide-role-inverses))
               (:returns)
               (:description nil)
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (hide-role-inverses :unknown "What is this?!"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title print-abox-individuals)
               (:label print-abox-individuals)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature
                (&key stream abox concept-mapping ind-mapping pretty))
               (:returns)
               (:description nil)
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (concept-mapping
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (ind-mapping
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (pretty :unknown "What is this?!"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title prepare-racer-engine)
               (:label prepare-racer-engine)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&key abox classify-tbox-p))
               (:returns)
               (:description
                "Compute internal data structures for instance retrieval.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (classify-tbox-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title prepare-abox)
               (:label prepare-abox)
               (:type :function)
               (:in-sections all-functions abox-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&optional abox))
               (:returns)
               (:description
                "Compute internal data structures for processing abox assertions.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title pracer-answer-query)
               (:label pracer-answer-query)
               (:type :function)
               (:in-sections all-functions agraph)
               (:corresponding-macro pretrieve)
               (:protected t)
               (:signature
                (res-args query &key id print-query use-optimizer))
               (:returns
                :nrql-query-answer
                "A nRQL query answer, e.g. @ic{(((?X I) (?Y J)) ((?X I) (?Y I)) ((?X A) (?Y B)))}")
               (:description nil)
               (:arguments
                (res-args
                 :nrql-query-head
                 "A nRQL query head, e.g. @ic{(?x (told-value (age ?x)))}")
                (query
                 :nrql-query-body
                 "A nRQL query body (antecedence), e.g. @ic{(and (?x C) (?x ?y R) (?y D))}")
                (id
                 :nrql-query-id
                 "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (use-optimizer
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title owllink-read-file)
               (:label owllink-read-file)
               (:type :function)
               (:in-sections all-functions owllink io)
               (:corresponding-macro nil)
               (:protected t)
               (:signature
                (filename &rest args &key &allow-other-keys))
               (:returns)
               (:description nil)
               (:arguments
                (filename
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}")
                (args :unknown "What is this?!"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title owllink-read-document)
               (:label owllink-read-document)
               (:type :function)
               (:in-sections all-functions owllink io)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (url &rest args &key &allow-other-keys))
               (:returns)
               (:description nil)
               (:arguments
                (url
                 :url
                 "A URL string, e.g. @ic{\"http://www.example-ontology.com\"}")
                (args :unknown "What is this?!"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title owlapi-sequence)
               (:label owlapi-sequence)
               (:type :function)
               (:in-sections all-functions ignore)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (unknown))
               (:returns)
               (:description nil)
               (:arguments)
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title |OWLAPI-sequence|)
               (:label |OWLAPI-sequence|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (unknown))
               (:returns)
               (:description nil)
               (:arguments)
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title |OWLAPI-quietSequence|)
               (:label |OWLAPI-quietSequence|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (unknown))
               (:returns)
               (:description nil)
               (:arguments)
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title owlapi-quiet-sequence)
               (:label owlapi-quiet-sequence)
               (:type :function)
               (:in-sections all-functions ignore)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (unknown))
               (:returns)
               (:description nil)
               (:arguments)
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title |OWLAPI-getLastOutputStreamString|)
               (:label |OWLAPI-getLastOutputStreamString|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (unknown))
               (:returns :string "A string, e.g. @ic{\"hello\"}")
               (:description nil)
               (:arguments)
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title |OWLAPI-getLastAnswer|)
               (:label |OWLAPI-getLastAnswer|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (unknown))
               (:returns :sexpression "A Lisp S-expression")
               (:description nil)
               (:arguments)
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title |OWLAPI-getIDsOfLastAnswer|)
               (:label |OWLAPI-getIDsOfLastAnswer|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (unknown))
               (:returns
                (:list :non-negative-integer)
                "A list of objects of the following type: A non-negative integer (possibly 0)")
               (:description nil)
               (:arguments)
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title |OWLAPI-answerSequence|)
               (:label |OWLAPI-answerSequence|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (unknown))
               (:returns)
               (:description nil)
               (:arguments)
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title owlapi-answer-sequence)
               (:label owlapi-answer-sequence)
               (:type :function)
               (:in-sections all-functions ignore)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (unknown))
               (:returns)
               (:description nil)
               (:arguments)
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title owl-read-file)
               (:label owl-read-file)
               (:type :function)
               (:in-sections all-functions owl-interface io)
               (:corresponding-macro nil)
               (:protected t)
               (:signature
                (filename
                 &key
                 verbose
                 init
                 kb-name
                 locator
                 recursive
                 ignore-import
                 import-meta-ontologies
                 excluded-meta-ontologies
                 fire-rules
                 maintain-owlapi-axioms
                 ignore-annotations
                 ontology-name
                 merge-imported-ontologies-p
                 &allow-other-keys))
               (:returns)
               (:description
                "A file in OWL format is loaded and represented as a
TBox and an ABox with appropriate declarations.")
               (:arguments
                (filename
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}")
                (verbose
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (init
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (kb-name :tbox-name "A TBox name, e.g. @ic{family}")
                (locator
                 :url
                 "A URL string, e.g. @ic{\"http://www.example-ontology.com\"}")
                (ignore-import :boolean
                               "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (import-meta-ontologies :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (excluded-meta-ontologies (:list :uri)
                                          "A list of objects of the following type: A URI string, e.g. @ic{\"http://www.example-ontology.com#person\"}")
                (fire-rules
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (maintain-owlapi-axioms :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (ignore-annotations
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (ontology-name :owlapi-ontology-name
                               "An OWLAPI2 ontology name, a TBox / ABox name")
                (merge-imported-ontologies-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title owl-read-document)
               (:label owl-read-document)
               (:type :function)
               (:in-sections all-functions owl-interface io)
               (:corresponding-macro nil)
               (:protected t)
               (:signature
                (url-spec
                 &rest
                 args
                 &key
                 verbose
                 init
                 kb-name
                 locator
                 recursive
                 ignore-import
                 ontology-name
                 merge-imported-ontologies-p
                 import-meta-ontologies
                 excluded-meta-ontologies
                 fire-rules
                 maintain-owlapi-axioms
                 ignore-annotations))
               (:returns)
               (:description
                "A text document in OWL format is loaded from
				a web server and represented as a TBox and an ABox with appropriate
				declarations.")
               (:arguments
                (url-spec
                 :url
                 "A URL string, e.g. @ic{\"http://www.example-ontology.com\"}")
                (args :unknown "What is this?!")
                (verbose
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (init
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (kb-name :tbox-name "A TBox name, e.g. @ic{family}")
                (locator
                 :url
                 "A URL string, e.g. @ic{\"http://www.example-ontology.com\"}")
                (ignore-import :boolean
                               "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (ontology-name :owlapi-ontology-name
                               "An OWLAPI2 ontology name, a TBox / ABox name")
                (merge-imported-ontologies-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (import-meta-ontologies :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (excluded-meta-ontologies (:list :uri)
                                          "A list of objects of the following type: A URI string, e.g. @ic{\"http://www.example-ontology.com#person\"}")
                (fire-rules
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (maintain-owlapi-axioms :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (ignore-annotations
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title open-triple-store)
               (:label open-triple-store)
               (:type :function)
               (:in-sections all-functions agraph)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (name &key directory rdfs-reasoning))
               (:returns)
               (:description nil)
               (:arguments
                (name
                 :triplestore-name
                 "A triple-store name, a symbol")
                (directory :directory
                           "A directory stringm e.g. @ic{\"/home/mi.wessel/test/\"}")
                (rdfs-reasoning
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title msc-k)
               (:label msc-k)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature
                (individual
                 k
                 &rest
                 args
                 &key
                 include-direct-types
                 abox
                 name
                 &allow-other-keys))
               (:returns
                :concept-expression
                "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
               (:description nil)
               (:arguments
                (individual
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (k
                 :non-negative-integer
                 "A non-negative integer (possibly 0)")
                (args :unknown "What is this?!")
                (include-direct-types
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (name :concept-name "A concept name, e.g. @ic{woman}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title most-specific-instantiators)
               (:label most-specific-instantiators)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:corresponding-macro individual-direct-types)
               (:protected t)
               (:signature (individual-name abox))
               (:returns
                (:list (:list :concept-name))
                "A list of objects of the following type: A list of objects of the following type: A concept name, e.g. @ic{woman}")
               (:description
                "Gets the most-specific atomic concepts of which an 
			   individual is an instance.")
               (:arguments
                (individual-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title mirror)
               (:label mirror)
               (:type :function)
               (:in-sections all-functions owl-interface)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (url-spec1 url-or-filename))
               (:returns)
               (:description
                "If you are offline, importing OWL or DAML ontologies may cause problems.
				However, editing documents and inserting local URLs for ontologies is inconvenient.
				Therefore, Racer provides a facility to declare local mirror URLs for ontology URLs.")
               (:arguments
                (url-spec1
                 :url
                 "A URL string, e.g. @ic{\"http://www.example-ontology.com\"}")
                (url-or-filename
                 (:or :url :filename)
                 "One of the following:  A URL string, e.g. @ic{\"http://www.example-ontology.com\"}, A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title materialize-inferences)
               (:label materialize-inferences)
               (:type :function)
               (:in-sections all-functions agraph)
               (:corresponding-macro nil)
               (:protected t)
               (:signature
                (kb-name
                 &key
                 db
                 directory
                 index-p
                 abox-told-only-p
                 abox
                 tbox
                 if-exists
                 if-does-not-exist
                 all-different-p
                 same-individual-as
                 role-fillers
                 told-datatype-fillers
                 subgraph-markers
                 rename-individuals
                 in-case-individuals-are-renamed-keep-originals
                 data-version-level))
               (:returns)
               (:description nil)
               (:arguments
                (kb-name :tbox-name "A TBox name, e.g. @ic{family}")
                (db :triplestore-name "A triple-store name, a symbol")
                (directory :directory
                           "A directory stringm e.g. @ic{\"/home/mi.wessel/test/\"}")
                (index-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (abox-told-only-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (if-exists
                 (:one-of :supersede :error)
                 "One of the following symbols: @ic{:supersede, :error}")
                (if-does-not-exist
                 (:one-of :create :error)
                 "One of the following symbols: @ic{:create, :error}")
                (all-different-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (same-individual-as :boolean
                                    "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (role-fillers
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (told-datatype-fillers
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rename-individuals
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (in-case-individuals-are-renamed-keep-originals
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title logging-on)
               (:label logging-on)
               (:type :function)
               (:in-sections all-functions general)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&optional filename debug))
               (:returns)
               (:description
                "Start logging of expressions to the Racer server.")
               (:arguments
                (filename
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}")
                (debug
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title logging-off)
               (:label logging-off)
               (:type :function)
               (:in-sections all-functions general)
               (:corresponding-macro nil)
               (:protected t)
               (:signature nil)
               (:returns)
               (:description
                "Start logging of expressions to the Racer server.")
               (:arguments)
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title lcs-unfold)
               (:label lcs-unfold)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (concept-1 concept-2 &optional tbox))
               (:returns
                :concept-expression
                "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
               (:description nil)
               (:arguments
                (concept-1
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (concept-2
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title lcs)
               (:label lcs)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (concept1 concept2))
               (:returns
                :concept-expression
                "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
               (:description nil)
               (:arguments
                (concept1
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (concept2
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title kb-ontologies)
               (:label kb-ontologies)
               (:type :function)
               (:in-sections all-functions tbox-owl-ask owl-interface)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (kb-name))
               (:returns
                (:list :symbol)
                "A list of objects of the following type: A symbol")
               (:description
                "A document in DAML+OIL or OWL format can import other ontologies.
				With this function one can retrieve all ontologies that were imported into
				the specified knowledge base.")
               (:arguments
                (kb-name :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title irreflexive-p)
               (:label irreflexive-p)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro irreflexive?)
               (:protected t)
               (:signature (role-term &optional tbox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description nil)
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title inverse-of-role)
               (:label inverse-of-role)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro inverse)
               (:protected t)
               (:signature (rolename inverse-role tbox))
               (:returns
                :role-term
                "A role name or inverse role name, e.g. the symbol @ic{R} or the expression @ic{(inv R)}")
               (:description
                "Defines a name for the inverse of a role.")
               (:arguments
                (rolename :role "A role, e.g. @ic{has-child}")
                (inverse-role :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title inverse-feature-p)
               (:label inverse-feature-p)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro :unknown)
               (:protected t)
               (:signature (role-term &optional tbox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description nil)
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title internal-individuals-related-p)
               (:label internal-individuals-related-p)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:corresponding-macro :unknown)
               (:protected t)
               (:signature
                (ind-predecessor-name-set
                 ind-filler-name-set
                 role-term
                 abox
                 &optional
                 check-p))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description nil)
               (:arguments
                (ind-predecessor-name-set
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (ind-filler-name-set
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (role-term :role "A role, e.g. @ic{has-child}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (check-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title instantiators)
               (:label instantiators)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:corresponding-macro individual-types)
               (:protected t)
               (:signature (individual-name abox))
               (:returns
                (:list (:list :concept-name))
                "A list of objects of the following type: A list of objects of the following type: A concept name, e.g. @ic{woman}")
               (:description
                "Gets all atomic concepts of which the individual is an instance.")
               (:arguments
                (individual-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title init-tbox)
               (:label init-tbox)
               (:type :function)
               (:in-sections all-functions tbox-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (tbox &key original reset))
               (:returns)
               (:description
                "Generates a new TBox or initializes an existing TBox. 
			   During the initialization all user-defined concept axioms and role declarations 
			   are deleted, only the concepts @ic{*top*} and @ic{*bottom*} remain in the TBox.")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (reset
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title init-subscriptions-1)
               (:label init-subscriptions-1)
               (:type :function)
               (:in-sections all-functions publish-subscribe)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&optional abox))
               (:returns)
               (:description
                "Functional interface for @funref{init-subscriptions}")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title init-publications-1)
               (:label init-publications-1)
               (:type :function)
               (:in-sections all-functions publish-subscribe)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&optional abox))
               (:returns)
               (:description
                "Functional interface for @funref{init-subscription}")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title init-abox)
               (:label init-abox)
               (:type :function)
               (:in-sections all-functions abox-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (abox &optional tbox))
               (:returns)
               (:description
                "Initializes an existing ABox or generates a new ABox. 
			   During the initialization all assertions and the link to the referenced 
			   TBox are deleted.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title individuals-related-p)
               (:label individuals-related-p)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:corresponding-macro individuals-related?)
               (:protected t)
               (:signature
                (ind-predecessor-name-set
                 ind-filler-name-set
                 role-term
                 abox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description
                "Checks if two individuals are directly related via the specified role.")
               (:arguments
                (ind-predecessor-name-set
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (ind-filler-name-set
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (role-term :role "A role, e.g. @ic{has-child}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title individuals-not-equal-p)
               (:label individuals-not-equal-p)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:corresponding-macro individuals-not-equal?)
               (:protected t)
               (:signature (individual-1 individual-2 &optional abox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description
                "Functional equivalent to @funref{individuals-not-equal?}")
               (:arguments
                (individual-1
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (individual-2
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title individuals-equal-p)
               (:label individuals-equal-p)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:corresponding-macro individuals-equal?)
               (:protected t)
               (:signature (individual-1 individual-2 &optional abox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description
                "Functional equivalent to @funref{individuals-equal?}")
               (:arguments
                (individual-1
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (individual-2
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title individual-p)
               (:label individual-p)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:corresponding-macro individual?)
               (:protected t)
               (:signature (individual-name &optional abox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description
                "Checks if @arg{individual-name} is a name of an individual mentioned in an ABox @arg{abox.}")
               (:arguments
                (individual-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title individual-instance-p)
               (:label individual-instance-p)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:corresponding-macro individual-instance?)
               (:protected t)
               (:signature (individual-name concept abox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description
                "Checks if an individual is an instance of a given 
			   concept with respect to an ABox and its TBox.")
               (:arguments
                (individual-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (concept
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title index-all-triples)
               (:label index-all-triples)
               (:type :function)
               (:in-sections all-functions agraph)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&key db))
               (:returns)
               (:description nil)
               (:arguments
                (db :triplestore-name "A triple-store name, a symbol"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title include-kb)
               (:label include-kb)
               (:type :function)
               (:in-sections all-functions tbox-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (pathname))
               (:returns)
               (:description
                "A file in RACER format (as described in this document) 
			    containing TBox and/or ABox declarations is loaded. The function 
				include is used for partitioning a TBox or ABox into several files.")
               (:arguments
                (pathname :filename
                          "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title get-tbox-version)
               (:label get-tbox-version)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (tbox))
               (:returns
                :non-negative-integer
                "A non-negative integer (possibly 0)")
               (:description "Gets a version indicator for a TBox.")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title get-tbox-signature)
               (:label get-tbox-signature)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&optional tbox))
               (:returns :string "A string, e.g. @ic{\"hello\"}")
               (:description "Gets the signature for a TBox.")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title get-tbox-language)
               (:label get-tbox-language)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&optional tbox))
               (:returns :string "A string, e.g. @ic{\"hello\"}")
               (:description
                "Returns a specifier indicating the description logic 
			   language used in the axioms of a given TBox.")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title get-server-timeout)
               (:label get-server-timeout)
               (:type :function)
               (:in-sections all-functions general)
               (:corresponding-macro nil)
               (:protected t)
               (:signature nil)
               (:returns
                (:or nil :non-negative-integer)
                "One of the following:  The symbol nil., A non-negative integer (possibly 0)")
               (:description
                "Returns the timeout for query answering.")
               (:arguments)
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title get-role-datatype)
               (:label get-role-datatype)
               (:type :function)
               (:in-sections all-functions tbox-owl-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (role-name &optional tbox))
               (:returns
                :owl-datatype-expression
                "An OWL2 datatype expression, e.g. @ic{(d-base-type |http://www.w3.org/2001/XMLSchema#integer|)}")
               (:description nil)
               (:arguments
                (role-name :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title get-racer-version)
               (:label get-racer-version)
               (:type :function)
               (:in-sections all-functions updates)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (unknown))
               (:returns :string "A string, e.g. @ic{\"hello\"}")
               (:description
                "Returns a string which describe the version of the Racer system.")
               (:arguments)
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title get-object-bottom-role)
               (:label get-object-bottom-role)
               (:type :function)
               (:in-sections all-functions tbox-owl-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (tbox))
               (:returns :role "A role, e.g. @ic{has-child}")
               (:description nil)
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title get-namespace-prefixes)
               (:label get-namespace-prefixes)
               (:type :function)
               (:in-sections all-functions owl-interface general io)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (unknown))
               (:returns
                (:list (:list :prefix-string :url))
                "A list of objects of the following type: A list of length 2 with objects of the following types: A namespace prefix string, e.g. @ic{\"rdfs\"} or @ic{\"family\"}, A URL string, e.g. @ic{\"http://www.example-ontology.com\"}")
               (:description nil)
               (:arguments)
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title get-namespace-prefix)
               (:label get-namespace-prefix)
               (:type :function)
               (:in-sections all-functions owl-interface)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (tbox))
               (:returns
                :prefix-string
                "A namespace prefix string, e.g. @ic{\"rdfs\"} or @ic{\"family\"}")
               (:description
                "Returns the prefix of the default namespace of a TBox loaded from an OWL
resource.")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title get-meta-constraint)
               (:label get-meta-constraint)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&optional tbox))
               (:returns
                :concept-expression
                "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
               (:description
                "Optimized DL systems perform a static analysis 
			   of given terminological axioms. The axioms of a TBox are usually 
			   transformed in such a way that processing promises to be faster. 
			   In particular, the idea is to transform GCIs into (primitive) concept 
			   definitions. Since it is not always possible to ''absorb'' GCIs completely, 
			   a so-called meta constraint might remain. The functions 
			   @funref{get-meta-constraint} returns the remaining constraint as a concept.")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title get-kb-signature)
               (:label get-kb-signature)
               (:type :function)
               (:in-sections all-functions kb-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (kb-name))
               (:returns :kb-signature "A KB signature, a nested list")
               (:description
                "Gets the signature for a knowledge base.")
               (:arguments
                (kb-name :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title get-individual-pmodel)
               (:label get-individual-pmodel)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (individual-name abox))
               (:returns)
               (:description
                "Returns a so-called pseudo model for an individual.")
               (:arguments
                (individual-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title get-data-bottom-role)
               (:label get-data-bottom-role)
               (:type :function)
               (:in-sections all-functions tbox-owl-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (tbox))
               (:returns :role "A role, e.g. @ic{has-child}")
               (:description nil)
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title get-concept-pmodel)
               (:label get-concept-pmodel)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (concept-expr tbox))
               (:returns)
               (:description
                "Returns a so-called pseudo model for a concept.")
               (:arguments
                (concept-expr
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title get-concept-negated-definition-1)
               (:label get-concept-negated-definition-1)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro get-concept-negated-definition)
               (:protected t)
               (:signature (concept-name tbox))
               (:returns
                :concept-expression
                "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
               (:description
                "Functional interface for @funref{get-concept-negated-definition.}")
               (:arguments
                (concept-name
                 :concept-name
                 "A concept name, e.g. @ic{woman}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title get-concept-definition-1)
               (:label get-concept-definition-1)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro get-concept-definition)
               (:protected t)
               (:signature (concept-name tbox))
               (:returns
                :concept-expression
                "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
               (:description
                "Functional interface for @funref{get-concept-definition.}")
               (:arguments
                (concept-name
                 :concept-name
                 "A concept name, e.g. @ic{woman}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title get-build-version)
               (:label get-build-version)
               (:type :function)
               (:in-sections all-functions general)
               (:corresponding-macro nil)
               (:protected t)
               (:signature nil)
               (:returns :string "A string, e.g. @ic{\"hello\"}")
               (:description nil)
               (:arguments)
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title get-abox-version)
               (:label get-abox-version)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (abox))
               (:returns
                :non-negative-integer
                "A non-negative integer (possibly 0)")
               (:description "Gets a version indicator for a ABox.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title get-abox-signature)
               (:label get-abox-signature)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&optional abox))
               (:returns
                :abox-signature
                "An ABox signature, a nested list")
               (:description "Gets the signature for an ABox.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title get-abox-language)
               (:label get-abox-language)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&optional abox))
               (:returns :string "A string, e.g. @ic{\"hello\"}")
               (:description
                "Returns a specifier indicating the description logic 
			   language used in the axioms of a given ABox.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title forget-tbox)
               (:label forget-tbox)
               (:type :function)
               (:in-sections all-functions tbox-management)
               (:corresponding-macro delete-tbox)
               (:protected t)
               (:signature (tbox))
               (:returns)
               (:description
                "Delete the specified TBox from the list of all TBoxes. 
			   Usually this enables the garbage collector to recycle the memory used by this TBox.")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title forget-statement)
               (:label forget-statement)
               (:type :function)
               (:in-sections all-functions kb-management)
               (:corresponding-macro forget)
               (:protected t)
               (:signature (tbox abox assertions))
               (:returns)
               (:description
                "Functional interface for the macro @funref{forget}")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (assertions
                 (:list :abox-assertion)
                 "A list of objects of the following type: An ABox assertion, e.g. @ic{(instance betty woman)}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title forget-same-individual-as-assertion)
               (:label forget-same-individual-as-assertion)
               (:type :function)
               (:in-sections all-functions abox-forget)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (abox individual-1 individual-2))
               (:returns)
               (:description nil)
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (individual-1
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (individual-2
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title forget-role-axioms)
               (:label forget-role-axioms)
               (:type :function)
               (:in-sections all-functions tbox-forget)
               (:corresponding-macro nil)
               (:protected t)
               (:signature
                (tbox role
                      &key
                      cd-attribute
                      parents
                      parent
                      transitive
                      transitive-p
                      feature
                      feature-p
                      domain
                      range
                      inverse
                      symmetric
                      reflexive
                      reflexive-p
                      datatype
                      annotation-p))
               (:returns)
               (:description nil)
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (role :role "A role, e.g. @ic{has-child}")
                (cd-attribute
                 :cd-attribute
                 "A concrete domain attribute, e.g. @ic{age}")
                (parents
                 (:list :role)
                 "A list of objects of the following type: A role, e.g. @ic{has-child}")
                (parent
                 (:list :role)
                 "A list of objects of the following type: A role, e.g. @ic{has-child}")
                (transitive :boolean
                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (transitive-p :boolean
                              "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (feature
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (feature-p :boolean
                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (domain :concept-expression
                        "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (range :concept-expression
                       "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (inverse :role "A role, e.g. @ic{has-child}")
                (symmetric :boolean
                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (reflexive :boolean
                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (reflexive-p :boolean
                             "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (datatype
                 :role-datatype
                 "An OWL2 datatype expression, e.g. @ic{(d-base-type http://www.w3.org/2001/XMLSchema#integer)}")
                (annotation-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title forget-role-assertion)
               (:label forget-role-assertion)
               (:type :function)
               (:in-sections all-functions abox-forget)
               (:corresponding-macro nil)
               (:protected t)
               (:signature
                (abox predecessor-name filler-name role-term))
               (:returns)
               (:description "Retracts a role assertion from an ABox.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (predecessor-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (filler-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (role-term :role "A role, e.g. @ic{has-child}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title forget-negative-datatype-role-filler)
               (:label forget-negative-datatype-role-filler)
               (:type :function)
               (:in-sections all-functions abox-owl-forget)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (abox individual value role))
               (:returns)
               (:description nil)
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (individual
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (value
                 :cd-value
                 "A concrete domain value, e.g. @ic{\"betty\"} or 35")
                (role
                 :datatype-property
                 "An OWL2 datatype property, a special role, e.g. @ic{hasAge}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title forget-negated-role-assertion)
               (:label forget-negated-role-assertion)
               (:type :function)
               (:in-sections all-functions abox-forget)
               (:corresponding-macro nil)
               (:protected t)
               (:signature
                (abox predecessor-name filler-name role-term))
               (:returns)
               (:description nil)
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (predecessor-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (filler-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (role-term :role "A role, e.g. @ic{has-child}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title forget-individual)
               (:label forget-individual)
               (:type :function)
               (:in-sections all-functions abox-forget)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (individual &optional abox))
               (:returns)
               (:description nil)
               (:arguments
                (individual
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title forget-disjointness-axiom-statement)
               (:label forget-disjointness-axiom-statement)
               (:type :function)
               (:in-sections all-functions tbox-forget)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (tbox concepts))
               (:returns)
               (:description
                "This function is used to forget statements of the form @ic{(disjoint a b c)}")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (concepts
                 (:list :concept-name)
                 "A list of objects of the following type: A concept name, e.g. @ic{woman}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title forget-disjointness-axiom)
               (:label forget-disjointness-axiom)
               (:type :function)
               (:in-sections all-functions tbox-forget)
               (:corresponding-macro nil)
               (:protected t)
               (:signature
                (tbox concept-name group-name &optional form))
               (:returns)
               (:description
                "This function is used to forget declarations with
				@funref{define-disjoint-primitive-concept.}")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (concept-name
                 :concept-name
                 "A concept name, e.g. @ic{woman}")
                (group-name :disjointness-group-id "A symbol")
                (form
                 (:list :concept-expression)
                 "A list of objects of the following type: A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title forget-different-from-assertion)
               (:label forget-different-from-assertion)
               (:type :function)
               (:in-sections all-functions abox-forget)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (abox individual-1 individual-2))
               (:returns)
               (:description nil)
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (individual-1
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (individual-2
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title forget-datatype-role-filler)
               (:label forget-datatype-role-filler)
               (:type :function)
               (:in-sections all-functions abox-owl-forget)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (abox individual value role))
               (:returns)
               (:description nil)
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (individual
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (value
                 :cd-value
                 "A concrete domain value, e.g. @ic{\"betty\"} or 35")
                (role
                 :datatype-property
                 "An OWL2 datatype property, a special role, e.g. @ic{hasAge}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title forget-constraint)
               (:label forget-constraint)
               (:type :function)
               (:in-sections all-functions abox-cd-forget)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (abox constraint))
               (:returns)
               (:description
                "Forget assertions with the form @arg{constraint.}")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (constraint :cd-constraint-expression
                            "A concrete-domain constraint expressions, e.g. @ic{(= temperature-fahrenheit (+ (* 1.8 temperature-celsius) 32))}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title forget-constrained-assertion)
               (:label forget-constrained-assertion)
               (:type :function)
               (:in-sections all-functions abox-cd-forget)
               (:corresponding-macro nil)
               (:protected t)
               (:signature
                (abox individual-name object-name attribute-term))
               (:returns)
               (:description
                "Forget assertions with the form @arg{constrained.}")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (individual-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (object-name
                 :cd-object
                 "A concrete domain object, e.g. @ic{betty-age}")
                (attribute-term
                 :cd-attribute
                 "A concrete domain attribute, e.g. @ic{age}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title forget-concept-axiom)
               (:label forget-concept-axiom)
               (:type :function)
               (:in-sections all-functions tbox-forget)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (tbox left right &key inclusion-p))
               (:returns)
               (:description nil)
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (left
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (right
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (inclusion-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title forget-concept-assertion)
               (:label forget-concept-assertion)
               (:type :function)
               (:in-sections all-functions abox-forget)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (abox individual-name concept))
               (:returns)
               (:description
                "Retracts a concept assertion from an ABox.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (individual-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (concept
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title forget-annotation-concept-assertion)
               (:label forget-annotation-concept-assertion)
               (:type :function)
               (:in-sections all-functions abox-forget)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (abox individual-name concept))
               (:returns)
               (:description nil)
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (individual-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (concept
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title forget-all-different-assertion)
               (:label forget-all-different-assertion)
               (:type :function)
               (:in-sections all-functions abox-forget)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (abox individual-name-set))
               (:returns)
               (:description nil)
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (individual-name-set (:list :abox-individual)
                                     "A list of objects of the following type: An ABox individual, e.g. @ic{betty}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title forget-abox)
               (:label forget-abox)
               (:type :function)
               (:in-sections all-functions abox-management)
               (:corresponding-macro delete-abox)
               (:protected t)
               (:signature (abox))
               (:returns)
               (:description
                "Delete the specified ABox from the list of all ABoxes. 
			   Usually this enables the garbage collector to recycle the memory used by this ABox.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title find-tbox)
               (:label find-tbox)
               (:type :function)
               (:in-sections all-functions tbox-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (tbox &optional errorp))
               (:returns)
               (:description
                "Returns a TBox object with the given name among all TBoxes.")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (errorp
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title find-abox)
               (:label find-abox)
               (:type :function)
               (:in-sections all-functions abox-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (abox-name-or-abox &optional errorp))
               (:returns)
               (:description
                "Finds an ABox object with a given name among all ABoxes.")
               (:arguments
                (abox-name-or-abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (errorp
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title feature-p)
               (:label feature-p)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro feature?)
               (:protected t)
               (:signature (role-term &optional tbox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description
                "Checks if @arg{role-term} is a feature in the specified TBox.")
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title ensure-tbox-signature)
               (:label ensure-tbox-signature)
               (:type :function)
               (:in-sections all-functions tbox-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature
                (tbox &key
                      atomic-concepts
                      roles
                      transitive-roles
                      features
                      attributes))
               (:returns)
               (:description
                "Defines the signature for a TBox and initializes the TBox.")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (atomic-concepts
                 (:list :concept-name)
                 "A list of objects of the following type: A concept name, e.g. @ic{woman}")
                (roles
                 (:list :role)
                 "A list of objects of the following type: A role, e.g. @ic{has-child}")
                (transitive-roles
                 (:list :role)
                 "A list of objects of the following type: A role, e.g. @ic{has-child}")
                (features
                 (:list :role)
                 "A list of objects of the following type: A role, e.g. @ic{has-child}")
                (attributes
                 (:list :cd-attribute)
                 "A list of objects of the following type: A concrete domain attribute, e.g. @ic{age}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title ensure-subsumption-based-query-answering)
               (:label ensure-subsumption-based-query-answering)
               (:type :function)
               (:in-sections all-functions abox-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&optional abox))
               (:returns)
               (:description
                "Instruct RACER to use caching strategies and to exploit 
			   query subsumption for answering instance retrieval queries.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title ensure-small-tboxes)
               (:label ensure-small-tboxes)
               (:type :function)
               (:in-sections all-functions tbox-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (unknown))
               (:returns)
               (:description
                "Instructs Racer to try to save space by throwing 
			   away internal information. This might help if for large TBoxes 
			   memory requirements cannot be met.")
               (:arguments)
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title ensure-abox-signature)
               (:label ensure-abox-signature)
               (:type :function)
               (:in-sections all-functions abox-management)
               (:corresponding-macro signature)
               (:protected t)
               (:signature
                (abox-name-or-abox &key individuals objects))
               (:returns)
               (:description
                "Defines the signature for an ABox and initializes the ABox.")
               (:arguments
                (abox-name-or-abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (individuals
                 (:list :abox-individual)
                 "A list of objects of the following type: An ABox individual, e.g. @ic{betty}")
                (objects
                 (:list :cd-object)
                 "A list of objects of the following type: A concrete domain object, e.g. @ic{betty-age}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title enable-optimized-query-processing)
               (:label enable-optimized-query-processing)
               (:type :function)
               (:in-sections all-functions query-optimizer)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&optional rewrite-concept-definitions))
               (:returns)
               (:description nil)
               (:arguments
                (rewrite-concept-definitions
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title enable-alisp-compatibility-mode)
               (:label enable-alisp-compatibility-mode)
               (:type :function)
               (:in-sections all-functions general io)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (unknown))
               (:returns)
               (:description nil)
               (:arguments)
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title disable-alisp-compatibility-mode)
               (:label disable-alisp-compatibility-mode)
               (:type :function)
               (:in-sections all-functions general io)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (unknown))
               (:returns)
               (:description nil)
               (:arguments)
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title dig-read-file)
               (:label dig-read-file)
               (:type :function)
               (:in-sections all-functions dig io)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (filename &key kb-name init))
               (:returns)
               (:description nil)
               (:arguments
                (filename
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}")
                (kb-name :tbox-name "A TBox name, e.g. @ic{family}")
                (init
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title dig-read-document)
               (:label dig-read-document)
               (:type :function)
               (:in-sections all-functions dig io)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (url-spec &optional kb-name init))
               (:returns)
               (:description nil)
               (:arguments
                (url-spec
                 :url
                 "A URL string, e.g. @ic{\"http://www.example-ontology.com\"}")
                (kb-name :tbox-name "A TBox name, e.g. @ic{family}")
                (init
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title describe-tbox)
               (:label describe-tbox)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&optional tbox stream))
               (:returns)
               (:description
                "Generates a description for the specified TBox.")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title describe-role)
               (:label describe-role)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (role-term &optional tbox stream))
               (:returns)
               (:description
                "Generates a description for the specified role 
			   used in the specified TBox or ABox.")
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title describe-individual1)
               (:label describe-individual1)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (individual-name &optional abox stream))
               (:returns)
               (:description nil)
               (:arguments
                (individual-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title describe-individual)
               (:label describe-individual)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (individual-name &optional abox stream))
               (:returns)
               (:description
                "Generates a description for the individual from the specified ABox.")
               (:arguments
                (individual-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title describe-concept)
               (:label describe-concept)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (concept-name &optional tbox stream))
               (:returns)
               (:description
                "Generates a description for the specified 
			   concept used in the specified TBox or in the ABox and its TBox.")
               (:arguments
                (concept-name
                 :concept-name
                 "A concept name, e.g. @ic{woman}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title describe-abox)
               (:label describe-abox)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&optional abox stream))
               (:returns)
               (:description
                "Generates a description for the specified ABox.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title delete-all-tboxes)
               (:label delete-all-tboxes)
               (:type :function)
               (:in-sections all-functions tbox-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature nil)
               (:returns)
               (:description
                "Delete all known TBoxes except the @arg{default} TBox 
			   called default. Usually this enables the garbage collector to 
			   recycle the memory used by these TBoxes.")
               (:arguments)
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title delete-all-aboxes)
               (:label delete-all-aboxes)
               (:type :function)
               (:in-sections all-functions abox-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature nil)
               (:returns)
               (:description
                "Delete all known ABoxes. Usually this enables the garbage collector to recycle
the memory used by these ABoxes.")
               (:arguments)
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title declare-disjoint)
               (:label declare-disjoint)
               (:type :function)
               (:in-sections all-functions tbox-tell)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (concepts tbox))
               (:returns)
               (:description nil)
               (:arguments
                (concepts
                 (:list :concept-name)
                 "A list of objects of the following type: A concept name, e.g. @ic{woman}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title declare-current-knowledge-bases-as-persistent)
               (:label declare-current-knowledge-bases-as-persistent)
               (:type :function)
               (:in-sections all-functions kb-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature nil)
               (:returns)
               (:description nil)
               (:arguments)
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title datatype-role-range)
               (:label datatype-role-range)
               (:type :function)
               (:in-sections all-functions tbox-owl-tell)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (role-name tbox))
               (:returns)
               (:description
                "Returns the range of datatype property role name @arg{role-name.}")
               (:arguments
                (role-name :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title datatype-role-has-range)
               (:label datatype-role-has-range)
               (:type :function)
               (:in-sections all-functions tbox-owl-tell)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (rolename range tbox))
               (:returns)
               (:description
                "Declares the range of a datatype property role.")
               (:arguments
                (rolename :role "A role, e.g. @ic{has-child}")
                (range :concept-expression
                       "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title current-tbox)
               (:label current-tbox)
               (:type :function)
               (:in-sections all-functions tbox-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature nil)
               (:returns
                :abox-name
                "The name of an ABox, e.g. @ic{family-abox}")
               (:description "The function returns a TBox name.")
               (:arguments)
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title current-abox)
               (:label current-abox)
               (:type :function)
               (:in-sections all-functions abox-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature nil)
               (:returns
                :abox-name
                "The name of an ABox, e.g. @ic{family-abox}")
               (:description "Returns the current ABox.")
               (:arguments)
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title create-triple-store)
               (:label create-triple-store)
               (:type :function)
               (:in-sections all-functions agraph)
               (:corresponding-macro nil)
               (:protected t)
               (:signature
                (name &key if-exists directory data-version-level))
               (:returns)
               (:description nil)
               (:arguments
                (name
                 :triplestore-name
                 "A triple-store name, a symbol")
                (if-exists
                 (:one-of :supersede :error)
                 "One of the following symbols: @ic{:supersede, :error}")
                (directory :directory
                           "A directory stringm e.g. @ic{\"/home/mi.wessel/test/\"}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title create-tbox-internal-marker-concept)
               (:label create-tbox-internal-marker-concept)
               (:type :function)
               (:in-sections all-functions tbox-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (tbox &optional marker-name))
               (:returns
                :concept-name
                "A concept name, e.g. @ic{woman}")
               (:description nil)
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title create-tbox-clone)
               (:label create-tbox-clone)
               (:type :function)
               (:in-sections all-functions tbox-management)
               (:corresponding-macro clone-tbox)
               (:protected t)
               (:signature (tbox &key new-name overwrite))
               (:returns :tbox-name "A TBox name, e.g. @ic{family}")
               (:description
                "Returns a new TBox object which is a clone of the 
			   given TBox. The clone keeps all declarations from its original but 
			   it is otherwise fresh, i.e., new declarations can be added. 
			   This function allows one to create new TBox versions without 
			   the need to reload the already known declarations.")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (new-name :tbox-name "A TBox name, e.g. @ic{family}")
                (overwrite
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title create-abox-clone)
               (:label create-abox-clone)
               (:type :function)
               (:in-sections all-functions abox-management)
               (:corresponding-macro clone-abox)
               (:protected t)
               (:signature (abox &key new-name overwrite copy-rules))
               (:returns
                :abox-name
                "The name of an ABox, e.g. @ic{family-abox}")
               (:description
                "Returns a new ABox object which is a clone of the given 
			   ABox. The clone keeps the assertions and the state from its original 
			   but new declarations can be added without modifying the original ABox. 
			   This function allows one to create new ABox versions without the need 
			   to reload (and reprocess) the already known assertions.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (new-name
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (overwrite
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (copy-rules :boolean
                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title convert-event-specs)
               (:label convert-event-specs)
               (:type :function)
               (:in-sections all-functions events)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (in-file out-file))
               (:returns)
               (:description nil)
               (:arguments
                (in-file
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}")
                (out-file
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title constraint-entailed-p)
               (:label constraint-entailed-p)
               (:type :function)
               (:in-sections all-functions abox-cd-ask)
               (:corresponding-macro constraint-entailed?)
               (:protected t)
               (:signature (constraint &optional abox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description
                "Checks a specified constraint is entailed by 
			   an ABox (and its associated TBox).")
               (:arguments
                (constraint :cd-constraint-expression
                            "A concrete-domain constraint expressions, e.g. @ic{(= temperature-fahrenheit (+ (* 1.8 temperature-celsius) 32))}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title concept-subsumes-p)
               (:label concept-subsumes-p)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro concept-subsumes?)
               (:protected t)
               (:signature (subsumer subsumee tbox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description
                "Checks if two concept terms subsume each other.")
               (:arguments
                (subsumer
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (subsumee
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title concept-satisfiable-p)
               (:label concept-satisfiable-p)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro concept-satisfiable?)
               (:protected t)
               (:signature (concept-term tbox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description
                "Checks if a concept term is satisfiable.")
               (:arguments
                (concept-term :concept-expression
                              "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title concept-p)
               (:label concept-p)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro concept?)
               (:protected t)
               (:signature (concept-name &optional tbox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description
                "Checks if @arg{concept-name} is a concept name for a 
			   concept in the specified TBox.")
               (:arguments
                (concept-name
                 :concept-name
                 "A concept name, e.g. @ic{woman}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title concept-is-primitive-p)
               (:label concept-is-primitive-p)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro concept-is-primitive?)
               (:protected t)
               (:signature (concept-name &optional tbox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description
                "Checks if @arg{concept-name} is a concept name of a so-called @arg{primitive} concept in the
				specified TBox.")
               (:arguments
                (concept-name
                 :concept-name
                 "A concept name, e.g. @ic{woman}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title concept-equivalent-p)
               (:label concept-equivalent-p)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro concept-equivalent?)
               (:protected t)
               (:signature (concept-1 concept-2 tbox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description
                "Checks if the two concepts are equivalent in the given TBox.")
               (:arguments
                (concept-1
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (concept-2
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title concept-disjoint-p)
               (:label concept-disjoint-p)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro concept-disjoint?)
               (:protected t)
               (:signature (concept-1 concept-2 tbox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description
                "Checks if the two concepts are disjoint, e.g. 
			   no individual can be an instance of both concepts.")
               (:arguments
                (concept-1
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (concept-2
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title compute-index-for-instance-retrieval)
               (:label compute-index-for-instance-retrieval)
               (:type :function)
               (:in-sections all-functions abox-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&optional abox))
               (:returns)
               (:description
                "Let RACER create an index for subsequent instance 
			   retrieval queries wrt. the specified ABox.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title compute-implicit-role-fillers)
               (:label compute-implicit-role-fillers)
               (:type :function)
               (:in-sections all-functions abox-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (individual-name &optional abox))
               (:returns)
               (:description
                "Instruct RACER to use compute all implicit role 
			   fillers for the individual specified. After computing these fillers, 
			   the function @funref{all-role-assertions} returns also the implicit role 
			   fillers for the individual specified.")
               (:arguments
                (individual-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title compute-all-implicit-role-fillers)
               (:label compute-all-implicit-role-fillers)
               (:type :function)
               (:in-sections all-functions abox-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&optional abox))
               (:returns)
               (:description
                "Instruct RACER to use compute all implicit role 
			   fillers. After computing these fillers, the function 
			   @funref{all-role-assertions} returns also the implicit role fillers.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title close-triple-store)
               (:label close-triple-store)
               (:type :function)
               (:in-sections all-functions agraph)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&key db if-closed))
               (:returns)
               (:description nil)
               (:arguments
                (db :triplestore-name "A triple-store name, a symbol")
                (if-closed
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title clear-default-tbox)
               (:label clear-default-tbox)
               (:type :function)
               (:in-sections all-functions tbox-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature nil)
               (:returns)
               (:description
                "This function initializes the default TBox.")
               (:arguments)
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title classify-tbox)
               (:label classify-tbox)
               (:type :function)
               (:in-sections all-functions tbox-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&optional tbox))
               (:returns)
               (:description "Classifies the whole TBox.")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title check-tbox-coherence)
               (:label check-tbox-coherence)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&optional tbox &key stream))
               (:returns
                (:list (:list :concept-name) (:list :role))
                "A list of length 2 with objects of the following types: A list of objects of the following type: A concept name, e.g. @ic{woman}, A list of objects of the following type: A role, e.g. @ic{has-child}")
               (:description
                "This function checks if there are any unsatisfiable 
			   atomic concepts in the given TBox.")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title check-subscriptions)
               (:label check-subscriptions)
               (:type :function)
               (:in-sections all-functions publish-subscribe)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (abox))
               (:returns
                (:list)
                "A list of objects of the following type: The symbol nil.")
               (:description
                "Explicitly check for new instance retrieval results
			   w.r.t. the set of subscriptions.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title check-abox-coherence)
               (:label check-abox-coherence)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&optional abox filename-or-stream))
               (:returns
                (:list :boolean (:list :abox-assertion))
                "A list of length 2 with objects of the following types: A boolean: @ic{t} (= true) or @ic{nil} (= false), A list of objects of the following type: An ABox assertion, e.g. @ic{(instance betty woman)}")
               (:description
                "Checks if the ABox is consistent. If there is a contradiction, 
			   this function prints information about the culprits.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (filename-or-stream
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title cd-object-p)
               (:label cd-object-p)
               (:type :function)
               (:in-sections all-functions abox-cd-ask)
               (:corresponding-macro cd-object?)
               (:protected t)
               (:signature (object-name &optional abox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description
                "Checks if @arg{object-name} is a name of a concrete 
			   domain object mentioned in an ABox @arg{abox.}")
               (:arguments
                (object-name
                 :cd-object
                 "A concrete domain object, e.g. @ic{betty-age}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title cd-attribute-p)
               (:label cd-attribute-p)
               (:type :function)
               (:in-sections all-functions abox-cd-ask)
               (:corresponding-macro cd-attribute?)
               (:protected t)
               (:signature (attribute &optional tbox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description
                "Checks if @arg{attribute} is a concrete domain attribute in the specified TBox.")
               (:arguments
                (attribute
                 :cd-attribute
                 "A concrete domain attribute, e.g. @ic{age}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title attribute-type)
               (:label attribute-type)
               (:type :function)
               (:in-sections all-functions abox-cd-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (attribute-name &optional tbox))
               (:returns
                :cd-type
                "A concrete domain base type, e.g. @ic{integer, racer-boolean, string, real}")
               (:description
                "Returns the attribute type declared for a given 
			   attribute name in a specified TBox.")
               (:arguments
                (attribute-name
                 :cd-attribute
                 "A concrete domain attribute, e.g. @ic{age}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title attribute-domain-1)
               (:label attribute-domain-1)
               (:type :function)
               (:in-sections all-functions abox-cd-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (attribute-name &optional tbox))
               (:returns
                :concept-expression
                "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
               (:description
                "Returns the domain of attribute name @arg{attribute-name.}")
               (:arguments
                (attribute-name
                 :cd-attribute
                 "A concrete domain attribute, e.g. @ic{age}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title atomic-role-synonyms)
               (:label atomic-role-synonyms)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro role-synonyms)
               (:protected t)
               (:signature (role-term tbox))
               (:returns
                (:list :role)
                "A list of objects of the following type: A role, e.g. @ic{has-child}")
               (:description
                "Gets the synonyms of a role including the role itself.")
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title atomic-role-range)
               (:label atomic-role-range)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro role-range)
               (:protected t)
               (:signature (role-term tbox))
               (:returns
                :concept-expression
                "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
               (:description
                "Returns the range of role name @arg{role-term.}")
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title atomic-role-parents)
               (:label atomic-role-parents)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro role-parents)
               (:protected t)
               (:signature (role-term tbox &key synsets-p))
               (:returns
                (:list :role)
                "A list of objects of the following type: A role, e.g. @ic{has-child}")
               (:description
                "Gets the roles from the TBox that 
			   directly subsume the given role in the role hierarchy.")
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (synsets-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title atomic-role-inverse)
               (:label atomic-role-inverse)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro role-inverse)
               (:protected t)
               (:signature (role-term &optional tbox))
               (:returns
                :role-term
                "A role name or inverse role name, e.g. the symbol @ic{R} or the expression @ic{(inv R)}")
               (:description
                "Returns the inverse role of role term @arg{role-term.}")
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title atomic-role-domain)
               (:label atomic-role-domain)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro attribute-domain)
               (:protected t)
               (:signature (role-term tbox))
               (:returns
                :concept-expression
                "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
               (:description
                "Returns the domain of role name @arg{role-term.}")
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title atomic-role-descendants)
               (:label atomic-role-descendants)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro role-descendants)
               (:protected t)
               (:signature (role-term tbox))
               (:returns
                (:list :role)
                "A list of objects of the following type: A role, e.g. @ic{has-child}")
               (:description
                "Gets all roles from the TBox, that the given role subsumes.")
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title atomic-role-children)
               (:label atomic-role-children)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro role-children)
               (:protected t)
               (:signature (role-term tbox &key synsets-p))
               (:returns
                (:list :role)
                "A list of objects of the following type: A role, e.g. @ic{has-child}")
               (:description
                "Gets all roles from the TBox that are directly 
			   subsumed by the given role in the role hierarchy.")
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (synsets-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title atomic-role-ancestors)
               (:label atomic-role-ancestors)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro role-ancestors)
               (:protected t)
               (:signature (role-term tbox))
               (:returns
                (:list :role)
                "A list of objects of the following type: A role, e.g. @ic{has-child}")
               (:description
                "Gets all roles from the TBox, that subsume the given role in the role hierarchy.")
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title atomic-concept-synonyms)
               (:label atomic-concept-synonyms)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro concept-synonyms)
               (:protected t)
               (:signature (concept-term tbox))
               (:returns
                (:list :concept-name)
                "A list of objects of the following type: A concept name, e.g. @ic{woman}")
               (:description
                "Returns equivalent concepts for the specified concept in the given TBox.")
               (:arguments
                (concept-term :concept-expression
                              "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title atomic-concept-parents)
               (:label atomic-concept-parents)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro concept-parents)
               (:protected t)
               (:signature (concept-term tbox))
               (:returns
                (:list (:list :concept-name))
                "A list of objects of the following type: A list of objects of the following type: A concept name, e.g. @ic{woman}")
               (:description
                "Gets the direct subsumers of the specified concept in the TBox.")
               (:arguments
                (concept-term :concept-expression
                              "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title atomic-concept-descendants)
               (:label atomic-concept-descendants)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro concept-descendants)
               (:protected t)
               (:signature (concept-term tbox))
               (:returns
                (:list (:list :concept-name))
                "A list of objects of the following type: A list of objects of the following type: A concept name, e.g. @ic{woman}")
               (:description
                "Gets all atomic concepts of a TBox, which are 
			   subsumed by the specified concept.")
               (:arguments
                (concept-term :concept-expression
                              "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title atomic-concept-children)
               (:label atomic-concept-children)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro concept-children)
               (:protected t)
               (:signature (concept-term tbox))
               (:returns
                (:list (:list :concept-name))
                "A list of objects of the following type: A list of objects of the following type: A concept name, e.g. @ic{woman}")
               (:description
                "Gets the direct subsumees of the specified concept in the TBox.")
               (:arguments
                (concept-term :concept-expression
                              "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title atomic-concept-ancestors)
               (:label atomic-concept-ancestors)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro concept-ancestors)
               (:protected t)
               (:signature (concept-term tbox))
               (:returns
                (:list (:list :concept-name))
                "A list of objects of the following type: A list of objects of the following type: A concept name, e.g. @ic{woman}")
               (:description
                "Gets all atomic concepts of a TBox, which are 
			   subsuming the specified concept.")
               (:arguments
                (concept-term :concept-expression
                              "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title asymmetric-p)
               (:label asymmetric-p)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro asymmetric?)
               (:protected t)
               (:signature (role-term &optional tbox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description nil)
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title associated-tbox)
               (:label associated-tbox)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (abox))
               (:returns
                (:list :tbox-name)
                "A list of objects of the following type: A TBox name, e.g. @ic{family}")
               (:description "Gets the associated TBox for an ABox.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title associated-aboxes)
               (:label associated-aboxes)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (tbox))
               (:returns
                (:list :abox-name)
                "A list of objects of the following type: The name of an ABox, e.g. @ic{family-abox}")
               (:description
                "Returns a list of ABoxes or ABox names which are defined wrt. 
			   the TBox specified as a parameter.")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title answer-sequence)
               (:label answer-sequence)
               (:type :function)
               (:in-sections all-functions general io)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (unknown))
               (:returns)
               (:description nil)
               (:arguments)
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title all-transitive-roles)
               (:label all-transitive-roles)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&optional tbox &key count))
               (:returns
                (:list :role)
                "A list of objects of the following type: A role, e.g. @ic{has-child}")
               (:description
                "Returns all transitive roles from the specified TBox.")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (count :boolean
                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title all-tboxes)
               (:label all-tboxes)
               (:type :function)
               (:in-sections all-functions tbox-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature nil)
               (:returns
                (:list :tbox-name)
                "A list of objects of the following type: A TBox name, e.g. @ic{family}")
               (:description "Returns the names of all known TBoxes.")
               (:arguments)
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title all-roles)
               (:label all-roles)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature
                (&optional tbox &key count test inverse-test default))
               (:returns
                (:list :role)
                "A list of objects of the following type: A role, e.g. @ic{has-child}")
               (:description
                "Returns all roles and features from the specified TBox.")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (count :boolean
                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title all-role-assertions-for-individual-in-range)
               (:label all-role-assertions-for-individual-in-range)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (individual &optional abox &key count))
               (:returns
                (:list :role-assertion)
                "A list of objects of the following type: A role assertion, e.g. @ic{(related betty charles has-child)}")
               (:description
                "Returns all role assertions for an individual from 
			   the specified ABox in which the individual is a role successor.")
               (:arguments
                (individual
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (count :boolean
                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title all-role-assertions-for-individual-in-domain)
               (:label all-role-assertions-for-individual-in-domain)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (individual &optional abox &key count))
               (:returns
                (:list :role-assertion)
                "A list of objects of the following type: A role assertion, e.g. @ic{(related betty charles has-child)}")
               (:description
                "Returns all role assertions for an individual from 
			   the specified ABox in which the individual is the role predecessor.")
               (:arguments
                (individual
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (count :boolean
                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title all-role-assertions)
               (:label all-role-assertions)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&optional abox &key count))
               (:returns
                (:list :role-assertion)
                "A list of objects of the following type: A role assertion, e.g. @ic{(related betty charles has-child)}")
               (:description
                "Returns all role assertions from the specified ABox.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (count :boolean
                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title all-individuals)
               (:label all-individuals)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&optional abox &key count))
               (:returns
                (:list :abox-individual)
                "A list of objects of the following type: An ABox individual, e.g. @ic{betty}")
               (:description
                "Returns all individuals from the specified ABox.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (count :boolean
                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title all-features)
               (:label all-features)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&optional tbox &key count))
               (:returns
                (:list :role)
                "A list of objects of the following type: A role, e.g. @ic{has-child}")
               (:description
                "Returns all features from the specified TBox.")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (count :boolean
                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title all-equivalent-concepts)
               (:label all-equivalent-concepts)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&optional tbox &key count))
               (:returns
                (:list (:list :concept-name))
                "A list of objects of the following type: A list of objects of the following type: A concept name, e.g. @ic{woman}")
               (:description
                "Returns all equivalent concepts from the specified TBox.")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (count :boolean
                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title all-constraints)
               (:label all-constraints)
               (:type :function)
               (:in-sections all-functions abox-cd-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&optional abox object-names &key count))
               (:returns
                (:list :cd-constraint-expression)
                "A list of objects of the following type: A concrete-domain constraint expressions, e.g. @ic{(= temperature-fahrenheit (+ (* 1.8 temperature-celsius) 32))}")
               (:description
                "Returns all constraints from the specified ABox which 
			   refer to a list of object names.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (count :boolean
                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title all-concept-assertions-for-individual)
               (:label all-concept-assertions-for-individual)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (individual &optional abox &key count))
               (:returns
                (:list :concept-assertion)
                "A list of objects of the following type: A concept assertion, e.g. @ic{(instance betty woman)}")
               (:description
                "Returns all concept assertions for an individual from the specified ABox.")
               (:arguments
                (individual
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (count :boolean
                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title all-concept-assertions)
               (:label all-concept-assertions)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&optional abox &key count))
               (:returns
                (:list :concept-assertion)
                "A list of objects of the following type: A concept assertion, e.g. @ic{(instance betty woman)}")
               (:description
                "Returns all concept assertions from the specified ABox.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (count :boolean
                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title all-attributes)
               (:label all-attributes)
               (:type :function)
               (:in-sections all-functions tbox-cd-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&optional tbox &key count))
               (:returns
                (:list :cd-attribute)
                "A list of objects of the following type: A concrete domain attribute, e.g. @ic{age}")
               (:description
                "Returns all attributes from the specified TBox.")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (count :boolean
                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title all-attribute-assertions)
               (:label all-attribute-assertions)
               (:type :function)
               (:in-sections all-functions abox-cd-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&optional abox individual &key count))
               (:returns
                (:list :attribute-assertion)
                "A list of objects of the following type: A concrete domain attribute assertion, e.g. @ic{(constrained betty betty-age age)}")
               (:description
                "Returns all attribute assertions from the specified ABox.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (individual
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (count :boolean
                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title all-atomic-concepts)
               (:label all-atomic-concepts)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&optional tbox &key count))
               (:returns
                (:list :concept-name)
                "A list of objects of the following type: A concept name, e.g. @ic{woman}")
               (:description
                "Returns all atomic concepts from the specified TBox.")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (count :boolean
                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title all-annotation-role-assertions)
               (:label all-annotation-role-assertions)
               (:type :function)
               (:in-sections all-functions tbox-owl-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&optional abox &key count))
               (:returns
                (:list :role-assertion)
                "A list of objects of the following type: A role assertion, e.g. @ic{(related betty charles has-child)}")
               (:description
                "Returns all annotation role assertions from the specified ABox.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (count :boolean
                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title all-annotation-concept-assertions)
               (:label all-annotation-concept-assertions)
               (:type :function)
               (:in-sections all-functions abox-owl-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (&optional abox &key count))
               (:returns
                (:list :concept-assertion)
                "A list of objects of the following type: A concept assertion, e.g. @ic{(instance betty woman)}")
               (:description
                "Returns all annotation concept assertions from the specified ABox.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (count :boolean
                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title all-aboxes)
               (:label all-aboxes)
               (:type :function)
               (:in-sections all-functions abox-management)
               (:corresponding-macro nil)
               (:protected t)
               (:signature nil)
               (:returns
                (:list :abox-name)
                "A list of objects of the following type: The name of an ABox, e.g. @ic{family-abox}")
               (:description "Returns the names of all known ABoxes.")
               (:arguments)
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title alc-concept-coherent)
               (:label alc-concept-coherent)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (concept-term &key logic))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description
                "Tests the satisfiability of a K(m), 
			   K4(m) or S4(m) formula encoded as an ALC concept.")
               (:arguments
                (concept-term :concept-expression
                              "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (logic
                 (:one-of :k :km :s4 :kb4)
                 "One of the following symbols: @ic{:k, :km, :s4, :kb4}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title add-same-individual-as-assertion)
               (:label add-same-individual-as-assertion)
               (:type :function)
               (:in-sections all-functions abox-tell)
               (:corresponding-macro same-as)
               (:protected t)
               (:signature (abox individual-name-1 individual-name-2))
               (:returns)
               (:description
                "This form declares two individuals to refer to the same domain object.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (individual-name-1
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (individual-name-2
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title add-rule-axiom)
               (:label add-rule-axiom)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:corresponding-macro define-rule)
               (:protected t)
               (:signature
                (abox
                 lefthand-side
                 righthand-side
                 &key
                 id
                 forward-rule-p
                 backward-rule-p
                 fire-once-p))
               (:returns)
               (:description nil)
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (lefthand-side
                 :rule-lefthand-side
                 "A rule head, the rule consequence, e.g. @ic{(?x mother)}")
                (righthand-side
                 :rule-righthand-side
                 "A rule body, the antecedence, e.g. @ic{(and (?x woman) (?x ?y has-child))}")
                (id
                 :nrql-query-id
                 "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (forward-rule-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (backward-rule-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (fire-once-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title add-role-axioms)
               (:label add-role-axioms)
               (:type :function)
               (:in-sections all-functions tbox-tell)
               (:corresponding-macro nil)
               (:protected t)
               (:signature
                (tbox role-name
                      &key
                      cd-attribute
                      feature-p
                      feature
                      transitive-p
                      transitive
                      parents
                      parent
                      inverse
                      inverse-feature-p
                      domain
                      range
                      symmetric
                      symmetric-p
                      reflexive
                      reflexive-p
                      datatype
                      annotation-p
                      irreflexive
                      irreflexive-p
                      asymmetric
                      asymmetric-p
                      compositions))
               (:returns)
               (:description "Adds a role to a TBox.")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (role-name :role "A role, e.g. @ic{has-child}")
                (cd-attribute
                 :cd-attribute
                 "A concrete domain attribute, e.g. @ic{age}")
                (feature-p :boolean
                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (feature
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (transitive-p :boolean
                              "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (transitive :boolean
                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (parents
                 (:list :role)
                 "A list of objects of the following type: A role, e.g. @ic{has-child}")
                (parent
                 (:list :role)
                 "A list of objects of the following type: A role, e.g. @ic{has-child}")
                (inverse :role "A role, e.g. @ic{has-child}")
                (inverse-feature-p :boolean
                                   "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (domain :concept-expression
                        "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (range :concept-expression
                       "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (symmetric :boolean
                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (symmetric-p :boolean
                             "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (reflexive :boolean
                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (reflexive-p :boolean
                             "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (datatype
                 :role-datatype
                 "An OWL2 datatype expression, e.g. @ic{(d-base-type http://www.w3.org/2001/XMLSchema#integer)}")
                (annotation-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (irreflexive :boolean
                             "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (irreflexive-p :boolean
                               "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (asymmetric :boolean
                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (asymmetric-p :boolean
                              "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (compositions :unknown "What is this?!"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title add-role-axiom)
               (:label add-role-axiom)
               (:type :function)
               (:in-sections all-functions tbox-tell)
               (:corresponding-macro nil)
               (:protected t)
               (:signature
                (tbox role-name
                      &key
                      cd-attribute
                      feature-p
                      feature
                      transitive-p
                      transitive
                      parents
                      parent
                      inverse
                      inverse-feature-p
                      domain
                      range
                      symmetric
                      symmetric-p
                      reflexive
                      reflexive-p
                      datatype
                      annotation-p
                      irreflexive
                      irreflexive-p
                      asymmetric
                      asymmetric-p
                      compositions))
               (:returns)
               (:description nil)
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (role-name :role "A role, e.g. @ic{has-child}")
                (cd-attribute
                 :cd-attribute
                 "A concrete domain attribute, e.g. @ic{age}")
                (feature-p :boolean
                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (feature
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (transitive-p :boolean
                              "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (transitive :boolean
                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (parents
                 (:list :role)
                 "A list of objects of the following type: A role, e.g. @ic{has-child}")
                (parent
                 (:list :role)
                 "A list of objects of the following type: A role, e.g. @ic{has-child}")
                (inverse :role "A role, e.g. @ic{has-child}")
                (inverse-feature-p :boolean
                                   "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (domain :concept-expression
                        "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (range :concept-expression
                       "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (symmetric :boolean
                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (symmetric-p :boolean
                             "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (reflexive :boolean
                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (reflexive-p :boolean
                             "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (datatype
                 :role-datatype
                 "An OWL2 datatype expression, e.g. @ic{(d-base-type http://www.w3.org/2001/XMLSchema#integer)}")
                (annotation-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (irreflexive :boolean
                             "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (irreflexive-p :boolean
                               "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (asymmetric :boolean
                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (asymmetric-p :boolean
                              "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (compositions :unknown "What is this?!"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title add-role-assertion)
               (:label add-role-assertion)
               (:type :function)
               (:in-sections all-functions abox-tell)
               (:corresponding-macro related)
               (:protected t)
               (:signature
                (abox predecessor-name filler-name role-term))
               (:returns)
               (:description "Adds a role assertion to an ABox.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (predecessor-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (filler-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (role-term :role "A role, e.g. @ic{has-child}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title add-prefix)
               (:label add-prefix)
               (:type :function)
               (:in-sections all-functions owl-interface)
               (:corresponding-macro define-prefix)
               (:protected t)
               (:signature (prefix mapping))
               (:returns)
               (:description nil)
               (:arguments
                (prefix
                 :prefix-string
                 "A namespace prefix string, e.g. @ic{\"rdfs\"} or @ic{\"family\"}")
                (mapping
                 :url
                 "A URL string, e.g. @ic{\"http://www.example-ontology.com\"}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title add-negative-datatype-role-filler)
               (:label add-negative-datatype-role-filler)
               (:type :function)
               (:in-sections all-functions abox-tell)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (abox individual value role &optional type))
               (:returns)
               (:description nil)
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (individual
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (value
                 :cd-value
                 "A concrete domain value, e.g. @ic{\"betty\"} or 35")
                (role
                 :datatype-property
                 "An OWL2 datatype property, a special role, e.g. @ic{hasAge}")
                (type
                 :datatype
                 "An OWL2 datatype description, e.g. @ic{(d-base-type |http://www.w3.org/2001/XMLSchema#integer|)}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title add-negated-role-assertion)
               (:label add-negated-role-assertion)
               (:type :function)
               (:in-sections all-functions abox-tell)
               (:corresponding-macro unrelated)
               (:protected t)
               (:signature
                (abox predecessor-name filler-name role-term))
               (:returns)
               (:description nil)
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (predecessor-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (filler-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (role-term :role "A role, e.g. @ic{has-child}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title add-event-rule)
               (:label add-event-rule)
               (:type :function)
               (:in-sections all-functions events)
               (:corresponding-macro define-event-rule)
               (:protected t)
               (:signature (head body &optional abox))
               (:returns)
               (:description nil)
               (:arguments
                (head
                 :event-rule-head
                 "An event rule head (the rule consequence)")
                (body
                 :event-rule-body
                 "An event rule body (antecedence)")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title add-event-assertion)
               (:label add-event-assertion)
               (:type :function)
               (:in-sections all-functions events)
               (:corresponding-macro define-event-assertion)
               (:protected t)
               (:signature (assertion &optional abox))
               (:returns)
               (:description nil)
               (:arguments
                (assertion
                 :abox-assertion
                 "An ABox assertion, e.g. @ic{(instance betty woman)}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title add-disjointness-axiom)
               (:label add-disjointness-axiom)
               (:type :function)
               (:in-sections all-functions tbox-tell)
               (:corresponding-macro disjoint)
               (:protected t)
               (:signature
                (tbox concept-name group-name &optional form))
               (:returns)
               (:description
                "This function adds a disjointness concept axiom to a TBox.")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (concept-name
                 :concept-name
                 "A concept name, e.g. @ic{woman}")
                (group-name :disjointness-group-id "A symbol")
                (form
                 (:list :concept-expression)
                 "A list of objects of the following type: A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title add-different-from-assertion)
               (:label add-different-from-assertion)
               (:type :function)
               (:in-sections all-functions abox-tell)
               (:corresponding-macro different-from)
               (:protected t)
               (:signature (abox individual-name-1 individual-name-2))
               (:returns)
               (:description
                "This form declares two individuals NOT to refer to the same domain object.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (individual-name-1
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (individual-name-2
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title add-datatype-role-filler)
               (:label add-datatype-role-filler)
               (:type :function)
               (:in-sections all-functions abox-owl-tell)
               (:corresponding-macro datatype-role-filler)
               (:protected t)
               (:signature (abox individual value role &optional type))
               (:returns)
               (:description
                "Adds a filler for a datatype role w.r.t. an individual.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (individual
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (value
                 :cd-value
                 "A concrete domain value, e.g. @ic{\"betty\"} or 35")
                (role
                 :datatype-property
                 "An OWL2 datatype property, a special role, e.g. @ic{hasAge}")
                (type
                 :datatype
                 "An OWL2 datatype description, e.g. @ic{(d-base-type |http://www.w3.org/2001/XMLSchema#integer|)}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title add-datatype-property)
               (:label add-datatype-property)
               (:type :function)
               (:in-sections all-functions tbox-owl-tell)
               (:corresponding-macro define-datatype-property)
               (:protected t)
               (:signature (tbox name &rest args))
               (:returns)
               (:description nil)
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (name
                 :datatype-property
                 "An OWL2 datatype property, a special role, e.g. @ic{hasAge}")
                (args :unknown "What is this?!"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title add-constraint-assertion)
               (:label add-constraint-assertion)
               (:type :function)
               (:in-sections all-functions abox-cd-tell)
               (:corresponding-macro constraints)
               (:protected t)
               (:signature (abox constraint))
               (:returns)
               (:description
                "Builds a concrete domain predicate assertion 
			   and adds it to an ABox.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (constraint :cd-constraint-expression
                            "A concrete-domain constraint expressions, e.g. @ic{(= temperature-fahrenheit (+ (* 1.8 temperature-celsius) 32))}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title add-concept-axiom)
               (:label add-concept-axiom)
               (:type :function)
               (:in-sections all-functions tbox-tell)
               (:corresponding-macro define-concept)
               (:protected t)
               (:signature (tbox left right &key inclusion-p))
               (:returns)
               (:description
                "This function adds a concept axiom to a TBox.")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (left
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (right
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (inclusion-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title add-concept-assertion)
               (:label add-concept-assertion)
               (:type :function)
               (:in-sections all-functions abox-tell)
               (:corresponding-macro instance)
               (:protected t)
               (:signature (abox individual-name concept))
               (:returns)
               (:description
                "Builds an assertion and adds it to an ABox.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (individual-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (concept
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title add-attribute-assertion)
               (:label add-attribute-assertion)
               (:type :function)
               (:in-sections all-functions abox-cd-tell)
               (:corresponding-macro constrained)
               (:protected t)
               (:signature (abox individual object attribute))
               (:returns)
               (:description
                "Adds a concrete domain attribute assertion to an ABox. 
			   Asserts that an individual is related with a concrete domain object 
			   via an attribute.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (individual
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (object
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (attribute
                 :cd-attribute
                 "A concrete domain attribute, e.g. @ic{age}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title add-annotation-role-assertion)
               (:label add-annotation-role-assertion)
               (:type :function)
               (:in-sections all-functions abox-owl-tell)
               (:corresponding-macro nil)
               (:protected t)
               (:signature
                (abox predecessor-name filler-name role-term))
               (:returns)
               (:description
                "Adds an annotation role assertion to an ABox. 
			   Asserts that an individual is related with a concrete domain object 
			   via an annotation role.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (predecessor-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (filler-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (role-term :role "A role, e.g. @ic{has-child}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title add-annotation-concept-assertion)
               (:label add-annotation-concept-assertion)
               (:type :function)
               (:in-sections all-functions abox-owl-tell)
               (:corresponding-macro nil)
               (:protected t)
               (:signature (abox individual-name concept))
               (:returns)
               (:description
                "Adds an annotation concept assertion to an ABox.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (individual-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (concept
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title add-all-different-assertion)
               (:label add-all-different-assertion)
               (:type :function)
               (:in-sections all-functions abox-tell)
               (:corresponding-macro all-different)
               (:protected t)
               (:signature (abox individual-name-set))
               (:returns)
               (:description
                "This form declares the argument individuals NOT to 
			   refer to the same domain object.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (individual-name-set (:list :abox-individual)
                                     "A list of objects of the following type: An ABox individual, e.g. @ic{betty}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title abox-una-consistent-p)
               (:label abox-una-consistent-p)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:corresponding-macro abox-una-consistent?)
               (:protected t)
               (:signature (&optional abox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description
                "Checks if the ABox is consistent, e.g. it does not contain a 
			   contradiction if the unique name assumption is imposed.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title abox-realized-p)
               (:label abox-realized-p)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:corresponding-macro abox-realized?)
               (:protected t)
               (:signature (&optional abox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description
                "Returns @ic{t} if the specified ABox object has been 
			   realized.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title abox-prepared-p)
               (:label abox-prepared-p)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:corresponding-macro abox-prepared?)
               (:protected t)
               (:signature (&optional abox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description
                "It is checked if internal index structures are 
			   already computed for the specified abox.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title abox-consistent-p)
               (:label abox-consistent-p)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:corresponding-macro abox-consistent?)
               (:protected t)
               (:signature (&optional abox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description
                "Checks if the ABox is consistent, e.g. it does not contain a contradiction.")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title abox-consistent-if-assertions-added-p)
               (:label abox-consistent-if-assertions-added-p)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:corresponding-macro :unknown)
               (:protected t)
               (:signature (abox assertions))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:description nil)
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (assertions
                 (:list :abox-assertion)
                 "A list of objects of the following type: An ABox assertion, e.g. @ic{(instance betty woman)}"))
               (:remarks nil)
               (:see-also nil))

(add-doc-entry (:title waiting-rules)
               (:label waiting-rules)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :nrql-rule-id)
                "A list of objects of the following type: A nRQL rule ID, e.g. @ic{:rule-1}")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Returns a list of (the IDs of) all rules which satisfy @funref{rule-waiting-p}")
               (:remarks nil)
               (:see-also active-rules running-rules)
               (:rule-equivalent-of :waiting-queries)
               (:examples))

(add-doc-entry (:title waiting-queries)
               (:label waiting-queries)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :nrql-query-id)
                "A list of objects of the following type: A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Returns a list of (the IDs of) all queries which satisfy @funref{query-waiting-p}")
               (:remarks nil)
               (:see-also active-queries running-queries)
               (:examples))

(add-doc-entry (:title waiting-expensive-rules)
               (:label waiting-expensive-rules)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :nrql-rule-id)
                "A list of objects of the following type: A nRQL rule ID, e.g. @ic{:rule-1}")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Returns a list of (the IDs of) the rules that satisfy @funref{expensive-rule-p} and @funref{rule-waiting-p}")
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of waiting-expensive-queries)
               (:examples))

(add-doc-entry (:title waiting-expensive-queries)
               (:label waiting-expensive-queries)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :nrql-query-id)
                "A list of objects of the following type: A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Returns a list of (the IDs of) the queries that satisfy @funref{expensive-query-p} and @funref{query-waiting-p}")
               (:remarks nil)
               (:see-also)
               (:query-equivalent-of waiting-expensive-rules)
               (:examples))

(add-doc-entry (:title waiting-cheap-rules)
               (:label waiting-cheap-rules)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :nrql-rule-id)
                "A list of objects of the following type: A nRQL rule ID, e.g. @ic{:rule-1}")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Returns a list of (the IDs of) the rules that satisfy @funref{cheap-rule-p} and @funref{rule-waiting-p}")
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of waiting-cheap-queries)
               (:examples))

(add-doc-entry (:title waiting-cheap-queries)
               (:label waiting-cheap-queries)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :nrql-query-id)
                "A list of objects of the following type: A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Returns a list of (the IDs of) the queries that satisfy @funref{cheap-query-p} and @funref{query-waiting-p}")
               (:remarks nil)
               (:see-also)
               (:query-equivalent-of waiting-cheap-rules)
               (:examples))

(add-doc-entry (:title wait-for-rules-to-terminate)
               (:label wait-for-rules-to-terminate)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of wait-for-queries-to-terminate)
               (:examples))

(add-doc-entry (:title wait-for-queries-to-terminate)
               (:label wait-for-queries-to-terminate)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description
                "Waits (i.e., blocks the API) until all queries have terminated, i.e., @funref{active-queries} returns @ic{ nil}")
               (:remarks
                "queries which are executed in lazy tuple-at-a-time mode do not terminate automatically. Thus, in order to prevent deadlocks, this function can only be called if no such queries are active")
               (:see-also active-queries abort-query)
               (:query-equivalent-of wait-for-rules-to-terminate)
               (:examples))

(add-doc-entry (:title use-injective-variables-by-default)
               (:label use-injective-variables-by-default)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description
                "nRQL offers injective variables. Usually, all variables are non-injective. That means two different variables can be bound to the same ABox individual -- the mapping from variable to ABox individuals must not be injective, unlike for injective variables, for which the mapping must be injective. By default, all variables with @ic{ ?}-prefix are non-injective, and injective variables get a @ic{ $?}-prefix. In the older nRQL, all variables were injective by default; thus, @ic{ ?}-prefix denoted an injective, and @ic{ $?}-prefix a non-injective variable. This function allows you to switch to the old nRQL mode. Note that you can also use negated @ic{ same-as} query atoms to enforce injective bindings")
               (:remarks nil)
               (:see-also
                dont-use-injective-variables-by-default
                set-nrql-mode
                with-nrql-settings
                describe-query-processing-mode)
               (:examples))

(add-doc-entry (:title use-individual-synonym-equivalence-classes)
               (:label use-individual-synonym-equivalence-classes)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description
                "Usually, nRQL's query variables are bound to ABox individuals. However, sometimes Racer can infer that a set of differently named individuals must represent the same (identical) domain object. In this case, the different individuals are called @em{individual synonyms}. Sometimes it is meaningful to bind query variables not to single individuals, but to @em{synonym equivalence classes}. This can be achieved by enabling this mode. If this mode is enabled, then variables will not be bound to single ABox individuals, but to representative individuals from the synonym equivalence classes")
               (:remarks
                "see also @arg{use-individual-synonyms-p} in @funref{execute-query}")
               (:see-also
                dont-use-individual-synonym-equivalence-classes
                set-nrql-mode
                with-nrql-settings
                describe-query-processing-mode)
               (:examples))

(add-doc-entry (:title update-racer)
               (:label update-racer)
               (:type :function)
               (:in-sections all-functions updates)
               (:protected t)
               (:signature (&key patchdir plugindir url))
               (:returns)
               (:arguments
                (patchdir
                 :directory
                 "A directory stringm e.g. @ic{\"/home/mi.wessel/test/\"}")
                (plugindir
                 :directory
                 "A directory stringm e.g. @ic{\"/home/mi.wessel/test/\"}")
                (url
                 :url
                 "A URL string, e.g. @ic{\"http://www.example-ontology.com\"}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title undefine1)
               (:label undefine1)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:corresponding-macro undefine)
               (:protected t)
               (:signature (name))
               (:returns)
               (:arguments
                (name :minilisp-object-name
                      "A MiniLisp identifier, e.g. a MiniLisp variable or function name"))
               (:description
                "Delete a MiniLisp function from the server")
               (:remarks nil)
               (:see-also)
               (:examples ("Example one" (define twice (a) (+ a a)))))

(add-doc-entry (:title undefine-query)
               (:label undefine-query)
               (:type :function)
               (:in-sections all-functions defined-queries)
               (:corresponding-macro undefquery)
               (:protected t)
               (:signature (name &key tbox arity))
               (:returns)
               (:arguments
                (name :nrql-defined-query-name
                      "A symbol, the name of a nRQL defined query")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (arity
                 :non-negative-integer
                 "A non-negative integer (possibly 0)"))
               (:description "Deletes a defined query")
               (:remarks nil)
               (:see-also define-query)
               (:examples
                ("Example one" (undefine-query 'is-a-mother))))

(add-doc-entry (:title undefine-all)
               (:label undefine-all)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description
                "Delete all MiniLisp functions from the server")
               (:remarks nil)
               (:see-also)
               (:examples ("Example one" (undefine-all))))

(add-doc-entry (:title unbind1)
               (:label unbind1)
               (:type :function)
               (:in-sections all-functions minilisp)
               (:corresponding-macro unbind)
               (:protected t)
               (:signature (name))
               (:returns)
               (:arguments
                (name :minilisp-object-name
                      "A MiniLisp identifier, e.g. a MiniLisp variable or function name"))
               (:description "Delete a MiniLisp constant or parameter")
               (:remarks nil)
               (:see-also)
               (:examples ("Example one" (unbind1 pi))))

(add-doc-entry (:title unbind-all)
               (:label unbind-all)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description
                "Deletes all MiniLisp constants and parameters")
               (:remarks nil)
               (:see-also)
               (:examples ("Example one" (unbind-all))))

(add-doc-entry (:title terminated-rules)
               (:label terminated-rules)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for processed-rules))

(add-doc-entry (:title terminated-queries)
               (:label terminated-queries)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for processed-queries))

(add-doc-entry (:title swrl-create-forward-chainging-rules)
               (:label swrl-create-forward-chainging-rules)
               (:type :function)
               (:in-sections all-functions swrl)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title swrl-create-abduction-rules-if-possible)
               (:label swrl-create-abduction-rules-if-possible)
               (:type :function)
               (:in-sections all-functions swrl)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title store-substrate-for-abox)
               (:label store-substrate-for-abox)
               (:type :function)
               (:in-sections all-functions io)
               (:protected t)
               (:signature
                (filename &optional for-abox type-of-substrate))
               (:returns)
               (:arguments
                (filename
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}")
                (for-abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Stores the substrate for ABox @arg{abox} of type (class) @arg{type-of-substrate}")
               (:remarks
                "Note that Racer must be running in unsafe mode (i.e., file io must be allowed). Also note that the KB (ABox, TBox) is also stored in the file; Racer creates two files: @arg{<filename>.SUB.IMG} for the substrate, and @arg{<filename>.SUB.IMG} for the KB using @funref{store-kb-image}")
               (:see-also store-all-substrates store-server-image)
               (:examples))

(add-doc-entry (:title store-server-image)
               (:label store-server-image)
               (:type :function)
               (:in-sections all-functions io)
               (:protected t)
               (:signature (filename))
               (:returns)
               (:arguments
                (filename
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}"))
               (:description
                "Stores the server state in the files @arg{<filename>.SUB.IMG} and @arg{<filename>.KBS.IMG}")
               (:remarks
                "This is like @funref{store-all-substrate}, but all KBs (not only the KBs reference by the substrates) are stored in the image")
               (:see-also store-all-substrate store-substrate-for-abox)
               (:examples))

(add-doc-entry (:title store-all-substrates)
               (:label store-all-substrates)
               (:type :function)
               (:in-sections all-functions io)
               (:protected t)
               (:signature (filename))
               (:returns)
               (:arguments
                (filename
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}"))
               (:description
                "Stores all substrates in a file @arg{filename}")
               (:remarks
                "Note that Racer must be running in unsafe mode (i.e., file io must be allowed). Racer also stores all KBs (ABoxes, TBoxes) referenced by the substrates. Thus, Racer creates two files: @arg{<filename>.SUB.IMG} contains the substrates, and @arg{<filename>.SUB.IMG} contains the KBs (this image is store with @funref{store-kbs-image})")
               (:see-also store-substrate-for-abox store-server-image)
               (:examples))

(add-doc-entry (:title sleeping-rules)
               (:label sleeping-rules)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for waiting-rules))

(add-doc-entry (:title sleeping-queries)
               (:label sleeping-queries)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for waiting-queries))

(add-doc-entry (:title sleeping-expensive-rules)
               (:label sleeping-expensive-rules)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for waiting-expensive-rules))

(add-doc-entry (:title sleeping-expensive-queries)
               (:label sleeping-expensive-queries)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for waiting-expensive-queries))

(add-doc-entry (:title sleeping-cheap-rules)
               (:label sleeping-cheap-rules)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for waiting-cheap-rules))

(add-doc-entry (:title sleeping-cheap-queries)
               (:label sleeping-cheap-queries)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for waiting-cheap-queries))

(add-doc-entry (:title set-substrate-type)
               (:label set-substrate-type)
               (:type :function)
               (:in-sections all-functions substrate-management)
               (:protected t)
               (:signature (type))
               (:returns)
               (:arguments
                (type
                 (:one-of
                  data-substrate
                  mirror-data-substrate
                  rcc-substrate
                  rcc-mirror-substrate)
                 "One of the following symbols: @ic{data-substrate, mirror-data-substrate, rcc-substrate, rcc-mirror-substrate}"))
               (:description
                "Determines the type (class) of the substrates that nRQL creates internally on request")
               (:remarks nil)
               (:see-also
                get-substrate-type
                describe-query-processing-mode)
               (:examples))

(add-doc-entry (:title set-rewrite-defined-concepts)
               (:label set-rewrite-defined-concepts)
               (:type :function)
               (:in-sections all-functions query-optimizer)
               (:protected t)
               (:signature (val))
               (:returns)
               (:arguments
                (val
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title set-rcc-box)
               (:label set-rcc-box)
               (:type :function)
               (:in-sections all-functions rcc-substrate)
               (:corresponding-macro in-rcc-box)
               (:protected t)
               (:signature (name &optional rcc-type type))
               (:returns)
               (:arguments
                (name :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (rcc-type (:one-of :rcc1 :rcc2 :rcc3 :rcc5 :rcc8)
                          "One of the following symbols: @ic{:rcc1, :rcc2, :rcc3, :rcc5, :rcc8}")
                (type
                 (:one-of :rcc-substrate :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:rcc-substrate, :rcc-mirror-substrate}"))
               (:description
                "Creates an RCC substrate for ABox @arg{abox}")
               (:remarks nil)
               (:see-also
                set-data-box
                enable-data-substrate-mirroring
                set-substrate-type)
               (:examples))

(add-doc-entry (:title set-racer-parameter)
               (:label set-racer-parameter)
               (:type :function)
               (:in-sections all-functions general)
               (:protected t)
               (:signature (name value))
               (:returns)
               (:arguments
                (name :racer-parameter "unknown")
                (value :value "A Racer parameter value"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title set-proxy-server)
               (:label set-proxy-server)
               (:type :function)
               (:in-sections all-functions owl-interface)
               (:protected t)
               (:signature (proxy))
               (:returns)
               (:arguments
                (proxy
                 :ip-address
                 "A TCP-IP IP address as a string, e.g. @ic{\"192.168.0.1\"}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title set-nrql-mode)
               (:label set-nrql-mode)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (mode))
               (:returns)
               (:arguments
                (mode
                 :non-negative-integer
                 "A non-negative integer (possibly 0)"))
               (:description
                "Puts nRQL globally into mode @arg{n}. See User Guide for a description of the different querying modes")
               (:remarks nil)
               (:see-also
                describe-query-processing-mode
                with-nrql-settings)
               (:examples))

(add-doc-entry (:title set-new-ind-prefix)
               (:label set-new-ind-prefix)
               (:type :function)
               (:in-sections all-functions abduction)
               (:protected t)
               (:signature (prefix))
               (:returns)
               (:arguments
                (prefix
                 :prefix-string
                 "A namespace prefix string, e.g. @ic{\"rdfs\"} or @ic{\"family\"}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title set-new-ind-counter)
               (:label set-new-ind-counter)
               (:type :function)
               (:in-sections all-functions abduction)
               (:protected t)
               (:signature (n))
               (:returns)
               (:arguments
                (n :non-negative-integer
                   "A non-negative integer (possibly 0)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title set-mirror-data-box)
               (:label set-mirror-data-box)
               (:type :function)
               (:in-sections all-functions data-substrate)
               (:corresponding-macro in-mirror-data-box)
               (:protected t)
               (:signature (name))
               (:returns)
               (:arguments
                (name :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}"))
               (:description
                "Like @funref{set-data-box}, but a mirror data box is created")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title set-maximum-size-of-process-pool)
               (:label set-maximum-size-of-process-pool)
               (:type :function)
               (:in-sections all-functions query-optimizer)
               (:protected t)
               (:signature (n))
               (:returns)
               (:arguments
                (n :non-negative-integer
                   "A non-negative integer (possibly 0)"))
               (:description
                "Like @funref{set-initial-size-of-process-pool}, but now the maximum number of processes in the process pool is specified. In case a new query answering process is needed from a pool and the pool is currently empty (all processes are accquired by different queries and/or rules), nRQL will create an additional process. This new process is added to the pool, thus, the process pool can grow up to an upper bound which is specified here")
               (:remarks nil)
               (:see-also
                set-initial-size-of-process-pool
                get-initial-size-of-process-pool
                get-process-pool-size
                describe-query-processing-mode)
               (:examples))

(add-doc-entry (:title set-max-no-of-tuples-bound)
               (:label set-max-no-of-tuples-bound)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (&optional n))
               (:returns)
               (:arguments
                (n :non-negative-integer
                   "A non-negative integer (possibly 0)"))
               (:description
                "Sets a (global) bound on the number of answer tuples that are computed. Use @ic{ nil} to set to unbounded (infinite). See also argument @arg{how-many} of function @funref{execute-query}")
               (:remarks nil)
               (:see-also
                describe-query-processing-mode
                get-max-no-of-tuples-bound
                with-nrql-settings)
               (:examples))

(add-doc-entry (:title set-initial-size-of-process-pool)
               (:label set-initial-size-of-process-pool)
               (:type :function)
               (:in-sections all-functions query-optimizer)
               (:protected t)
               (:signature (n))
               (:returns)
               (:arguments
                (n :non-negative-integer
                   "A non-negative integer (possibly 0)"))
               (:description
                "nRQL uses a process (thread) pool for the query answering processes. The initial (minimal) size of the pooled processes can be specified with that function. This specifies the lower bound of concurrent queries")
               (:remarks
                "note that setting the initial process pool causes the pool to reinitialize; all active queries (and rules) are aborted")
               (:see-also
                get-initial-size-of-process-pool
                get-process-pool-size
                set-maximum-size-of-process-pool
                get-maximum-size-of-process-pool
                describe-query-processing-mode)
               (:examples))

(add-doc-entry (:title set-edge-label-for-non-existent-edges)
               (:label set-edge-label-for-non-existent-edges)
               (:type :function)
               (:in-sections all-functions rcc-substrate)
               (:protected t)
               (:signature (edge-label &key abox type-of-substrate))
               (:returns)
               (:arguments
                (edge-label :substrate-description-label "unknown")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title set-data-box)
               (:label set-data-box)
               (:type :function)
               (:in-sections all-functions substrate-management)
               (:corresponding-macro in-data-box)
               (:protected t)
               (:signature (name))
               (:returns)
               (:arguments
                (name :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}"))
               (:description
                "Creates a data substrate for ABox @arg{abox}")
               (:remarks nil)
               (:see-also set-mirror-data-box set-rcc-box)
               (:examples))

(add-doc-entry (:title server-value)
               (:label server-value)
               (:type :function)
               (:in-sections all-functions minilisp)
               (:protected t)
               (:signature (name))
               (:returns)
               (:arguments
                (name :minilisp-object-name
                      "A MiniLisp identifier, e.g. a MiniLisp variable or function name"))
               (:description
                "Registers MiniLisp parameter or constant as a server parameter or constant")
               (:remarks nil)
               (:see-also defpar defcon get-all-value)
               (:examples ("Example one" (server-value pi))))

(add-doc-entry (:title server-function)
               (:label server-function)
               (:type :function)
               (:in-sections all-functions minilisp)
               (:protected t)
               (:signature (name))
               (:returns)
               (:arguments
                (name :minilisp-object-name
                      "A MiniLisp identifier, e.g. a MiniLisp variable or function name"))
               (:description
                "Registers MiniLisp function as a server function")
               (:remarks nil)
               (:see-also define undefine get-all-functions)
               (:examples ("Example one" (server-function test))))

(add-doc-entry (:title running-rules)
               (:label running-rules)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :nrql-rule-id)
                "A list of objects of the following type: A nRQL rule ID, e.g. @ic{:rule-1}")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Returns a list of (the IDs of) all rules which satisfy @funref{rule-running-p}")
               (:remarks nil)
               (:see-also active-rules waiting-rules)
               (:rule-equivalent-of running-queries)
               (:examples))

(add-doc-entry (:title running-queries)
               (:label running-queries)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :nrql-query-id)
                "A list of objects of the following type: A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Returns a list of (the IDs of) all queries which satisfy @funref{query-running-p}")
               (:remarks nil)
               (:see-also active-queries waiting-queries)
               (:query-equivalent-of running-rules)
               (:examples))

(add-doc-entry (:title running-expensive-rules)
               (:label running-expensive-rules)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :nrql-rule-id)
                "A list of objects of the following type: A nRQL rule ID, e.g. @ic{:rule-1}")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of running-expensive-rules)
               (:query-equivalent-of running-expensive-rules)
               (:examples))

(add-doc-entry (:title running-expensive-queries)
               (:label running-expensive-queries)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :nrql-query-id)
                "A list of objects of the following type: A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Returns a list of (the IDs of) the queries that satisfy @funref{expensive-query-p} and @funref{query-running-p}")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title running-cheap-rules)
               (:label running-cheap-rules)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :nrql-rule-id)
                "A list of objects of the following type: A nRQL rule ID, e.g. @ic{:rule-1}")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of running-cheap-rules)
               (:query-equivalent-of running-cheap-rules)
               (:examples))

(add-doc-entry (:title running-cheap-queries)
               (:label running-cheap-queries)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :nrql-query-id)
                "A list of objects of the following type: A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Returns a list of (the IDs of) the queries that satisfy @funref{cheap-query-p} and @funref{query-running-p}")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title run-all-rules)
               (:label run-all-rules)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for execute-all-rules))

(add-doc-entry (:title run-all-queries)
               (:label run-all-queries)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for execute-all-queries))

(add-doc-entry (:title rmi)
               (:label rmi)
               (:type :function)
               (:in-sections all-functions ignore)
               (:protected t)
               (:signature (args))
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title restore-substrate)
               (:label restore-substrate)
               (:type :function)
               (:in-sections
                all-functions
                io
                persistence
                substrate-management)
               (:protected t)
               (:signature (filename))
               (:returns)
               (:arguments
                (filename
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}"))
               (:description
                "Restores the substrate from the files @arg{<filename>.SUB.IMG} and @arg{<filename>.KBS.IMG}")
               (:remarks
                "Note that the referenced KB (ABox, TBox) is also restored from the file @arg{<filename>.KB.IMG} using @funref{restore-kb-image}")
               (:see-also restore-all-substrates restore-server-image)
               (:examples))

(add-doc-entry (:title restore-standard-settings)
               (:label restore-standard-settings)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description "Restores the standard nRQL settings")
               (:remarks nil)
               (:see-also
                set-nrql-mode
                with-nrql-settings
                full-reset
                reset-nrql-engine
                describe-query-processing-mode)
               (:examples))

(add-doc-entry (:title restore-server-image)
               (:label restore-server-image)
               (:type :function)
               (:in-sections all-functions io persistence)
               (:protected t)
               (:signature (filename))
               (:returns)
               (:arguments
                (filename
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}"))
               (:description
                "Restores a server image from the files @arg{<filename>.SUB.IMG} and @arg{<filename>.KBS.IMG}")
               (:remarks nil)
               (:see-also restore-all-substrates restore-substrates)
               (:examples))

(add-doc-entry (:title restore-all-substrates)
               (:label restore-all-substrates)
               (:type :function)
               (:in-sections
                all-functions
                io
                persistence
                substrate-management)
               (:protected t)
               (:signature (filename))
               (:returns)
               (:arguments
                (filename
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}"))
               (:description
                "Restores the substrates from the files @arg{<filename>.SUB.IMG} as well as they KBs they reference from @arg{<filename>.KBS.IMG}")
               (:remarks
                "Note that the referenced KBs (ABox, TBox) are restored from the file @arg{<filename>.KB.IMG} using @funref{restore-kbs-image}")
               (:see-also restore-substrate restore-server-image)
               (:examples))

(add-doc-entry (:title reset-nrql-engine)
               (:label reset-nrql-engine)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (&key full-reset-p))
               (:returns)
               (:arguments
                (full-reset-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Aborts all (active) queries and rules using @funref{abort-all-queries}, @funref{abort-all-rules}, then resets the internal caches of the nRQL engine using @funref{reset-all-substrates}), and finally calls @funref{restore-standard-settings}. If @arg{full-reset-p} = @ic{ t} is given, nRQL will delete all TBoxes (as well as the associated ABoxes) using @funref{delete-all-tboxes}), delete all the queries and rules using @funref{delete-all-queries}, @funref{delete-all-rules}, deletes all substrates (as well as the associated QBoxes) and associated defined queries")
               (:remarks nil)
               (:see-also reset-nrql-engine restore-standard-settings)
               (:examples))

(add-doc-entry (:title reset-all-substrates)
               (:label reset-all-substrates)
               (:type :function)
               (:in-sections all-functions substrate-management)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns)
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description "Resets all substrates")
               (:remarks "Does not delete anything from the server")
               (:see-also
                delete-all-substrates
                reset-nrql-engine
                all-substrates
                describe-all-substrates)
               (:examples))

(add-doc-entry (:title report-inconsistent-queries-and-rules)
               (:label report-inconsistent-queries-and-rules)
               (:type :function)
               (:in-sections all-functions query-reasoning)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description
                "Advises nRQL (globally) to automatically check freshly prepared queries and/or rules using @funref{query-consistent-p} and report inconsistent queries and/or rules. Inconsistent queries return no answers and are thus a waste of CPU cycles")
               (:remarks
                "A query / rule is check for consistency when it is prepared, see @funref{racer-prepare-query} (resp. @funref{racer-prepare-rule})")
               (:see-also
                enable-query-repository
                enable-query-realization
                describe-query-processing-mode)
               (:examples))

(add-doc-entry (:title remove-implied-concept-assertions)
               (:label remove-implied-concept-assertions)
               (:type :function)
               (:in-sections all-functions abox-management)
               (:protected t)
               (:signature (abox))
               (:returns
                (:list
                 (:list :concept-assertion)
                 (:list :concept-assertion))
                "A list of length 2 with objects of the following types: A list of objects of the following type: A concept assertion, e.g. @ic{(instance betty woman)}, A list of objects of the following type: A concept assertion, e.g. @ic{(instance betty woman)}")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title register-rcc-synonym)
               (:label register-rcc-synonym)
               (:type :function)
               (:in-sections all-functions rcc-substrate)
               (:corresponding-macro rcc-synonym)
               (:protected t)
               (:signature (role rcc-relation))
               (:returns)
               (:arguments
                (role :role "A role, e.g. @ic{has-child}")
                (rcc-relation :symbol "A symbol"))
               (:description
                "Registers the role name @arg{role} as a synonym for the RCC relation @arg{rcc-relation}")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title reexecute-all-rules)
               (:label reexecute-all-rules)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :nrql-rule-result)
                "A list of objects of the following type: An anonymous ABox, e.g. @ic{(((INSTANCE I MOTHER) (RELATED I J HAS-CHILD) (INSTANCE J CHILD)))}")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of reexecute-all-queries)
               (:examples))

(add-doc-entry (:title reexecute-all-queries)
               (:label reexecute-all-queries)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :nrql-query-answer)
                "A list of objects of the following type: A nRQL query answer, e.g. @ic{(((?X I) (?Y J)) ((?X I) (?Y I)) ((?X A) (?Y B)))}")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Applies @funref{reexecute-query} to @funref{processed-queries}")
               (:remarks nil)
               (:see-also
                reexecute-query
                execute-query
                execute-all-queries)
               (:query-equivalent-of reexecute-all-rules)
               (:examples))

(add-doc-entry (:title ready-rules)
               (:label ready-rules)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :nrql-rule-id)
                "A list of objects of the following type: A nRQL rule ID, e.g. @ic{:rule-1}")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Returns a list of (the IDs of) all rules which satisfy @funref{rule-ready-p}")
               (:remarks nil)
               (:see-also active-rules processed-rules)
               (:examples))

(add-doc-entry (:title ready-queries)
               (:label ready-queries)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :nrql-query-id)
                "A list of objects of the following type: A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Returns a list of (the IDs of) all queries which satisfy @funref{query-ready-p}")
               (:remarks nil)
               (:see-also active-queries processed-queries)
               (:examples))

(add-doc-entry (:title rcc-related1)
               (:label rcc-related1)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for data-edge1))

(add-doc-entry (:title rcc-node1)
               (:label rcc-node1)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for data-node1))

(add-doc-entry (:title rcc-node-label1)
               (:label rcc-node-label1)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for node-label1))

(add-doc-entry (:title rcc-node-description1)
               (:label rcc-node-description1)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for node-description1))

(add-doc-entry (:title rcc-instance1)
               (:label rcc-instance1)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for data-node1))

(add-doc-entry (:title rcc-edge1)
               (:label rcc-edge1)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for data-edge1))

(add-doc-entry (:title rcc-edge-label1)
               (:label rcc-edge-label1)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for node-label1))

(add-doc-entry (:title rcc-edge-description1)
               (:label rcc-edge-description1)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for node-description1))

(add-doc-entry (:title rcc-consistent-p)
               (:label rcc-consistent-p)
               (:type :function)
               (:in-sections all-functions rcc-substrate)
               (:corresponding-macro rcc-consistent?)
               (:protected t)
               (:signature (&optional abox type-of-substrate))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Checks the RCC substrate for relational RCC consistency")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title racer-prepare-tbox-query1)
               (:label racer-prepare-tbox-query1)
               (:type :function)
               (:in-sections all-functions nrql-tbox)
               (:corresponding-macro prepare-tbox-query1)
               (:protected t)
               (:signature
                (query res-args
                       &key
                       execute-p
                       dont-add-abox-duplicates-p
                       remove-duplicates-p
                       two-phase-processing-p
                       deliver-phase-two-warning-tokens-p
                       deliver-kb-has-changed-warning-tokens-p
                       add-rule-consequences-p
                       continuation-based-instance-retrieval-p
                       told-information-reasoning-p
                       final-consistency-checking-p
                       runtime-consistency-checking-p
                       verbose-p
                       dont-show-variables
                       dont-show-head-projection-operators-p
                       dont-show-lambdas-p
                       how-many
                       only-new-tuples-p
                       timeout
                       proactive-tuple-computation-p
                       tuple-at-a-time-p
                       use-individual-synonyms-p
                       check-abox-consistency-p
                       ensure-tbox-classification-p
                       initial-abox-mirroring-p
                       initial-role-assertion-mirroring-p
                       classify-concepts-in-instance-assertions-p
                       exclude-permutations-p
                       record-explanations-p
                       parser-class
                       rewrite-defined-concepts-p
                       group-by-ops
                       bind-specials-p
                       original-query
                       rule-con-pattern
                       new-ind-ops
                       premise
                       generate-code-p
                       optimize-p
                       rewrite-semantically-p
                       rewrite-to-dnf-p
                       report-inconsistent-queries-p
                       report-tautological-queries-p
                       use-repository-p
                       put-into-repository-p
                       id
                       dont-check-id-p
                       parser
                       result-vois
                       tbox
                       package
                       create-tbox-if-not-found-p
                       substrate))
               (:returns
                :nrql-query-id-and-status
                "A nRQL query id plus status description, e.g. @ic{(:QUERY-1 :READY-TO-RUN)}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (res-args
                 :nrql-query-head
                 "A nRQL query head, e.g. @ic{(?x (told-value (age ?x)))}")
                (execute-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-add-abox-duplicates-p :boolean
                                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (remove-duplicates-p :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (two-phase-processing-p :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (deliver-phase-two-warning-tokens-p :boolean
                                                    "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (deliver-kb-has-changed-warning-tokens-p :boolean
                                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (add-rule-consequences-p :boolean
                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (continuation-based-instance-retrieval-p :boolean
                                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (told-information-reasoning-p :boolean
                                              "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (final-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (runtime-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (verbose-p :boolean
                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-variables :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-head-projection-operators-p :boolean
                                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-lambdas-p :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (how-many :non-negative-integer
                          "A non-negative integer (possibly 0)")
                (only-new-tuples-p :boolean
                                   "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (timeout :non-negative-integer
                         "A non-negative integer (possibly 0)")
                (proactive-tuple-computation-p :boolean
                                               "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (tuple-at-a-time-p :boolean
                                   "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-individual-synonyms-p :boolean
                                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (check-abox-consistency-p :boolean
                                          "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (ensure-tbox-classification-p :boolean
                                              "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (initial-abox-mirroring-p :boolean
                                          "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (initial-role-assertion-mirroring-p :boolean
                                                    "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (classify-concepts-in-instance-assertions-p :boolean
                                                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (exclude-permutations-p :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (record-explanations-p :boolean
                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-defined-concepts-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rule-con-pattern :nrql-rule-consequence
                                  "A nRQL rule consequence, a generalized ABox, e.g. @ic{((instance ?x mother) (?X ?y has-child))}")
                (premise (:list :abox-assertion)
                         "A list of objects of the following type: An ABox assertion, e.g. @ic{(instance betty woman)}")
                (optimize-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-semantically-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-to-dnf-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-inconsistent-queries-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-tautological-queries-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-repository-p :boolean
                                  "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (put-into-repository-p :boolean
                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (id :nrql-query-id
                    "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (dont-check-id-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (create-tbox-if-not-found-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (substrate :substrate-name
                           "The name of a substrate, e.g. @ic{geo-example-rcc}"))
               (:description
                "Like @funref{racer-prepare-tbox-query}, but with flipped argument positions for @arg{head} and @arg{body}")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title racer-prepare-tbox-query)
               (:label racer-prepare-tbox-query)
               (:type :function)
               (:in-sections all-functions nrql-tbox)
               (:corresponding-macro prepare-tbox-query)
               (:protected t)
               (:signature
                (res-args
                 query
                 &key
                 execute-p
                 dont-add-abox-duplicates-p
                 remove-duplicates-p
                 two-phase-processing-p
                 deliver-phase-two-warning-tokens-p
                 deliver-kb-has-changed-warning-tokens-p
                 add-rule-consequences-p
                 continuation-based-instance-retrieval-p
                 told-information-reasoning-p
                 final-consistency-checking-p
                 runtime-consistency-checking-p
                 verbose-p
                 dont-show-variables
                 dont-show-head-projection-operators-p
                 dont-show-lambdas-p
                 how-many
                 only-new-tuples-p
                 timeout
                 proactive-tuple-computation-p
                 tuple-at-a-time-p
                 use-individual-synonyms-p
                 check-abox-consistency-p
                 ensure-tbox-classification-p
                 initial-abox-mirroring-p
                 initial-role-assertion-mirroring-p
                 classify-concepts-in-instance-assertions-p
                 exclude-permutations-p
                 record-explanations-p
                 parser-class
                 rewrite-defined-concepts-p
                 group-by-ops
                 bind-specials-p
                 original-query
                 rule-con-pattern
                 new-ind-ops
                 premise
                 generate-code-p
                 optimize-p
                 rewrite-semantically-p
                 rewrite-to-dnf-p
                 report-inconsistent-queries-p
                 report-tautological-queries-p
                 use-repository-p
                 put-into-repository-p
                 id
                 dont-check-id-p
                 parser
                 result-vois
                 tbox
                 package
                 create-tbox-if-not-found-p
                 substrate))
               (:returns
                :nrql-query-id-and-status
                "A nRQL query id plus status description, e.g. @ic{(:QUERY-1 :READY-TO-RUN)}")
               (:arguments
                (res-args
                 :nrql-query-head
                 "A nRQL query head, e.g. @ic{(?x (told-value (age ?x)))}")
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (execute-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-add-abox-duplicates-p :boolean
                                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (remove-duplicates-p :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (two-phase-processing-p :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (deliver-phase-two-warning-tokens-p :boolean
                                                    "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (deliver-kb-has-changed-warning-tokens-p :boolean
                                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (add-rule-consequences-p :boolean
                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (continuation-based-instance-retrieval-p :boolean
                                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (told-information-reasoning-p :boolean
                                              "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (final-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (runtime-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (verbose-p :boolean
                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-variables :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-head-projection-operators-p :boolean
                                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-lambdas-p :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (how-many :non-negative-integer
                          "A non-negative integer (possibly 0)")
                (only-new-tuples-p :boolean
                                   "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (timeout :non-negative-integer
                         "A non-negative integer (possibly 0)")
                (proactive-tuple-computation-p :boolean
                                               "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (tuple-at-a-time-p :boolean
                                   "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-individual-synonyms-p :boolean
                                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (check-abox-consistency-p :boolean
                                          "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (ensure-tbox-classification-p :boolean
                                              "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (initial-abox-mirroring-p :boolean
                                          "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (initial-role-assertion-mirroring-p :boolean
                                                    "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (classify-concepts-in-instance-assertions-p :boolean
                                                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (exclude-permutations-p :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (record-explanations-p :boolean
                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-defined-concepts-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rule-con-pattern :nrql-rule-consequence
                                  "A nRQL rule consequence, a generalized ABox, e.g. @ic{((instance ?x mother) (?X ?y has-child))}")
                (premise (:list :abox-assertion)
                         "A list of objects of the following type: An ABox assertion, e.g. @ic{(instance betty woman)}")
                (optimize-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-semantically-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-to-dnf-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-inconsistent-queries-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-tautological-queries-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-repository-p :boolean
                                  "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (put-into-repository-p :boolean
                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (id :nrql-query-id
                    "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (dont-check-id-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (create-tbox-if-not-found-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (substrate :substrate-name
                           "The name of a substrate, e.g. @ic{geo-example-rcc}"))
               (:description
                "Prepares (i.e., parses and compiles) a nRQL TBox query but does not execute (start) it yet")
               (:remarks
                "To start the query, use @funref{execute-query} (or @arg{execute-p} = @ic{ t})")
               (:see-also execute-query get-answer)
               (:examples
                ("Example one"
                 (racer-prepare-tbox-query '(?x)
                                           '(and (?x woman)
                                                 (?x ?y has-child))))))

(add-doc-entry (:title racer-prepare-rule1)
               (:label racer-prepare-rule1)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:corresponding-macro preprule1)
               (:protected t)
               (:signature
                (res-args
                 query
                 &key
                 execute-p
                 parser-class
                 rewrite-defined-concepts-p
                 group-by-ops
                 bind-specials-p
                 original-query
                 rule-con-pattern
                 new-ind-ops
                 premise
                 generate-code-p
                 optimize-p
                 rewrite-semantically-p
                 rewrite-to-dnf-p
                 report-inconsistent-queries-p
                 report-tautological-queries-p
                 use-repository-p
                 put-into-repository-p
                 id
                 dont-check-id-p
                 parser
                 result-vois
                 substrate
                 abox
                 create-abox-if-not-found-p
                 package
                 type-of-substrate
                 prepare-now-p))
               (:returns
                :nrql-rule-id-and-status
                "A nRQL rule id plus status description, e.g. @ic{(:RULE-1 :READY-TO-RUN)}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (execute-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-defined-concepts-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rule-con-pattern :nrql-rule-consequence
                                  "A nRQL rule consequence, a generalized ABox, e.g. @ic{((instance ?x mother) (?X ?y has-child))}")
                (premise (:list :abox-assertion)
                         "A list of objects of the following type: An ABox assertion, e.g. @ic{(instance betty woman)}")
                (optimize-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-semantically-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-to-dnf-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-inconsistent-queries-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-tautological-queries-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-repository-p :boolean
                                  "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (put-into-repository-p :boolean
                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (id :nrql-query-id
                    "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (dont-check-id-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (substrate :substrate-name
                           "The name of a substrate, e.g. @ic{geo-example-rcc}")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (create-abox-if-not-found-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}")
                (prepare-now-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Like @funref{racer-prepare-rule}, but with flipped argument positions for @arg{antecedence} and @arg{consequence}")
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of racer-prepare-query1)
               (:examples))

(add-doc-entry (:title racer-prepare-rule)
               (:label racer-prepare-rule)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:corresponding-macro preprule)
               (:protected t)
               (:signature
                (query res-args
                       &key
                       execute-p
                       parser-class
                       rewrite-defined-concepts-p
                       group-by-ops
                       bind-specials-p
                       original-query
                       rule-con-pattern
                       new-ind-ops
                       premise
                       generate-code-p
                       optimize-p
                       rewrite-semantically-p
                       rewrite-to-dnf-p
                       report-inconsistent-queries-p
                       report-tautological-queries-p
                       use-repository-p
                       put-into-repository-p
                       id
                       dont-check-id-p
                       parser
                       result-vois
                       substrate
                       abox
                       create-abox-if-not-found-p
                       package
                       type-of-substrate
                       prepare-now-p))
               (:returns
                :nrql-rule-id-and-status
                "A nRQL rule id plus status description, e.g. @ic{(:RULE-1 :READY-TO-RUN)}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (execute-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-defined-concepts-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rule-con-pattern :nrql-rule-consequence
                                  "A nRQL rule consequence, a generalized ABox, e.g. @ic{((instance ?x mother) (?X ?y has-child))}")
                (premise (:list :abox-assertion)
                         "A list of objects of the following type: An ABox assertion, e.g. @ic{(instance betty woman)}")
                (optimize-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-semantically-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-to-dnf-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-inconsistent-queries-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-tautological-queries-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-repository-p :boolean
                                  "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (put-into-repository-p :boolean
                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (id :nrql-query-id
                    "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (dont-check-id-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (substrate :substrate-name
                           "The name of a substrate, e.g. @ic{geo-example-rcc}")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (create-abox-if-not-found-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}")
                (prepare-now-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Prepares (i.e., parses and compiles) a nRQL ABox query but does not execute (start) it yet")
               (:remarks
                "To fire (start, apply) the rule, use @funref{execute-rule}")
               (:see-also prepare-abox-query execute-query)
               (:rule-equivalent-of racer-prepare-query)
               (:examples))

(add-doc-entry (:title racer-prepare-query1)
               (:label racer-prepare-query1)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:corresponding-macro prepare-abox-query1)
               (:protected t)
               (:signature
                (query res-args
                       &key
                       execute-p
                       dont-add-abox-duplicates-p
                       remove-duplicates-p
                       two-phase-processing-p
                       deliver-phase-two-warning-tokens-p
                       deliver-kb-has-changed-warning-tokens-p
                       add-rule-consequences-p
                       continuation-based-instance-retrieval-p
                       told-information-reasoning-p
                       final-consistency-checking-p
                       runtime-consistency-checking-p
                       verbose-p
                       dont-show-variables
                       dont-show-head-projection-operators-p
                       dont-show-lambdas-p
                       how-many
                       only-new-tuples-p
                       timeout
                       proactive-tuple-computation-p
                       tuple-at-a-time-p
                       use-individual-synonyms-p
                       check-abox-consistency-p
                       ensure-tbox-classification-p
                       initial-abox-mirroring-p
                       initial-role-assertion-mirroring-p
                       classify-concepts-in-instance-assertions-p
                       exclude-permutations-p
                       record-explanations-p
                       parser-class
                       rewrite-defined-concepts-p
                       group-by-ops
                       bind-specials-p
                       original-query
                       rule-con-pattern
                       new-ind-ops
                       premise
                       generate-code-p
                       optimize-p
                       rewrite-semantically-p
                       rewrite-to-dnf-p
                       report-inconsistent-queries-p
                       report-tautological-queries-p
                       use-repository-p
                       put-into-repository-p
                       id
                       dont-check-id-p
                       parser
                       result-vois
                       substrate
                       abox
                       create-abox-if-not-found-p
                       package
                       type-of-substrate
                       prepare-now-p))
               (:returns
                :nrql-query-id-and-status
                "A nRQL query id plus status description, e.g. @ic{(:QUERY-1 :READY-TO-RUN)}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (res-args
                 :nrql-query-head
                 "A nRQL query head, e.g. @ic{(?x (told-value (age ?x)))}")
                (execute-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-add-abox-duplicates-p :boolean
                                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (remove-duplicates-p :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (two-phase-processing-p :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (deliver-phase-two-warning-tokens-p :boolean
                                                    "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (deliver-kb-has-changed-warning-tokens-p :boolean
                                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (add-rule-consequences-p :boolean
                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (continuation-based-instance-retrieval-p :boolean
                                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (told-information-reasoning-p :boolean
                                              "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (final-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (runtime-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (verbose-p :boolean
                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-variables :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-head-projection-operators-p :boolean
                                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-lambdas-p :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (how-many :non-negative-integer
                          "A non-negative integer (possibly 0)")
                (only-new-tuples-p :boolean
                                   "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (timeout :non-negative-integer
                         "A non-negative integer (possibly 0)")
                (proactive-tuple-computation-p :boolean
                                               "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (tuple-at-a-time-p :boolean
                                   "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-individual-synonyms-p :boolean
                                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (check-abox-consistency-p :boolean
                                          "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (ensure-tbox-classification-p :boolean
                                              "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (initial-abox-mirroring-p :boolean
                                          "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (initial-role-assertion-mirroring-p :boolean
                                                    "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (classify-concepts-in-instance-assertions-p :boolean
                                                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (exclude-permutations-p :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (record-explanations-p :boolean
                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-defined-concepts-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rule-con-pattern :nrql-rule-consequence
                                  "A nRQL rule consequence, a generalized ABox, e.g. @ic{((instance ?x mother) (?X ?y has-child))}")
                (premise (:list :abox-assertion)
                         "A list of objects of the following type: An ABox assertion, e.g. @ic{(instance betty woman)}")
                (optimize-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-semantically-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-to-dnf-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-inconsistent-queries-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-tautological-queries-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-repository-p :boolean
                                  "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (put-into-repository-p :boolean
                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (id :nrql-query-id
                    "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (dont-check-id-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (substrate :substrate-name
                           "The name of a substrate, e.g. @ic{geo-example-rcc}")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (create-abox-if-not-found-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}")
                (prepare-now-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Like @funref{racer-prepare-query}, but with flipped argument positions for @arg{head} and @arg{body}")
               (:remarks nil)
               (:see-also)
               (:query-equivalent-of racer-prepare-rule1)
               (:examples))

(add-doc-entry (:title racer-prepare-query)
               (:label racer-prepare-query)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:corresponding-macro prepare-abox-query)
               (:protected t)
               (:signature
                (res-args
                 query
                 &key
                 execute-p
                 dont-add-abox-duplicates-p
                 remove-duplicates-p
                 two-phase-processing-p
                 deliver-phase-two-warning-tokens-p
                 deliver-kb-has-changed-warning-tokens-p
                 add-rule-consequences-p
                 continuation-based-instance-retrieval-p
                 told-information-reasoning-p
                 final-consistency-checking-p
                 runtime-consistency-checking-p
                 verbose-p
                 dont-show-variables
                 dont-show-head-projection-operators-p
                 dont-show-lambdas-p
                 how-many
                 only-new-tuples-p
                 timeout
                 proactive-tuple-computation-p
                 tuple-at-a-time-p
                 use-individual-synonyms-p
                 check-abox-consistency-p
                 ensure-tbox-classification-p
                 initial-abox-mirroring-p
                 initial-role-assertion-mirroring-p
                 classify-concepts-in-instance-assertions-p
                 exclude-permutations-p
                 record-explanations-p
                 parser-class
                 rewrite-defined-concepts-p
                 group-by-ops
                 bind-specials-p
                 original-query
                 rule-con-pattern
                 new-ind-ops
                 premise
                 generate-code-p
                 optimize-p
                 rewrite-semantically-p
                 rewrite-to-dnf-p
                 report-inconsistent-queries-p
                 report-tautological-queries-p
                 use-repository-p
                 put-into-repository-p
                 id
                 dont-check-id-p
                 parser
                 result-vois
                 substrate
                 abox
                 create-abox-if-not-found-p
                 package
                 type-of-substrate
                 prepare-now-p))
               (:returns
                :nrql-query-id-and-status
                "A nRQL query id plus status description, e.g. @ic{(:QUERY-1 :READY-TO-RUN)}")
               (:arguments
                (res-args
                 :nrql-query-head
                 "A nRQL query head, e.g. @ic{(?x (told-value (age ?x)))}")
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (execute-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-add-abox-duplicates-p :boolean
                                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (remove-duplicates-p :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (two-phase-processing-p :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (deliver-phase-two-warning-tokens-p :boolean
                                                    "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (deliver-kb-has-changed-warning-tokens-p :boolean
                                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (add-rule-consequences-p :boolean
                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (continuation-based-instance-retrieval-p :boolean
                                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (told-information-reasoning-p :boolean
                                              "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (final-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (runtime-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (verbose-p :boolean
                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-variables :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-head-projection-operators-p :boolean
                                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-lambdas-p :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (how-many :non-negative-integer
                          "A non-negative integer (possibly 0)")
                (only-new-tuples-p :boolean
                                   "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (timeout :non-negative-integer
                         "A non-negative integer (possibly 0)")
                (proactive-tuple-computation-p :boolean
                                               "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (tuple-at-a-time-p :boolean
                                   "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-individual-synonyms-p :boolean
                                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (check-abox-consistency-p :boolean
                                          "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (ensure-tbox-classification-p :boolean
                                              "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (initial-abox-mirroring-p :boolean
                                          "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (initial-role-assertion-mirroring-p :boolean
                                                    "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (classify-concepts-in-instance-assertions-p :boolean
                                                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (exclude-permutations-p :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (record-explanations-p :boolean
                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-defined-concepts-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rule-con-pattern :nrql-rule-consequence
                                  "A nRQL rule consequence, a generalized ABox, e.g. @ic{((instance ?x mother) (?X ?y has-child))}")
                (premise (:list :abox-assertion)
                         "A list of objects of the following type: An ABox assertion, e.g. @ic{(instance betty woman)}")
                (optimize-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-semantically-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-to-dnf-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-inconsistent-queries-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-tautological-queries-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-repository-p :boolean
                                  "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (put-into-repository-p :boolean
                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (id :nrql-query-id
                    "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (dont-check-id-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (substrate :substrate-name
                           "The name of a substrate, e.g. @ic{geo-example-rcc}")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (create-abox-if-not-found-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}")
                (prepare-now-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Prepares (i.e., parses and compiles) a nRQL ABox query but does not execute (start) it yet")
               (:remarks
                "To start the query, use @funref{execute-query} (or @arg{execute-p} = @ic{ t})")
               (:see-also execute-query get-answer)
               (:query-equivalent-of racer-prepare-rule)
               (:examples
                ("Example one"
                 (racer-prepare-query '(?x)
                                      '(and (?x woman)
                                            (?x ?y has-child))))))

(add-doc-entry (:title racer-apply-rule1)
               (:label racer-apply-rule1)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:corresponding-macro firerule1)
               (:protected t)
               (:signature
                (res-args
                 query
                 &key
                 execute-p
                 parser-class
                 rewrite-defined-concepts-p
                 group-by-ops
                 bind-specials-p
                 original-query
                 rule-con-pattern
                 new-ind-ops
                 premise
                 generate-code-p
                 optimize-p
                 rewrite-semantically-p
                 rewrite-to-dnf-p
                 report-inconsistent-queries-p
                 report-tautological-queries-p
                 use-repository-p
                 put-into-repository-p
                 id
                 dont-check-id-p
                 parser
                 result-vois
                 substrate
                 abox
                 create-abox-if-not-found-p
                 package
                 type-of-substrate
                 prepare-now-p))
               (:returns
                :nrql-rule-result
                "An anonymous ABox, e.g. @ic{(((INSTANCE I MOTHER) (RELATED I J HAS-CHILD) (INSTANCE J CHILD)))}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (execute-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-defined-concepts-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rule-con-pattern :nrql-rule-consequence
                                  "A nRQL rule consequence, a generalized ABox, e.g. @ic{((instance ?x mother) (?X ?y has-child))}")
                (premise (:list :abox-assertion)
                         "A list of objects of the following type: An ABox assertion, e.g. @ic{(instance betty woman)}")
                (optimize-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-semantically-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-to-dnf-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-inconsistent-queries-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-tautological-queries-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-repository-p :boolean
                                  "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (put-into-repository-p :boolean
                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (id :nrql-query-id
                    "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (dont-check-id-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (substrate :substrate-name
                           "The name of a substrate, e.g. @ic{geo-example-rcc}")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (create-abox-if-not-found-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}")
                (prepare-now-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Like @funref{racer-apply-rule}, but with flipped argument positions for @arg{antecedence} and @arg{consequence}")
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of racer-answer-query1)
               (:examples))

(add-doc-entry (:title racer-apply-rule-under-premise1)
               (:label racer-apply-rule-under-premise1)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:corresponding-macro firerule-under-premise1)
               (:protected t)
               (:signature
                (res-args
                 query
                 &key
                 execute-p
                 parser-class
                 rewrite-defined-concepts-p
                 group-by-ops
                 bind-specials-p
                 original-query
                 rule-con-pattern
                 new-ind-ops
                 premise
                 generate-code-p
                 optimize-p
                 rewrite-semantically-p
                 rewrite-to-dnf-p
                 report-inconsistent-queries-p
                 report-tautological-queries-p
                 use-repository-p
                 put-into-repository-p
                 id
                 dont-check-id-p
                 parser
                 result-vois
                 substrate
                 abox
                 create-abox-if-not-found-p
                 package
                 type-of-substrate
                 prepare-now-p))
               (:returns
                :nrql-rule-result
                "An anonymous ABox, e.g. @ic{(((INSTANCE I MOTHER) (RELATED I J HAS-CHILD) (INSTANCE J CHILD)))}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (execute-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-defined-concepts-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rule-con-pattern :nrql-rule-consequence
                                  "A nRQL rule consequence, a generalized ABox, e.g. @ic{((instance ?x mother) (?X ?y has-child))}")
                (premise (:list :abox-assertion)
                         "A list of objects of the following type: An ABox assertion, e.g. @ic{(instance betty woman)}")
                (optimize-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-semantically-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-to-dnf-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-inconsistent-queries-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-tautological-queries-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-repository-p :boolean
                                  "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (put-into-repository-p :boolean
                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (id :nrql-query-id
                    "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (dont-check-id-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (substrate :substrate-name
                           "The name of a substrate, e.g. @ic{geo-example-rcc}")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (create-abox-if-not-found-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}")
                (prepare-now-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Like @funref{racer-apply-rule-under-premise}, but with argument list @ic{ (premise antecedence consequence &rest args)}")
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of racer-answer-query-under-premise1)
               (:examples))

(add-doc-entry (:title racer-apply-rule-under-premise)
               (:label racer-apply-rule-under-premise)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:corresponding-macro firerule-under-premise)
               (:protected t)
               (:signature
                (query res-args
                       &key
                       execute-p
                       parser-class
                       rewrite-defined-concepts-p
                       group-by-ops
                       bind-specials-p
                       original-query
                       rule-con-pattern
                       new-ind-ops
                       premise
                       generate-code-p
                       optimize-p
                       rewrite-semantically-p
                       rewrite-to-dnf-p
                       report-inconsistent-queries-p
                       report-tautological-queries-p
                       use-repository-p
                       put-into-repository-p
                       id
                       dont-check-id-p
                       parser
                       result-vois
                       substrate
                       abox
                       create-abox-if-not-found-p
                       package
                       type-of-substrate
                       prepare-now-p))
               (:returns
                :nrql-rule-result
                "An anonymous ABox, e.g. @ic{(((INSTANCE I MOTHER) (RELATED I J HAS-CHILD) (INSTANCE J CHILD)))}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (execute-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-defined-concepts-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rule-con-pattern :nrql-rule-consequence
                                  "A nRQL rule consequence, a generalized ABox, e.g. @ic{((instance ?x mother) (?X ?y has-child))}")
                (premise (:list :abox-assertion)
                         "A list of objects of the following type: An ABox assertion, e.g. @ic{(instance betty woman)}")
                (optimize-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-semantically-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-to-dnf-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-inconsistent-queries-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-tautological-queries-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-repository-p :boolean
                                  "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (put-into-repository-p :boolean
                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (id :nrql-query-id
                    "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (dont-check-id-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (substrate :substrate-name
                           "The name of a substrate, e.g. @ic{geo-example-rcc}")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (create-abox-if-not-found-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}")
                (prepare-now-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Like @funref{racer-apply-rule}, but with argument list @ic{ (premise antecedence consequence &rest args)}")
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of racer-answer-query-under-premise)
               (:examples))

(add-doc-entry (:title racer-apply-rule)
               (:label racer-apply-rule)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:corresponding-macro firerule)
               (:protected t)
               (:signature
                (query res-args
                       &key
                       execute-p
                       parser-class
                       rewrite-defined-concepts-p
                       group-by-ops
                       bind-specials-p
                       original-query
                       rule-con-pattern
                       new-ind-ops
                       premise
                       generate-code-p
                       optimize-p
                       rewrite-semantically-p
                       rewrite-to-dnf-p
                       report-inconsistent-queries-p
                       report-tautological-queries-p
                       use-repository-p
                       put-into-repository-p
                       id
                       dont-check-id-p
                       parser
                       result-vois
                       substrate
                       abox
                       create-abox-if-not-found-p
                       package
                       type-of-substrate
                       prepare-now-p))
               (:returns
                :nrql-rule-result
                "An anonymous ABox, e.g. @ic{(((INSTANCE I MOTHER) (RELATED I J HAS-CHILD) (INSTANCE J CHILD)))}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (execute-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-defined-concepts-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rule-con-pattern :nrql-rule-consequence
                                  "A nRQL rule consequence, a generalized ABox, e.g. @ic{((instance ?x mother) (?X ?y has-child))}")
                (premise (:list :abox-assertion)
                         "A list of objects of the following type: An ABox assertion, e.g. @ic{(instance betty woman)}")
                (optimize-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-semantically-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-to-dnf-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-inconsistent-queries-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-tautological-queries-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-repository-p :boolean
                                  "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (put-into-repository-p :boolean
                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (id :nrql-query-id
                    "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (dont-check-id-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (substrate :substrate-name
                           "The name of a substrate, e.g. @ic{geo-example-rcc}")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (create-abox-if-not-found-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}")
                (prepare-now-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Prepares a rule using @funref{racer-prepare-rule} and then executes it with @funref{execute-rule}")
               (:remarks nil)
               (:see-also racer-prepare-rule execute-rule get-answer)
               (:rule-equivalent-of racer-answer-query)
               (:examples))

(add-doc-entry (:title racer-answer-tbox-query1)
               (:label racer-answer-tbox-query1)
               (:type :function)
               (:in-sections all-functions nrql-tbox)
               (:corresponding-macro tbox-retrieve1)
               (:protected t)
               (:signature
                (query res-args
                       &key
                       execute-p
                       dont-add-abox-duplicates-p
                       remove-duplicates-p
                       two-phase-processing-p
                       deliver-phase-two-warning-tokens-p
                       deliver-kb-has-changed-warning-tokens-p
                       add-rule-consequences-p
                       continuation-based-instance-retrieval-p
                       told-information-reasoning-p
                       final-consistency-checking-p
                       runtime-consistency-checking-p
                       verbose-p
                       dont-show-variables
                       dont-show-head-projection-operators-p
                       dont-show-lambdas-p
                       how-many
                       only-new-tuples-p
                       timeout
                       proactive-tuple-computation-p
                       tuple-at-a-time-p
                       use-individual-synonyms-p
                       check-abox-consistency-p
                       ensure-tbox-classification-p
                       initial-abox-mirroring-p
                       initial-role-assertion-mirroring-p
                       classify-concepts-in-instance-assertions-p
                       exclude-permutations-p
                       record-explanations-p
                       parser-class
                       rewrite-defined-concepts-p
                       group-by-ops
                       bind-specials-p
                       original-query
                       rule-con-pattern
                       new-ind-ops
                       premise
                       generate-code-p
                       optimize-p
                       rewrite-semantically-p
                       rewrite-to-dnf-p
                       report-inconsistent-queries-p
                       report-tautological-queries-p
                       use-repository-p
                       put-into-repository-p
                       id
                       dont-check-id-p
                       parser
                       result-vois
                       tbox
                       package
                       create-tbox-if-not-found-p
                       substrate))
               (:returns
                :nrql-tbox-query-answer
                "A nRQL TBox query answer, e.g. @ic{(((?X D)) ((?X C)) ((?X TOP)) ((?X *TOP*)))}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (res-args
                 :nrql-query-head
                 "A nRQL query head, e.g. @ic{(?x (told-value (age ?x)))}")
                (execute-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-add-abox-duplicates-p :boolean
                                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (remove-duplicates-p :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (two-phase-processing-p :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (deliver-phase-two-warning-tokens-p :boolean
                                                    "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (deliver-kb-has-changed-warning-tokens-p :boolean
                                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (add-rule-consequences-p :boolean
                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (continuation-based-instance-retrieval-p :boolean
                                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (told-information-reasoning-p :boolean
                                              "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (final-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (runtime-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (verbose-p :boolean
                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-variables :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-head-projection-operators-p :boolean
                                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-lambdas-p :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (how-many :non-negative-integer
                          "A non-negative integer (possibly 0)")
                (only-new-tuples-p :boolean
                                   "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (timeout :non-negative-integer
                         "A non-negative integer (possibly 0)")
                (proactive-tuple-computation-p :boolean
                                               "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (tuple-at-a-time-p :boolean
                                   "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-individual-synonyms-p :boolean
                                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (check-abox-consistency-p :boolean
                                          "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (ensure-tbox-classification-p :boolean
                                              "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (initial-abox-mirroring-p :boolean
                                          "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (initial-role-assertion-mirroring-p :boolean
                                                    "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (classify-concepts-in-instance-assertions-p :boolean
                                                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (exclude-permutations-p :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (record-explanations-p :boolean
                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-defined-concepts-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rule-con-pattern :nrql-rule-consequence
                                  "A nRQL rule consequence, a generalized ABox, e.g. @ic{((instance ?x mother) (?X ?y has-child))}")
                (premise (:list :abox-assertion)
                         "A list of objects of the following type: An ABox assertion, e.g. @ic{(instance betty woman)}")
                (optimize-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-semantically-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-to-dnf-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-inconsistent-queries-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-tautological-queries-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-repository-p :boolean
                                  "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (put-into-repository-p :boolean
                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (id :nrql-query-id
                    "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (dont-check-id-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (create-tbox-if-not-found-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (substrate :substrate-name
                           "The name of a substrate, e.g. @ic{geo-example-rcc}"))
               (:description
                "Like @funref{racer-answer-tbox-query}, but with flipped argument positions for @arg{head} and @arg{body}")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title racer-answer-tbox-query)
               (:label racer-answer-tbox-query)
               (:type :function)
               (:in-sections all-functions nrql-tbox)
               (:corresponding-macro tbox-retrieve)
               (:protected t)
               (:signature
                (res-args
                 query
                 &key
                 execute-p
                 dont-add-abox-duplicates-p
                 remove-duplicates-p
                 two-phase-processing-p
                 deliver-phase-two-warning-tokens-p
                 deliver-kb-has-changed-warning-tokens-p
                 add-rule-consequences-p
                 continuation-based-instance-retrieval-p
                 told-information-reasoning-p
                 final-consistency-checking-p
                 runtime-consistency-checking-p
                 verbose-p
                 dont-show-variables
                 dont-show-head-projection-operators-p
                 dont-show-lambdas-p
                 how-many
                 only-new-tuples-p
                 timeout
                 proactive-tuple-computation-p
                 tuple-at-a-time-p
                 use-individual-synonyms-p
                 check-abox-consistency-p
                 ensure-tbox-classification-p
                 initial-abox-mirroring-p
                 initial-role-assertion-mirroring-p
                 classify-concepts-in-instance-assertions-p
                 exclude-permutations-p
                 record-explanations-p
                 parser-class
                 rewrite-defined-concepts-p
                 group-by-ops
                 bind-specials-p
                 original-query
                 rule-con-pattern
                 new-ind-ops
                 premise
                 generate-code-p
                 optimize-p
                 rewrite-semantically-p
                 rewrite-to-dnf-p
                 report-inconsistent-queries-p
                 report-tautological-queries-p
                 use-repository-p
                 put-into-repository-p
                 id
                 dont-check-id-p
                 parser
                 result-vois
                 tbox
                 package
                 create-tbox-if-not-found-p
                 substrate))
               (:returns
                :nrql-tbox-query-answer
                "A nRQL TBox query answer, e.g. @ic{(((?X D)) ((?X C)) ((?X TOP)) ((?X *TOP*)))}")
               (:arguments
                (res-args
                 :nrql-query-head
                 "A nRQL query head, e.g. @ic{(?x (told-value (age ?x)))}")
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (execute-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-add-abox-duplicates-p :boolean
                                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (remove-duplicates-p :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (two-phase-processing-p :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (deliver-phase-two-warning-tokens-p :boolean
                                                    "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (deliver-kb-has-changed-warning-tokens-p :boolean
                                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (add-rule-consequences-p :boolean
                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (continuation-based-instance-retrieval-p :boolean
                                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (told-information-reasoning-p :boolean
                                              "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (final-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (runtime-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (verbose-p :boolean
                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-variables :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-head-projection-operators-p :boolean
                                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-lambdas-p :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (how-many :non-negative-integer
                          "A non-negative integer (possibly 0)")
                (only-new-tuples-p :boolean
                                   "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (timeout :non-negative-integer
                         "A non-negative integer (possibly 0)")
                (proactive-tuple-computation-p :boolean
                                               "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (tuple-at-a-time-p :boolean
                                   "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-individual-synonyms-p :boolean
                                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (check-abox-consistency-p :boolean
                                          "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (ensure-tbox-classification-p :boolean
                                              "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (initial-abox-mirroring-p :boolean
                                          "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (initial-role-assertion-mirroring-p :boolean
                                                    "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (classify-concepts-in-instance-assertions-p :boolean
                                                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (exclude-permutations-p :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (record-explanations-p :boolean
                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-defined-concepts-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rule-con-pattern :nrql-rule-consequence
                                  "A nRQL rule consequence, a generalized ABox, e.g. @ic{((instance ?x mother) (?X ?y has-child))}")
                (premise (:list :abox-assertion)
                         "A list of objects of the following type: An ABox assertion, e.g. @ic{(instance betty woman)}")
                (optimize-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-semantically-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-to-dnf-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-inconsistent-queries-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-tautological-queries-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-repository-p :boolean
                                  "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (put-into-repository-p :boolean
                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (id :nrql-query-id
                    "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (dont-check-id-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (create-tbox-if-not-found-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (substrate :substrate-name
                           "The name of a substrate, e.g. @ic{geo-example-rcc}"))
               (:description
                "TBox query equivalent of @funref{racer-answer-query}")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title racer-answer-query1)
               (:label racer-answer-query1)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:corresponding-macro retrieve1)
               (:protected t)
               (:signature
                (query res-args
                       &key
                       execute-p
                       dont-add-abox-duplicates-p
                       remove-duplicates-p
                       two-phase-processing-p
                       deliver-phase-two-warning-tokens-p
                       deliver-kb-has-changed-warning-tokens-p
                       add-rule-consequences-p
                       continuation-based-instance-retrieval-p
                       told-information-reasoning-p
                       final-consistency-checking-p
                       runtime-consistency-checking-p
                       verbose-p
                       dont-show-variables
                       dont-show-head-projection-operators-p
                       dont-show-lambdas-p
                       how-many
                       only-new-tuples-p
                       timeout
                       proactive-tuple-computation-p
                       tuple-at-a-time-p
                       use-individual-synonyms-p
                       check-abox-consistency-p
                       ensure-tbox-classification-p
                       initial-abox-mirroring-p
                       initial-role-assertion-mirroring-p
                       classify-concepts-in-instance-assertions-p
                       exclude-permutations-p
                       record-explanations-p
                       parser-class
                       rewrite-defined-concepts-p
                       group-by-ops
                       bind-specials-p
                       original-query
                       rule-con-pattern
                       new-ind-ops
                       premise
                       generate-code-p
                       optimize-p
                       rewrite-semantically-p
                       rewrite-to-dnf-p
                       report-inconsistent-queries-p
                       report-tautological-queries-p
                       use-repository-p
                       put-into-repository-p
                       id
                       dont-check-id-p
                       parser
                       result-vois
                       substrate
                       abox
                       create-abox-if-not-found-p
                       package
                       type-of-substrate
                       prepare-now-p))
               (:returns
                :nrql-query-answer
                "A nRQL query answer, e.g. @ic{(((?X I) (?Y J)) ((?X I) (?Y I)) ((?X A) (?Y B)))}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (res-args
                 :nrql-query-head
                 "A nRQL query head, e.g. @ic{(?x (told-value (age ?x)))}")
                (execute-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-add-abox-duplicates-p :boolean
                                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (remove-duplicates-p :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (two-phase-processing-p :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (deliver-phase-two-warning-tokens-p :boolean
                                                    "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (deliver-kb-has-changed-warning-tokens-p :boolean
                                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (add-rule-consequences-p :boolean
                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (continuation-based-instance-retrieval-p :boolean
                                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (told-information-reasoning-p :boolean
                                              "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (final-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (runtime-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (verbose-p :boolean
                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-variables :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-head-projection-operators-p :boolean
                                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-lambdas-p :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (how-many :non-negative-integer
                          "A non-negative integer (possibly 0)")
                (only-new-tuples-p :boolean
                                   "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (timeout :non-negative-integer
                         "A non-negative integer (possibly 0)")
                (proactive-tuple-computation-p :boolean
                                               "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (tuple-at-a-time-p :boolean
                                   "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-individual-synonyms-p :boolean
                                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (check-abox-consistency-p :boolean
                                          "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (ensure-tbox-classification-p :boolean
                                              "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (initial-abox-mirroring-p :boolean
                                          "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (initial-role-assertion-mirroring-p :boolean
                                                    "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (classify-concepts-in-instance-assertions-p :boolean
                                                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (exclude-permutations-p :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (record-explanations-p :boolean
                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-defined-concepts-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rule-con-pattern :nrql-rule-consequence
                                  "A nRQL rule consequence, a generalized ABox, e.g. @ic{((instance ?x mother) (?X ?y has-child))}")
                (premise (:list :abox-assertion)
                         "A list of objects of the following type: An ABox assertion, e.g. @ic{(instance betty woman)}")
                (optimize-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-semantically-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-to-dnf-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-inconsistent-queries-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-tautological-queries-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-repository-p :boolean
                                  "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (put-into-repository-p :boolean
                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (id :nrql-query-id
                    "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (dont-check-id-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (substrate :substrate-name
                           "The name of a substrate, e.g. @ic{geo-example-rcc}")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (create-abox-if-not-found-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}")
                (prepare-now-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Like @funref{racer-answer-query}, but with flipped argument positions for @arg{head} and @arg{body}")
               (:remarks nil)
               (:see-also)
               (:query-equivalent-of racer-apply-rule1)
               (:examples))

(add-doc-entry (:title racer-answer-query-under-premise1)
               (:label racer-answer-query-under-premise1)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:corresponding-macro retrieve-under-premise1)
               (:protected t)
               (:signature
                (query res-args
                       &key
                       execute-p
                       dont-add-abox-duplicates-p
                       remove-duplicates-p
                       two-phase-processing-p
                       deliver-phase-two-warning-tokens-p
                       deliver-kb-has-changed-warning-tokens-p
                       add-rule-consequences-p
                       continuation-based-instance-retrieval-p
                       told-information-reasoning-p
                       final-consistency-checking-p
                       runtime-consistency-checking-p
                       verbose-p
                       dont-show-variables
                       dont-show-head-projection-operators-p
                       dont-show-lambdas-p
                       how-many
                       only-new-tuples-p
                       timeout
                       proactive-tuple-computation-p
                       tuple-at-a-time-p
                       use-individual-synonyms-p
                       check-abox-consistency-p
                       ensure-tbox-classification-p
                       initial-abox-mirroring-p
                       initial-role-assertion-mirroring-p
                       classify-concepts-in-instance-assertions-p
                       exclude-permutations-p
                       record-explanations-p
                       parser-class
                       rewrite-defined-concepts-p
                       group-by-ops
                       bind-specials-p
                       original-query
                       rule-con-pattern
                       new-ind-ops
                       premise
                       generate-code-p
                       optimize-p
                       rewrite-semantically-p
                       rewrite-to-dnf-p
                       report-inconsistent-queries-p
                       report-tautological-queries-p
                       use-repository-p
                       put-into-repository-p
                       id
                       dont-check-id-p
                       parser
                       result-vois
                       substrate
                       abox
                       create-abox-if-not-found-p
                       package
                       type-of-substrate
                       prepare-now-p))
               (:returns
                :nrql-query-answer
                "A nRQL query answer, e.g. @ic{(((?X I) (?Y J)) ((?X I) (?Y I)) ((?X A) (?Y B)))}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (res-args
                 :nrql-query-head
                 "A nRQL query head, e.g. @ic{(?x (told-value (age ?x)))}")
                (execute-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-add-abox-duplicates-p :boolean
                                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (remove-duplicates-p :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (two-phase-processing-p :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (deliver-phase-two-warning-tokens-p :boolean
                                                    "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (deliver-kb-has-changed-warning-tokens-p :boolean
                                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (add-rule-consequences-p :boolean
                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (continuation-based-instance-retrieval-p :boolean
                                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (told-information-reasoning-p :boolean
                                              "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (final-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (runtime-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (verbose-p :boolean
                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-variables :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-head-projection-operators-p :boolean
                                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-lambdas-p :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (how-many :non-negative-integer
                          "A non-negative integer (possibly 0)")
                (only-new-tuples-p :boolean
                                   "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (timeout :non-negative-integer
                         "A non-negative integer (possibly 0)")
                (proactive-tuple-computation-p :boolean
                                               "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (tuple-at-a-time-p :boolean
                                   "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-individual-synonyms-p :boolean
                                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (check-abox-consistency-p :boolean
                                          "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (ensure-tbox-classification-p :boolean
                                              "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (initial-abox-mirroring-p :boolean
                                          "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (initial-role-assertion-mirroring-p :boolean
                                                    "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (classify-concepts-in-instance-assertions-p :boolean
                                                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (exclude-permutations-p :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (record-explanations-p :boolean
                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-defined-concepts-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rule-con-pattern :nrql-rule-consequence
                                  "A nRQL rule consequence, a generalized ABox, e.g. @ic{((instance ?x mother) (?X ?y has-child))}")
                (premise (:list :abox-assertion)
                         "A list of objects of the following type: An ABox assertion, e.g. @ic{(instance betty woman)}")
                (optimize-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-semantically-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-to-dnf-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-inconsistent-queries-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-tautological-queries-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-repository-p :boolean
                                  "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (put-into-repository-p :boolean
                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (id :nrql-query-id
                    "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (dont-check-id-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (substrate :substrate-name
                           "The name of a substrate, e.g. @ic{geo-example-rcc}")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (create-abox-if-not-found-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}")
                (prepare-now-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Like @funref{racer-answer-query-under-premise}, but with flipped argument positions for @arg{head} and @arg{body}")
               (:remarks nil)
               (:see-also)
               (:query-equivalent-of racer-apply-rule-under-premise1)
               (:examples))

(add-doc-entry (:title racer-answer-query-under-premise)
               (:label racer-answer-query-under-premise)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:corresponding-macro retrieve-under-premise)
               (:protected t)
               (:signature
                (res-args
                 query
                 &key
                 execute-p
                 dont-add-abox-duplicates-p
                 remove-duplicates-p
                 two-phase-processing-p
                 deliver-phase-two-warning-tokens-p
                 deliver-kb-has-changed-warning-tokens-p
                 add-rule-consequences-p
                 continuation-based-instance-retrieval-p
                 told-information-reasoning-p
                 final-consistency-checking-p
                 runtime-consistency-checking-p
                 verbose-p
                 dont-show-variables
                 dont-show-head-projection-operators-p
                 dont-show-lambdas-p
                 how-many
                 only-new-tuples-p
                 timeout
                 proactive-tuple-computation-p
                 tuple-at-a-time-p
                 use-individual-synonyms-p
                 check-abox-consistency-p
                 ensure-tbox-classification-p
                 initial-abox-mirroring-p
                 initial-role-assertion-mirroring-p
                 classify-concepts-in-instance-assertions-p
                 exclude-permutations-p
                 record-explanations-p
                 parser-class
                 rewrite-defined-concepts-p
                 group-by-ops
                 bind-specials-p
                 original-query
                 rule-con-pattern
                 new-ind-ops
                 premise
                 generate-code-p
                 optimize-p
                 rewrite-semantically-p
                 rewrite-to-dnf-p
                 report-inconsistent-queries-p
                 report-tautological-queries-p
                 use-repository-p
                 put-into-repository-p
                 id
                 dont-check-id-p
                 parser
                 result-vois
                 substrate
                 abox
                 create-abox-if-not-found-p
                 package
                 type-of-substrate
                 prepare-now-p))
               (:returns
                :nrql-query-answer
                "A nRQL query answer, e.g. @ic{(((?X I) (?Y J)) ((?X I) (?Y I)) ((?X A) (?Y B)))}")
               (:arguments
                (res-args
                 :nrql-query-head
                 "A nRQL query head, e.g. @ic{(?x (told-value (age ?x)))}")
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (execute-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-add-abox-duplicates-p :boolean
                                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (remove-duplicates-p :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (two-phase-processing-p :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (deliver-phase-two-warning-tokens-p :boolean
                                                    "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (deliver-kb-has-changed-warning-tokens-p :boolean
                                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (add-rule-consequences-p :boolean
                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (continuation-based-instance-retrieval-p :boolean
                                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (told-information-reasoning-p :boolean
                                              "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (final-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (runtime-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (verbose-p :boolean
                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-variables :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-head-projection-operators-p :boolean
                                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-lambdas-p :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (how-many :non-negative-integer
                          "A non-negative integer (possibly 0)")
                (only-new-tuples-p :boolean
                                   "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (timeout :non-negative-integer
                         "A non-negative integer (possibly 0)")
                (proactive-tuple-computation-p :boolean
                                               "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (tuple-at-a-time-p :boolean
                                   "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-individual-synonyms-p :boolean
                                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (check-abox-consistency-p :boolean
                                          "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (ensure-tbox-classification-p :boolean
                                              "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (initial-abox-mirroring-p :boolean
                                          "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (initial-role-assertion-mirroring-p :boolean
                                                    "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (classify-concepts-in-instance-assertions-p :boolean
                                                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (exclude-permutations-p :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (record-explanations-p :boolean
                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-defined-concepts-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rule-con-pattern :nrql-rule-consequence
                                  "A nRQL rule consequence, a generalized ABox, e.g. @ic{((instance ?x mother) (?X ?y has-child))}")
                (premise (:list :abox-assertion)
                         "A list of objects of the following type: An ABox assertion, e.g. @ic{(instance betty woman)}")
                (optimize-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-semantically-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-to-dnf-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-inconsistent-queries-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-tautological-queries-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-repository-p :boolean
                                  "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (put-into-repository-p :boolean
                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (id :nrql-query-id
                    "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (dont-check-id-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (substrate :substrate-name
                           "The name of a substrate, e.g. @ic{geo-example-rcc}")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (create-abox-if-not-found-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}")
                (prepare-now-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Like @funref{racer-answer-query}, but a query @arg{premise} is added to the ABox before the query is answered (this can also be achieved with the @arg{premise} keyword argument of @funref{racer-answer-query})")
               (:remarks nil)
               (:see-also)
               (:query-equivalent-of racer-apply-rule-under-premise)
               (:examples))

(add-doc-entry (:title racer-answer-query)
               (:label racer-answer-query)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:corresponding-macro retrieve)
               (:protected t)
               (:signature
                (res-args
                 query
                 &key
                 execute-p
                 dont-add-abox-duplicates-p
                 remove-duplicates-p
                 two-phase-processing-p
                 deliver-phase-two-warning-tokens-p
                 deliver-kb-has-changed-warning-tokens-p
                 add-rule-consequences-p
                 continuation-based-instance-retrieval-p
                 told-information-reasoning-p
                 final-consistency-checking-p
                 runtime-consistency-checking-p
                 verbose-p
                 dont-show-variables
                 dont-show-head-projection-operators-p
                 dont-show-lambdas-p
                 how-many
                 only-new-tuples-p
                 timeout
                 proactive-tuple-computation-p
                 tuple-at-a-time-p
                 use-individual-synonyms-p
                 check-abox-consistency-p
                 ensure-tbox-classification-p
                 initial-abox-mirroring-p
                 initial-role-assertion-mirroring-p
                 classify-concepts-in-instance-assertions-p
                 exclude-permutations-p
                 record-explanations-p
                 parser-class
                 rewrite-defined-concepts-p
                 group-by-ops
                 bind-specials-p
                 original-query
                 rule-con-pattern
                 new-ind-ops
                 premise
                 generate-code-p
                 optimize-p
                 rewrite-semantically-p
                 rewrite-to-dnf-p
                 report-inconsistent-queries-p
                 report-tautological-queries-p
                 use-repository-p
                 put-into-repository-p
                 id
                 dont-check-id-p
                 parser
                 result-vois
                 substrate
                 abox
                 create-abox-if-not-found-p
                 package
                 type-of-substrate
                 prepare-now-p))
               (:returns
                :nrql-query-answer
                "A nRQL query answer, e.g. @ic{(((?X I) (?Y J)) ((?X I) (?Y I)) ((?X A) (?Y B)))}")
               (:arguments
                (res-args
                 :nrql-query-head
                 "A nRQL query head, e.g. @ic{(?x (told-value (age ?x)))}")
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (execute-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-add-abox-duplicates-p :boolean
                                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (remove-duplicates-p :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (two-phase-processing-p :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (deliver-phase-two-warning-tokens-p :boolean
                                                    "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (deliver-kb-has-changed-warning-tokens-p :boolean
                                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (add-rule-consequences-p :boolean
                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (continuation-based-instance-retrieval-p :boolean
                                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (told-information-reasoning-p :boolean
                                              "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (final-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (runtime-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (verbose-p :boolean
                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-variables :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-head-projection-operators-p :boolean
                                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-lambdas-p :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (how-many :non-negative-integer
                          "A non-negative integer (possibly 0)")
                (only-new-tuples-p :boolean
                                   "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (timeout :non-negative-integer
                         "A non-negative integer (possibly 0)")
                (proactive-tuple-computation-p :boolean
                                               "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (tuple-at-a-time-p :boolean
                                   "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-individual-synonyms-p :boolean
                                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (check-abox-consistency-p :boolean
                                          "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (ensure-tbox-classification-p :boolean
                                              "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (initial-abox-mirroring-p :boolean
                                          "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (initial-role-assertion-mirroring-p :boolean
                                                    "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (classify-concepts-in-instance-assertions-p :boolean
                                                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (exclude-permutations-p :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (record-explanations-p :boolean
                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-defined-concepts-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rule-con-pattern :nrql-rule-consequence
                                  "A nRQL rule consequence, a generalized ABox, e.g. @ic{((instance ?x mother) (?X ?y has-child))}")
                (premise (:list :abox-assertion)
                         "A list of objects of the following type: An ABox assertion, e.g. @ic{(instance betty woman)}")
                (optimize-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-semantically-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-to-dnf-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-inconsistent-queries-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-tautological-queries-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-repository-p :boolean
                                  "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (put-into-repository-p :boolean
                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (id :nrql-query-id
                    "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (dont-check-id-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (substrate :substrate-name
                           "The name of a substrate, e.g. @ic{geo-example-rcc}")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (create-abox-if-not-found-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}")
                (prepare-now-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Prepares an ABox query using @funref{racer-prepare-query} and then executes it with @funref{execute-query}")
               (:remarks nil)
               (:see-also racer-prepare-query execute-query get-answer)
               (:query-equivalent-of racer-apply-rule)
               (:examples
                ("Example one"
                 (racer-answer-query '(?x)
                                     '(and (?x woman)
                                           (?x ?y has-child))))
                ("Example two"
                 (racer-answer-query '(?x)
                                     '(and (?x woman)
                                           (?x ?y has-child))
                                     :abox
                                     smith-family
                                     :id
                                     test
                                     :how-many
                                     2))))

(add-doc-entry (:title processed-rules)
               (:label processed-rules)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :nrql-rule-id)
                "A list of objects of the following type: A nRQL rule ID, e.g. @ic{:rule-1}")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Returns a list of (the IDs of) all rules which satisfy @funref{rule-processed-p}")
               (:remarks nil)
               (:see-also prepared-rules active-rules)
               (:examples))

(add-doc-entry (:title processed-queries)
               (:label processed-queries)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :nrql-query-id)
                "A list of objects of the following type: A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Returns a list of (the IDs of) all queries which satisfy @funref{query-processed-p}")
               (:remarks nil)
               (:see-also prepared-queries active-queries)
               (:examples))

(add-doc-entry (:title process-tuple-at-a-time)
               (:label process-tuple-at-a-time)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description
                "Puts nRQL (globally) into tuple-at-time-mode. See also argument @arg{tuple-at-a-time-p} of function @funref{execute-query}")
               (:remarks nil)
               (:see-also describe-query-processing-mode)
               (:examples))

(add-doc-entry (:title process-set-at-a-time)
               (:label process-set-at-a-time)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title prepared-rules)
               (:label prepared-rules)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for ready-rules))

(add-doc-entry (:title prepared-queries)
               (:label prepared-queries)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for ready-queries))

(add-doc-entry (:title prepare-rule1)
               (:label prepare-rule1)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for racer-prepare-rule1))

(add-doc-entry (:title prepare-rule)
               (:label prepare-rule)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for racer-prepare-rule))

(add-doc-entry (:title prepare-query1)
               (:label prepare-query1)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for racer-prepare-query1))

(add-doc-entry (:title prepare-query)
               (:label prepare-query)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for racer-prepare-query))

(add-doc-entry (:title prepare-nrql-engine)
               (:label prepare-nrql-engine)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature
                (&optional
                 &key
                 mode
                 dont-show-variables
                 dont-show-lambdas
                 dont-show-head-projection-operators
                 abox-mirroring
                 query-optimization
                 optimizer-use-cardinality-heuristics
                 how-many-tuples
                 timeout
                 warnings
                 add-rule-consequences-automatically
                 dont-add-abox-duplicates
                 two-phase-query-processing-mode
                 phase-two-starts-warning-tokens
                 kb-has-changed-warning-tokens
                 told-information-querying
                 tuple-computation-mode
                 exclude-permutations
                 query-repository
                 report-inconsistent-queries
                 report-tautological-queries
                 query-realization
                 bindings
                 check-abox-consistency
                 use-individual-equivalence-classes
                 rewrite-to-dnf
                 tbox
                 substrate
                 abox
                 create-abox-if-not-found-p
                 package
                 type-of-substrate
                 prepare-now-p))
               (:returns)
               (:arguments
                (mode
                 :non-negative-integer
                 "A non-negative integer (possibly 0)")
                (dont-show-variables :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-lambdas
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-head-projection-operators
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (abox-mirroring
                 (:one-of nil t :smart :very-smart)
                 "One of the following symbols: @ic{nil, t, :smart, :very-smart}")
                (query-optimization
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (optimizer-use-cardinality-heuristics :boolean
                                                      "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (how-many-tuples
                 :non-negative-integer
                 "A non-negative integer (possibly 0)")
                (timeout :non-negative-integer
                         "A non-negative integer (possibly 0)")
                (warnings
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (add-rule-consequences-automatically :boolean
                                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-add-abox-duplicates
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (two-phase-query-processing-mode
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (phase-two-starts-warning-tokens
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (kb-has-changed-warning-tokens
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (told-information-querying
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (tuple-computation-mode
                 (:one-of
                  :tuple-at-a-time-lazy
                  :tuple-at-a-time-eager
                  :set-at-a-time)
                 "One of the following symbols: @ic{:tuple-at-a-time-lazy, :tuple-at-a-time-eager, :set-at-a-time}")
                (exclude-permutations :boolean
                                      "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (query-repository
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-inconsistent-queries
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-tautological-queries
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (query-realization
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (bindings (:list
                           (:list
                            :nrql-var
                            (:or :abox-individual :substrate-node)))
                          "A list of objects of the following type: A list of length 2 with objects of the following types: A nRQL query variable, e.g. @ic{?x} or @ic{?*x}, One of the following:  An ABox individual, e.g. @ic{betty}, A substrate node, a symbol, e.g. @ic{person1}")
                (check-abox-consistency :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-individual-equivalence-classes
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-to-dnf
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (substrate :substrate-name
                           "The name of a substrate, e.g. @ic{geo-example-rcc}")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (create-abox-if-not-found-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}")
                (prepare-now-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Prepares the internal index structures of the nRQL engine for query answering on the ABox @arg{abox}. Usually, there is no need to call this function. The function will be called automatically before the first query to @arg{abox} is executed. Thus, answering the first query to @arg{abox} might take considerably longer than subsequent queries to that ABox. For benchmarking purposes, the nRQL engine should thus be prepared using this function (or with @funref{prepare-racer-engine}) before the first query is executed")
               (:remarks nil)
               (:see-also reset-nrql-engine prepare-racer-engine)
               (:examples))

(add-doc-entry (:title prefer-defined-queries)
               (:label prefer-defined-queries)
               (:type :function)
               (:in-sections all-functions defined-queries abduction)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description
                "If a unary (binary) query is referenced in a body and there are corresponding concept (role) with the same name as the defined query, then the ambiguity is resolved in favor of the defined query")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-writeXMLOntologyFile|)
               (:label |OWLAPI-writeXMLOntologyFile|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature
                (ontology fn &key prefixes p4-mode comments))
               (:returns)
               (:arguments
                (ontology
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name")
                (fn
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}")
                (prefixes
                 (:list (:list :prefix-string :url))
                 "A list of objects of the following type: A list of length 2 with objects of the following types: A namespace prefix string, e.g. @ic{\"rdfs\"} or @ic{\"family\"}, A URL string, e.g. @ic{\"http://www.example-ontology.com\"}")
                (p4-mode
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (comments
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-writeOntologyFile|)
               (:label |OWLAPI-writeOntologyFile|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature
                (ontology fn &key prefixes p4-mode comments))
               (:returns)
               (:arguments
                (ontology
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name")
                (fn
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}")
                (prefixes
                 (:list (:list :prefix-string :url))
                 "A list of objects of the following type: A list of length 2 with objects of the following types: A namespace prefix string, e.g. @ic{\"rdfs\"} or @ic{\"family\"}, A URL string, e.g. @ic{\"http://www.example-ontology.com\"}")
                (p4-mode
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (comments
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-writeFunctionalOntologyFile|)
               (:label |OWLAPI-writeFunctionalOntologyFile|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature
                (ontology fn &key prefixes p4-mode comments))
               (:returns)
               (:arguments
                (ontology
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name")
                (fn
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}")
                (prefixes
                 (:list (:list :prefix-string :url))
                 "A list of objects of the following type: A list of length 2 with objects of the following types: A namespace prefix string, e.g. @ic{\"rdfs\"} or @ic{\"family\"}, A URL string, e.g. @ic{\"http://www.example-ontology.com\"}")
                (p4-mode
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (comments
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-usesSimplifiedProtocol|)
               (:label |OWLAPI-usesSimplifiedProtocol|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns)
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-usesIncrementalUpdates|)
               (:label |OWLAPI-usesIncrementalUpdates|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns)
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-unloadOntology|)
               (:label |OWLAPI-unloadOntology|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (ontology &optional reasoner))
               (:returns)
               (:arguments
                (ontology
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-unloadOntologies|)
               (:label |OWLAPI-unloadOntologies|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (ontologies &optional reasoner))
               (:returns)
               (:arguments
                (ontologies (:list :owlapi-ontology-name)
                            "A list of objects of the following type: An OWLAPI2 ontology name, a TBox / ABox name")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-unloadAxioms|)
               (:label |OWLAPI-unloadAxioms|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (ont axioms &optional reasoner))
               (:returns)
               (:arguments
                (ont
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name")
                (axioms (:list
                         (:or
                          :owlapi-axiom-id
                          :owlapi-axiom-constructor-call))
                        "A list of objects of the following type: One of the following:  An OWLAPI axiom ID, a non-negative integer, for identifying OWLAPI axioms, An OWLAPI axiom constructor call, e.g. @ic{(OWLAPI-getOWLClassAssertionAxiom betty woman)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-unloadAxiom|)
               (:label |OWLAPI-unloadAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (ont axiom &optional reasoner))
               (:returns)
               (:arguments
                (ont
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name")
                (axiom (:or
                        :owlapi-axiom-id
                        :owlapi-axiom-constructor-call)
                       "One of the following:  An OWLAPI axiom ID, a non-negative integer, for identifying OWLAPI axioms, An OWLAPI axiom constructor call, e.g. @ic{(OWLAPI-getOWLClassAssertionAxiom betty woman)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-storeImage|)
               (:label |OWLAPI-storeImage|)
               (:type :function)
               (:in-sections
                all-functions
                owlapi-management
                io
                persistence)
               (:protected t)
               (:signature (fn &optional reasoners))
               (:returns)
               (:arguments
                (fn
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}")
                (reasoners
                 (:list :owlapi-reasoner-name)
                 "A list of objects of the following type: An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-sleep|)
               (:label |OWLAPI-sleep|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (seconds &optional reasoner))
               (:returns)
               (:arguments
                (seconds
                 :non-negative-integer
                 "A non-negative integer (possibly 0)")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-setReturnPolicy|)
               (:label |OWLAPI-setReturnPolicy|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (type &optional reasoner))
               (:returns)
               (:arguments
                (type
                 (:one-of :answer-direct :get-last-answer :smart)
                 "One of the following symbols: @ic{:answer-direct, :get-last-answer, :smart}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-setProgressRange|)
               (:label |OWLAPI-setProgressRange|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature (steps from to &optional reasoner))
               (:returns)
               (:arguments
                (steps
                 :non-negative-integer
                 "A non-negative integer (possibly 0)")
                (from
                 :non-negative-integer
                 "A non-negative integer (possibly 0)")
                (to
                 :non-negative-integer
                 "A non-negative integer (possibly 0)")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-setProgress|)
               (:label |OWLAPI-setProgress|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature (n &optional reasoner))
               (:returns)
               (:arguments
                (n
                 :non-negative-integer
                 "A non-negative integer (possibly 0)")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-SetOntologyURI|)
               (:label |OWLAPI-SetOntologyURI|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (ont uri &optional reasoner))
               (:returns)
               (:arguments
                (ont
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name")
                (uri :uri
                     "A URI string, e.g. @ic{\"http://www.example-ontology.com#person\"}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-setCurrentReasoner|)
               (:label |OWLAPI-setCurrentReasoner|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (name &optional make-racer-kb-current-p))
               (:returns)
               (:arguments
                (name :owlapi-reasoner-name
                      "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}")
                (make-racer-kb-current-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-setAxiomCounter|)
               (:label |OWLAPI-setAxiomCounter|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (n &optional reasoner))
               (:returns)
               (:arguments
                (n
                 :non-negative-integer
                 "A non-negative integer (possibly 0)")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-setAutoDeclareDataProperties|)
               (:label |OWLAPI-setAutoDeclareDataProperties|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (val &optional reasoner))
               (:returns)
               (:arguments
                (val
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-saveOntology|)
               (:label |OWLAPI-saveOntology|)
               (:type :function)
               (:in-sections all-functions owlapi-management io)
               (:protected t)
               (:signature
                (ontology
                 fn
                 &key
                 reasoner
                 syntax
                 prefixes
                 p4-mode
                 comments))
               (:returns)
               (:arguments
                (ontology
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name")
                (fn
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}")
                (syntax
                 (:one-of
                  :owl-rdf
                  :rdf-xml
                  :owl
                  :owl-functional
                  :ofn
                  :owf
                  :funct
                  :functional
                  :owl-xml
                  :xml
                  :owx)
                 "One of the following symbols: @ic{:owl-rdf, :rdf-xml, :owl, :owl-functional, :ofn, :owf, :funct, :functional, :owl-xml, :xml, :owx}")
                (prefixes
                 (:list (:list :prefix-string :url))
                 "A list of objects of the following type: A list of length 2 with objects of the following types: A namespace prefix string, e.g. @ic{\"rdfs\"} or @ic{\"family\"}, A URL string, e.g. @ic{\"http://www.example-ontology.com\"}")
                (p4-mode
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (comments
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-restoreImage|)
               (:label |OWLAPI-restoreImage|)
               (:type :function)
               (:in-sections
                all-functions
                owlapi-management
                io
                persistence)
               (:protected t)
               (:signature (fn))
               (:returns)
               (:arguments
                (fn
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-resetAxiomCounter|)
               (:label |OWLAPI-resetAxiomCounter|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns)
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-removePrefix|)
               (:label |OWLAPI-removePrefix|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (prefix &optional reasoner))
               (:returns)
               (:arguments
                (prefix :prefix-string
                        "A namespace prefix string, e.g. @ic{\"rdfs\"} or @ic{\"family\"}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-RemoveAxioms|)
               (:label |OWLAPI-RemoveAxioms|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (ont axioms &optional reasoner))
               (:returns)
               (:arguments
                (ont
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name")
                (axioms (:list
                         (:or
                          :owlapi-axiom-id
                          :owlapi-axiom-constructor-call))
                        "A list of objects of the following type: One of the following:  An OWLAPI axiom ID, a non-negative integer, for identifying OWLAPI axioms, An OWLAPI axiom constructor call, e.g. @ic{(OWLAPI-getOWLClassAssertionAxiom betty woman)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-removeAxioms|)
               (:label |OWLAPI-removeAxioms|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-RemoveAxiom|)
               (:label |OWLAPI-RemoveAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (ont axiom &optional reasoner))
               (:returns)
               (:arguments
                (ont
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name")
                (axiom (:or
                        :owlapi-axiom-id
                        :owlapi-axiom-constructor-call)
                       "One of the following:  An OWLAPI axiom ID, a non-negative integer, for identifying OWLAPI axioms, An OWLAPI axiom constructor call, e.g. @ic{(OWLAPI-getOWLClassAssertionAxiom betty woman)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-removeAxiom|)
               (:label |OWLAPI-removeAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-reloadLoadedOntologies|)
               (:label |OWLAPI-reloadLoadedOntologies|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns)
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-registerReferencedEntities|)
               (:label |OWLAPI-registerReferencedEntities|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns)
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-registerObject|)
               (:label |OWLAPI-registerObject|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (obj))
               (:returns
                :non-negative-integer
                "A non-negative integer (possibly 0)")
               (:arguments
                (obj
                 :owlapi-expression
                 "An OWLAPI expression, e.g. an OWLAPI axiom constructor call, and OWLAPI entity description, etc."))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-registerLastAnswer|)
               (:label |OWLAPI-registerLastAnswer|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns)
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-registerDeclaredEntities|)
               (:label |OWLAPI-registerDeclaredEntities|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns)
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-realize|)
               (:label |OWLAPI-realize|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature
                (&optional reasoner check-abox-consistency-p))
               (:returns)
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}")
                (check-abox-consistency-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-readXMLOntologyFile|)
               (:label |OWLAPI-readXMLOntologyFile|)
               (:type :function)
               (:in-sections all-functions owlapi-management io)
               (:protected t)
               (:signature
                (fn
                 &key
                 strict-syntax-p
                 use-flipped-class-assertions-p
                 ignore-import
                 ignore-annotations
                 merge-imported-ontologies-p
                 maintain-owlapi-axioms
                 kb-name
                 reasoner-name
                 ontology-name
                 init
                 parser))
               (:returns)
               (:arguments
                (fn
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}")
                (strict-syntax-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-flipped-class-assertions-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (ignore-import
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (ignore-annotations
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (merge-imported-ontologies-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (maintain-owlapi-axioms
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (kb-name :tbox-name "A TBox name, e.g. @ic{family}")
                (reasoner-name
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}")
                (ontology-name
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name")
                (init
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-readXMLOntologyDocument|)
               (:label |OWLAPI-readXMLOntologyDocument|)
               (:type :function)
               (:in-sections all-functions owlapi-management io)
               (:protected t)
               (:signature
                (url
                 &key
                 strict-syntax-p
                 use-flipped-class-assertions-p
                 ignore-import
                 ignore-annotations
                 merge-imported-ontologies-p
                 maintain-owlapi-axioms
                 kb-name
                 reasoner-name
                 ontology-name
                 init
                 parser))
               (:returns)
               (:arguments
                (url
                 :url
                 "A URL string, e.g. @ic{\"http://www.example-ontology.com\"}")
                (strict-syntax-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-flipped-class-assertions-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (ignore-import
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (ignore-annotations
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (merge-imported-ontologies-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (maintain-owlapi-axioms
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (kb-name :tbox-name "A TBox name, e.g. @ic{family}")
                (reasoner-name
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}")
                (ontology-name
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name")
                (init
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-readOntology|)
               (:label |OWLAPI-readOntology|)
               (:type :function)
               (:in-sections all-functions owlapi-management io)
               (:protected t)
               (:signature
                (url
                 &key
                 syntax
                 strict-syntax-p
                 use-flipped-class-assertions-p
                 ignore-import
                 ignore-annotations
                 merge-imported-ontologies-p
                 maintain-owlapi-axioms
                 kb-name
                 reasoner-name
                 ontology-name
                 init
                 parser
                 verbose
                 init
                 kb-name
                 locator
                 recursive
                 ignore-import
                 ontology-name
                 merge-imported-ontologies-p
                 import-meta-ontologies
                 excluded-meta-ontologies
                 fire-rules
                 maintain-owlapi-axioms
                 ignore-annotations))
               (:returns)
               (:arguments
                (url
                 :url
                 "A URL string, e.g. @ic{\"http://www.example-ontology.com\"}")
                (syntax
                 (:one-of
                  :owl-rdf
                  :rdf-xml
                  :owl
                  :owl-functional
                  :ofn
                  :owf
                  :funct
                  :functional
                  :owl-xml
                  :xml
                  :owx)
                 "One of the following symbols: @ic{:owl-rdf, :rdf-xml, :owl, :owl-functional, :ofn, :owf, :funct, :functional, :owl-xml, :xml, :owx}")
                (strict-syntax-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-flipped-class-assertions-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (ignore-import
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (ignore-annotations
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (merge-imported-ontologies-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (maintain-owlapi-axioms
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (kb-name :tbox-name "A TBox name, e.g. @ic{family}")
                (reasoner-name
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}")
                (ontology-name
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name")
                (init
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (verbose
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (init
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (kb-name :tbox-name "A TBox name, e.g. @ic{family}")
                (locator
                 :url
                 "A URL string, e.g. @ic{\"http://www.example-ontology.com\"}")
                (ignore-import :boolean
                               "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (ontology-name :owlapi-ontology-name
                               "An OWLAPI2 ontology name, a TBox / ABox name")
                (merge-imported-ontologies-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (import-meta-ontologies :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (excluded-meta-ontologies (:list :uri)
                                          "A list of objects of the following type: A URI string, e.g. @ic{\"http://www.example-ontology.com#person\"}")
                (fire-rules
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (maintain-owlapi-axioms :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (ignore-annotations
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-readFunctionalOntologyFile|)
               (:label |OWLAPI-readFunctionalOntologyFile|)
               (:type :function)
               (:in-sections all-functions owlapi-management io)
               (:protected t)
               (:signature
                (fn
                 &key
                 strict-syntax-p
                 use-flipped-class-assertions-p
                 ignore-import
                 ignore-annotations
                 merge-imported-ontologies-p
                 maintain-owlapi-axioms
                 kb-name
                 reasoner-name
                 ontology-name
                 init
                 parser))
               (:returns)
               (:arguments
                (fn
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}")
                (strict-syntax-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-flipped-class-assertions-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (ignore-import
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (ignore-annotations
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (merge-imported-ontologies-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (maintain-owlapi-axioms
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (kb-name :tbox-name "A TBox name, e.g. @ic{family}")
                (reasoner-name
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}")
                (ontology-name
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name")
                (init
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-readFunctionalOntologyDocument|)
               (:label |OWLAPI-readFunctionalOntologyDocument|)
               (:type :function)
               (:in-sections all-functions owlapi-management io)
               (:protected t)
               (:signature
                (url
                 &key
                 strict-syntax-p
                 use-flipped-class-assertions-p
                 ignore-import
                 ignore-annotations
                 merge-imported-ontologies-p
                 maintain-owlapi-axioms
                 kb-name
                 reasoner-name
                 ontology-name
                 init
                 parser))
               (:returns)
               (:arguments
                (url
                 :url
                 "A URL string, e.g. @ic{\"http://www.example-ontology.com\"}")
                (strict-syntax-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-flipped-class-assertions-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (ignore-import
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (ignore-annotations
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (merge-imported-ontologies-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (maintain-owlapi-axioms
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (kb-name :tbox-name "A TBox name, e.g. @ic{family}")
                (reasoner-name
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}")
                (ontology-name
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name")
                (init
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-parseNative|)
               (:label |OWLAPI-parseNative|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (string &optional reasoner))
               (:returns
                :owlapi-axiom-id
                "An OWLAPI axiom ID, a non-negative integer, for identifying OWLAPI axioms")
               (:arguments
                (string :string "A string, e.g. @ic{\"hello\"}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-parse|)
               (:label |OWLAPI-parse|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (args &optional reasoner))
               (:returns
                :owlapi-axiom-id
                "An OWLAPI axiom ID, a non-negative integer, for identifying OWLAPI axioms")
               (:arguments
                (args
                 (:list :owlapi-axiom-constructor-call)
                 "A list of objects of the following type: An OWLAPI axiom constructor call, e.g. @ic{(OWLAPI-getOWLClassAssertionAxiom betty woman)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-nextAxiomUseID|)
               (:label |OWLAPI-nextAxiomUseID|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (id &optional reasoner))
               (:returns)
               (:arguments
                (id
                 :owlapi-axiom-id
                 "An OWLAPI axiom ID, a non-negative integer, for identifying OWLAPI axioms")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-newReasoner1|)
               (:label |OWLAPI-newReasoner1|)
               (:type :function)
               (:in-sections all-functions ignore)
               (:protected t)
               (:signature
                (&optional
                 owlapi-reasoner-name
                 make-racer-kb-current-p
                 init
                 owlapi-tbox
                 owlapi-abox))
               (:returns
                :owlapi-reasoner-name
                "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}")
               (:arguments
                (owlapi-reasoner-name :owlapi-reasoner-name
                                      "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}")
                (make-racer-kb-current-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (init
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (owlapi-tbox :tbox-name
                             "A TBox name, e.g. @ic{family}")
                (owlapi-abox :abox-name
                             "The name of an ABox, e.g. @ic{family-abox}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-newReasoner|)
               (:label |OWLAPI-newReasoner|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature
                (&optional
                 owlapi-reasoner-name
                 make-racer-kb-current-p
                 init
                 owlapi-tbox
                 owlapi-abox
                 own-racer-p))
               (:returns
                :owlapi-reasoner-name
                "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}")
               (:arguments
                (owlapi-reasoner-name :owlapi-reasoner-name
                                      "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}")
                (make-racer-kb-current-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (init
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (owlapi-tbox :tbox-name
                             "A TBox name, e.g. @ic{family}")
                (owlapi-abox :abox-name
                             "The name of an ABox, e.g. @ic{family-abox}")
                (own-racer-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-newOntology|)
               (:label |OWLAPI-newOntology|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (name &optional reasoner secondary-p))
               (:returns
                :owlapi-ontology-name
                "An OWLAPI2 ontology name, a TBox / ABox name")
               (:arguments
                (name :owlapi-reasoner-name
                      "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}")
                (secondary-p :boolean
                             "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-mergeOntologies|)
               (:label |OWLAPI-mergeOntologies|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (ont1 ont2 &optional reasoner))
               (:returns)
               (:arguments
                (ont1
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name")
                (ont2
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-manuallyApplyChanges|)
               (:label |OWLAPI-manuallyApplyChanges|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns)
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-loadOntology|)
               (:label |OWLAPI-loadOntology|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (ontology &optional reasoner))
               (:returns)
               (:arguments
                (ontology
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-loadOntologies|)
               (:label |OWLAPI-loadOntologies|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (ontologies &optional reasoner))
               (:returns)
               (:arguments
                (ontologies (:list :owlapi-ontology-name)
                            "A list of objects of the following type: An OWLAPI2 ontology name, a TBox / ABox name")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-loadAxioms|)
               (:label |OWLAPI-loadAxioms|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (ont axioms &optional reasoner))
               (:returns)
               (:arguments
                (ont
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name")
                (axioms (:list
                         (:or
                          :owlapi-axiom-id
                          :owlapi-axiom-constructor-call))
                        "A list of objects of the following type: One of the following:  An OWLAPI axiom ID, a non-negative integer, for identifying OWLAPI axioms, An OWLAPI axiom constructor call, e.g. @ic{(OWLAPI-getOWLClassAssertionAxiom betty woman)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-loadAxiom|)
               (:label |OWLAPI-loadAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (ont axiom &optional reasoner))
               (:returns)
               (:arguments
                (ont
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name")
                (axiom (:or
                        :owlapi-axiom-id
                        :owlapi-axiom-constructor-call)
                       "One of the following:  An OWLAPI axiom ID, a non-negative integer, for identifying OWLAPI axioms, An OWLAPI axiom constructor call, e.g. @ic{(OWLAPI-getOWLClassAssertionAxiom betty woman)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-keepAnnotations|)
               (:label |OWLAPI-keepAnnotations|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns)
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-isTransitive|)
               (:label |OWLAPI-isTransitive|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (property &optional reasoner))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (property
                 :object-property
                 "An OWL2 object property, e.g. @ic{family:hasChild}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-isSymmetric|)
               (:label |OWLAPI-isSymmetric|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (property &optional reasoner))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (property
                 :object-property
                 "An OWL2 object property, e.g. @ic{family:hasChild}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-isSubClassOf|)
               (:label |OWLAPI-isSubClassOf|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (clsc clsd &optional reasoner))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (clsc
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (clsd
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-isSatisfiable|)
               (:label |OWLAPI-isSatisfiable|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (description &optional reasoner))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (description :concept-expression
                             "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-isSameIndividual|)
               (:label |OWLAPI-isSameIndividual|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (i j &optional reasoner))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (i
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (j
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-isReflexive|)
               (:label |OWLAPI-isReflexive|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (property &optional reasoner))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (property
                 :object-property
                 "An OWL2 object property, e.g. @ic{family:hasChild}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-isRealised|)
               (:label |OWLAPI-isRealised|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-isIrreflexive|)
               (:label |OWLAPI-isIrreflexive|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (property &optional reasoner))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (property
                 :object-property
                 "An OWL2 object property, e.g. @ic{family:hasChild}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-isInverseFunctional|)
               (:label |OWLAPI-isInverseFunctional|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (property &optional reasoner))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (property
                 :object-property
                 "An OWL2 object property, e.g. @ic{family:hasChild}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-isFunctional|)
               (:label |OWLAPI-isFunctional|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (property &optional reasoner))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (property
                 :object-property
                 "An OWL2 object property, e.g. @ic{family:hasChild}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-isEquivalentClass|)
               (:label |OWLAPI-isEquivalentClass|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (clsc clsd &optional reasoner))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (clsc
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (clsd
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-isEntailed|)
               (:label |OWLAPI-isEntailed|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature
                (axiom-id-or-constructor &optional reasoner))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (axiom-id-or-constructor
                 (:or :owlapi-axiom-id :owlapi-axiom-constructor-call)
                 "One of the following:  An OWLAPI axiom ID, a non-negative integer, for identifying OWLAPI axioms, An OWLAPI axiom constructor call, e.g. @ic{(OWLAPI-getOWLClassAssertionAxiom betty woman)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-isDifferentIndividual|)
               (:label |OWLAPI-isDifferentIndividual|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (i j &optional reasoner))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (i
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (j
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-isDefinedObjectProperty|)
               (:label |OWLAPI-isDefinedObjectProperty|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (property &optional reasoner))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (property
                 :object-property
                 "An OWL2 object property, e.g. @ic{family:hasChild}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-isDefinedIndividual|)
               (:label |OWLAPI-isDefinedIndividual|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (ind &optional reasoner))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (ind
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-isDefinedDataProperty|)
               (:label |OWLAPI-isDefinedDataProperty|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (property &optional reasoner))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (property
                 :datatype-property
                 "An OWL2 datatype property, a special role, e.g. @ic{hasAge}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-isDefinedClass|)
               (:label |OWLAPI-isDefinedClass|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (cls &optional reasoner))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (cls
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-isConsistent|)
               (:label |OWLAPI-isConsistent|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (ontology &optional reasoner force-p))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (ontology
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}")
                (force-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-isClassified|)
               (:label |OWLAPI-isClassified|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-isClass|)
               (:label |OWLAPI-isClass|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (clsc &optional reasoner))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (clsc
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-isAsymmetric|)
               (:label |OWLAPI-isAsymmetric|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (property &optional reasoner))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (property
                 :object-property
                 "An OWL2 object property, e.g. @ic{family:hasChild}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-init|)
               (:label |OWLAPI-init|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-ignoreDeclarations|)
               (:label |OWLAPI-ignoreDeclarations|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns)
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-ignoreAnnotations|)
               (:label |OWLAPI-ignoreAnnotations|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns)
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-IDToAxiom|)
               (:label |OWLAPI-IDToAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (id &optional reasoner))
               (:returns
                :owlapi-axiom-constructor-call
                "An OWLAPI axiom constructor call, e.g. @ic{(OWLAPI-getOWLClassAssertionAxiom betty woman)}")
               (:arguments
                (id
                 :owlapi-axiom-id
                 "An OWLAPI axiom ID, a non-negative integer, for identifying OWLAPI axioms")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-hasType|)
               (:label |OWLAPI-hasType|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (ind type direct &optional reasoner))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (ind
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (type
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (direct
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-hasObjectPropertyRelationship|)
               (:label |OWLAPI-hasObjectPropertyRelationship|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature
                (subject property object &optional reasoner))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (subject :abox-individual
                         "An ABox individual, e.g. @ic{betty}")
                (property
                 :object-property
                 "An OWL2 object property, e.g. @ic{family:hasChild}")
                (object :abox-individual
                        "An ABox individual, e.g. @ic{betty}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-hasDataPropertyRelationship|)
               (:label |OWLAPI-hasDataPropertyRelationship|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature
                (subject property object &optional reasoner))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (subject :abox-individual
                         "An ABox individual, e.g. @ic{betty}")
                (property
                 :datatype-property
                 "An OWL2 datatype property, a special role, e.g. @ic{hasAge}")
                (object :owl-datavalue
                        "An OWL2 data value, e.g. 24 or @ic{\"betty\"}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getTypes|)
               (:label |OWLAPI-getTypes|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (individual direct &optional reasoner))
               (:returns
                (:list (:list :concept-name))
                "A list of objects of the following type: A list of objects of the following type: A concept name, e.g. @ic{woman}")
               (:arguments
                (individual
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (direct
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getSuperProperties|)
               (:label |OWLAPI-getSuperProperties|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (property &optional reasoner))
               (:returns
                (:list (:list :role))
                "A list of objects of the following type: A list of objects of the following type: A role, e.g. @ic{has-child}")
               (:arguments
                (property
                 :object-property
                 "An OWL2 object property, e.g. @ic{family:hasChild}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getSuperClasses|)
               (:label |OWLAPI-getSuperClasses|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (cls &optional reasoner))
               (:returns
                (:list (:list :concept-name))
                "A list of objects of the following type: A list of objects of the following type: A concept name, e.g. @ic{woman}")
               (:arguments
                (cls
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getSubProperties|)
               (:label |OWLAPI-getSubProperties|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (property &optional reasoner))
               (:returns
                (:list (:list :role))
                "A list of objects of the following type: A list of objects of the following type: A role, e.g. @ic{has-child}")
               (:arguments
                (property
                 :object-property
                 "An OWL2 object property, e.g. @ic{family:hasChild}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getSubClasses|)
               (:label |OWLAPI-getSubClasses|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (cls &optional reasoner))
               (:returns
                (:list (:list :concept-name))
                "A list of objects of the following type: A list of objects of the following type: A concept name, e.g. @ic{woman}")
               (:arguments
                (cls
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getSameIndividuals|)
               (:label |OWLAPI-getSameIndividuals|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (ind &optional reasoner))
               (:returns
                (:list :abox-individual)
                "A list of objects of the following type: An ABox individual, e.g. @ic{betty}")
               (:arguments
                (ind
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getRelatedValues|)
               (:label |OWLAPI-getRelatedValues|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (subject data-property &optional reasoner))
               (:returns
                (:list :owl-data-literal)
                "A list of objects of the following type: An OWL2 data literal / value, e.g. @ic{(d-literal \"Michael\" (d-base-type http://www.w3.org/2001/XMLSchema#string))}")
               (:arguments
                (subject :abox-individual
                         "An ABox individual, e.g. @ic{betty}")
                (data-property :datatype-property
                               "An OWL2 datatype property, a special role, e.g. @ic{hasAge}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getRelatedIndividuals|)
               (:label |OWLAPI-getRelatedIndividuals|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature
                (subject object-property &optional reasoner))
               (:returns
                (:list :abox-individual)
                "A list of objects of the following type: An ABox individual, e.g. @ic{betty}")
               (:arguments
                (subject :abox-individual
                         "An ABox individual, e.g. @ic{betty}")
                (object-property :object-property
                                 "An OWL2 object property, e.g. @ic{family:hasChild}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getReasoners|)
               (:label |OWLAPI-getReasoners|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature nil)
               (:returns
                (:list :owlapi-rasoner-name)
                "A list of objects of the following type: A symbol, the name of the OWLAPI reasoner, corresponding to a TBox / ABox name")
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getRanges|)
               (:label |OWLAPI-getRanges|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature
                (property &optional reasoner owlapi-hacking-mode))
               (:returns
                (:list (:list :concept-expression))
                "A list of objects of the following type: A list of objects of the following type: A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
               (:arguments
                (property
                 :object-property
                 "An OWL2 object property, e.g. @ic{family:hasChild}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}")
                (owlapi-hacking-mode
                 (:one-of 0 1 2)
                 "One of the following symbols: @ic{0, 1, 2}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getPrefixes|)
               (:label |OWLAPI-getPrefixes|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns
                (:list (:dotted-pair :prefix-string :url))
                "A list of objects of the following type: A dotted pair with objects of the following types: A URL string, e.g. @ic{\"http://www.example-ontology.com\"}")
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLTransitiveObjectPropertyAxiom|)
               (:label |OWLAPI-getOWLTransitiveObjectPropertyAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature (object-property &optional reasoner))
               (:returns)
               (:arguments
                (object-property :object-property
                                 "An OWL2 object property, e.g. @ic{family:hasChild}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLSymmetricObjectPropertyAxiom|)
               (:label |OWLAPI-getOWLSymmetricObjectPropertyAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature (object-property &optional reasoner))
               (:returns)
               (:arguments
                (object-property :object-property
                                 "An OWL2 object property, e.g. @ic{family:hasChild}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLSubClassAxiom|)
               (:label |OWLAPI-getOWLSubClassAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature (sub-class super-class &optional reasoner))
               (:returns)
               (:arguments
                (sub-class
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (super-class
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLSubAnnotationPropertyOfAxiom|)
               (:label |OWLAPI-getOWLSubAnnotationPropertyOfAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature
                (annotation-sub-property annotation-super-property
                                         &optional
                                         reasoner))
               (:returns)
               (:arguments
                (annotation-sub-property :role
                                         "A role, e.g. @ic{has-child}")
                (annotation-super-property :role
                                           "A role, e.g. @ic{has-child}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLSubAnnotationPropertyAxiom|)
               (:label |OWLAPI-getOWLSubAnnotationPropertyAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLSameIndividualsAxiom|)
               (:label |OWLAPI-getOWLSameIndividualsAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature (individuals &optional reasoner))
               (:returns)
               (:arguments
                (individuals (:list :abox-individual)
                             "A list of objects of the following type: An ABox individual, e.g. @ic{betty}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLReflexiveObjectPropertyAxiom|)
               (:label |OWLAPI-getOWLReflexiveObjectPropertyAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature (object-property &optional reasoner))
               (:returns)
               (:arguments
                (object-property :object-property
                                 "An OWL2 object property, e.g. @ic{family:hasChild}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLReallyImplicitDeclarationAxiom|)
               (:label |OWLAPI-getOWLReallyImplicitDeclarationAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature (entity &optional reasoner))
               (:returns)
               (:arguments
                (entity :entity
                        "An OWL2 entity, e.g. @ic{(Class Human)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLPrefixDeclarationAxiom|)
               (:label |OWLAPI-getOWLPrefixDeclarationAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature
                (namespace-prefix namespace &optional reasoner))
               (:returns)
               (:arguments
                (namespace-prefix
                 :prefix-string
                 "A namespace prefix string, e.g. @ic{\"rdfs\"} or @ic{\"family\"}")
                (namespace
                 :url
                 "A URL string, e.g. @ic{\"http://www.example-ontology.com\"}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLOntologyVersionDeclarationAxiom|)
               (:label |OWLAPI-getOWLOntologyVersionDeclarationAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature (ontology-version-uri &optional reasoner))
               (:returns)
               (:arguments
                (ontology-version-uri
                 :uri
                 "A URI string, e.g. @ic{\"http://www.example-ontology.com#person\"}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLOntologyAnnotationAxiom|)
               (:label |OWLAPI-getOWLOntologyAnnotationAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature (annotation &optional reasoner))
               (:returns)
               (:arguments
                (annotation :string "A string, e.g. @ic{\"hello\"}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLObjectSubPropertyAxiom|)
               (:label |OWLAPI-getOWLObjectSubPropertyAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature
                (object-sub-property
                 object-super-property
                 &optional
                 reasoner))
               (:returns)
               (:arguments
                (object-sub-property
                 :object-property
                 "An OWL2 object property, e.g. @ic{family:hasChild}")
                (object-super-property
                 :object-property
                 "An OWL2 object property, e.g. @ic{family:hasChild}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLObjectPropertyRangeAxiom|)
               (:label |OWLAPI-getOWLObjectPropertyRangeAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature
                (object-property object-property-range
                                 &optional
                                 reasoner))
               (:returns)
               (:arguments
                (object-property :object-property
                                 "An OWL2 object property, e.g. @ic{family:hasChild}")
                (object-property-range :concept-expression
                                       "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLObjectPropertyDomainAxiom|)
               (:label |OWLAPI-getOWLObjectPropertyDomainAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature
                (object-property object-property-domain
                                 &optional
                                 reasoner))
               (:returns)
               (:arguments
                (object-property :object-property
                                 "An OWL2 object property, e.g. @ic{family:hasChild}")
                (object-property-domain :concept-expression
                                        "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title
                |OWLAPI-getOWLObjectPropertyChainSubPropertyAxiom|)
               (:label
                |OWLAPI-getOWLObjectPropertyChainSubPropertyAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature
                (object-property-chain object-super-property
                                       &optional
                                       reasoner))
               (:returns)
               (:arguments
                (object-property-chain (:list :object-property)
                                       "A list of objects of the following type: An OWL2 object property, e.g. @ic{family:hasChild}")
                (object-super-property
                 :object-property
                 "An OWL2 object property, e.g. @ic{family:hasChild}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLObjectPropertyAssertionAxiom|)
               (:label |OWLAPI-getOWLObjectPropertyAssertionAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature
                (subject rel-object-property
                         object
                         &optional
                         reasoner))
               (:returns)
               (:arguments
                (subject :abox-individual
                         "An ABox individual, e.g. @ic{betty}")
                (rel-object-property :object-property
                                     "An OWL2 object property, e.g. @ic{family:hasChild}")
                (object :abox-individual
                        "An ABox individual, e.g. @ic{betty}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title
                |OWLAPI-getOWLNegativeObjectPropertyAssertionAxiom|)
               (:label
                |OWLAPI-getOWLNegativeObjectPropertyAssertionAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature
                (subject rel-object-property
                         object
                         &optional
                         reasoner))
               (:returns)
               (:arguments
                (subject :abox-individual
                         "An ABox individual, e.g. @ic{betty}")
                (rel-object-property :object-property
                                     "An OWL2 object property, e.g. @ic{family:hasChild}")
                (object :abox-individual
                        "An ABox individual, e.g. @ic{betty}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title
                |OWLAPI-getOWLNegativeDataPropertyAssertionAxiom|)
               (:label
                |OWLAPI-getOWLNegativeDataPropertyAssertionAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature
                (subject rel-data-property value &optional reasoner))
               (:returns)
               (:arguments
                (subject :abox-individual
                         "An ABox individual, e.g. @ic{betty}")
                (rel-data-property :datatype-property
                                   "An OWL2 datatype property, a special role, e.g. @ic{hasAge}")
                (value
                 :owl-data-literal
                 "An OWL2 data literal / value, e.g. @ic{(d-literal \"Michael\" (d-base-type http://www.w3.org/2001/XMLSchema#string))}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLIrreflexiveObjectPropertyAxiom|)
               (:label |OWLAPI-getOWLIrreflexiveObjectPropertyAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature (object-property &optional reasoner))
               (:returns)
               (:arguments
                (object-property :object-property
                                 "An OWL2 object property, e.g. @ic{family:hasChild}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLInverseObjectPropertiesAxiom|)
               (:label |OWLAPI-getOWLInverseObjectPropertiesAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature
                (first-object-property
                 second-object-property
                 &optional
                 reasoner))
               (:returns)
               (:arguments
                (first-object-property
                 :object-property
                 "An OWL2 object property, e.g. @ic{family:hasChild}")
                (second-object-property
                 :object-property
                 "An OWL2 object property, e.g. @ic{family:hasChild}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title
                |OWLAPI-getOWLInverseFunctionalObjectPropertyAxiom|)
               (:label
                |OWLAPI-getOWLInverseFunctionalObjectPropertyAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature (object-property &optional reasoner))
               (:returns)
               (:arguments
                (object-property :object-property
                                 "An OWL2 object property, e.g. @ic{family:hasChild}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLImportsDeclarationAxiom|)
               (:label |OWLAPI-getOWLImportsDeclarationAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature (ontology-import-uri &optional reasoner))
               (:returns)
               (:arguments
                (ontology-import-uri
                 :uri
                 "A URI string, e.g. @ic{\"http://www.example-ontology.com#person\"}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLImplicitDeclarationAxiom|)
               (:label |OWLAPI-getOWLImplicitDeclarationAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature (entity &optional reasoner))
               (:returns)
               (:arguments
                (entity :entity
                        "An OWL2 entity, e.g. @ic{(Class Human)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLHasKeyAxiom|)
               (:label |OWLAPI-getOWLHasKeyAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature
                (key-class key-object-properties
                           key-data-properties
                           &optional
                           reasoner))
               (:returns)
               (:arguments
                (key-class :concept-expression
                           "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (key-object-properties (:list :object-property)
                                       "A list of objects of the following type: An OWL2 object property, e.g. @ic{family:hasChild}")
                (key-data-properties (:list :datatype-property)
                                     "A list of objects of the following type: An OWL2 datatype property, a special role, e.g. @ic{hasAge}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLFunctionalObjectPropertyAxiom|)
               (:label |OWLAPI-getOWLFunctionalObjectPropertyAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature (object-property &optional reasoner))
               (:returns)
               (:arguments
                (object-property :object-property
                                 "An OWL2 object property, e.g. @ic{family:hasChild}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLFunctionalDataPropertyAxiom|)
               (:label |OWLAPI-getOWLFunctionalDataPropertyAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature (data-property &optional reasoner))
               (:returns)
               (:arguments
                (data-property :datatype-property
                               "An OWL2 datatype property, a special role, e.g. @ic{hasAge}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLEquivalentObjectPropertiesAxiom|)
               (:label |OWLAPI-getOWLEquivalentObjectPropertiesAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature (object-properties &optional reasoner))
               (:returns)
               (:arguments
                (object-properties (:list :object-property)
                                   "A list of objects of the following type: An OWL2 object property, e.g. @ic{family:hasChild}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLEquivalentDataPropertiesAxiom|)
               (:label |OWLAPI-getOWLEquivalentDataPropertiesAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature (data-properties &optional reasoner))
               (:returns)
               (:arguments
                (data-properties (:list :datatype-property)
                                 "A list of objects of the following type: An OWL2 datatype property, a special role, e.g. @ic{hasAge}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLEquivalentClassesAxiom|)
               (:label |OWLAPI-getOWLEquivalentClassesAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature (descriptions &optional reasoner))
               (:returns)
               (:arguments
                (descriptions (:list :concept-expression)
                              "A list of objects of the following type: A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLEntityAnnotationAxiom|)
               (:label |OWLAPI-getOWLEntityAnnotationAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature (entity annotation &optional reasoner))
               (:returns)
               (:arguments
                (entity :entity
                        "An OWL2 entity, e.g. @ic{(Class Human)}")
                (annotation :string "A string, e.g. @ic{\"hello\"}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLDisjointUnionAxiom|)
               (:label |OWLAPI-getOWLDisjointUnionAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature
                (description descriptions &optional reasoner))
               (:returns)
               (:arguments
                (description :concept-expression
                             "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (descriptions (:list :concept-expression)
                              "A list of objects of the following type: A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLDisjointObjectPropertiesAxiom|)
               (:label |OWLAPI-getOWLDisjointObjectPropertiesAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature (object-properties &optional reasoner))
               (:returns)
               (:arguments
                (object-properties (:list :object-property)
                                   "A list of objects of the following type: An OWL2 object property, e.g. @ic{family:hasChild}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLDisjointDataPropertiesAxiom|)
               (:label |OWLAPI-getOWLDisjointDataPropertiesAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature (data-properties &optional reasoner))
               (:returns)
               (:arguments
                (data-properties (:list :datatype-property)
                                 "A list of objects of the following type: An OWL2 datatype property, a special role, e.g. @ic{hasAge}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLDisjointClassesAxiom|)
               (:label |OWLAPI-getOWLDisjointClassesAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature (descriptions &optional reasoner))
               (:returns)
               (:arguments
                (descriptions (:list :concept-expression)
                              "A list of objects of the following type: A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLDifferentIndividualsAxiom|)
               (:label |OWLAPI-getOWLDifferentIndividualsAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature (individuals &optional reasoner))
               (:returns)
               (:arguments
                (individuals (:list :abox-individual)
                             "A list of objects of the following type: An ABox individual, e.g. @ic{betty}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLDeclarationAxiom|)
               (:label |OWLAPI-getOWLDeclarationAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature (entity &optional reasoner))
               (:returns)
               (:arguments
                (entity :entity
                        "An OWL2 entity, e.g. @ic{(Class Human)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLDatatypeDefinitionAxiom|)
               (:label |OWLAPI-getOWLDatatypeDefinitionAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature
                (datatype-name data-range &optional reasoner))
               (:returns)
               (:arguments
                (datatype-name :datatype-name
                               "An OWL2 user-defined datatype name, a symbol (e.g., @ic{legal-age})")
                (data-range :owl-datatype-expression
                            "An OWL2 datatype expression, e.g. @ic{(d-base-type |http://www.w3.org/2001/XMLSchema#integer|)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLDataSubPropertyAxiom|)
               (:label |OWLAPI-getOWLDataSubPropertyAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature
                (data-sub-property
                 data-super-property
                 &optional
                 reasoner))
               (:returns)
               (:arguments
                (data-sub-property
                 :datatype-property
                 "An OWL2 datatype property, a special role, e.g. @ic{hasAge}")
                (data-super-property
                 :datatype-property
                 "An OWL2 datatype property, a special role, e.g. @ic{hasAge}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLDataPropertyRangeAxiom|)
               (:label |OWLAPI-getOWLDataPropertyRangeAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature
                (data-property data-range &optional reasoner))
               (:returns)
               (:arguments
                (data-property :datatype-property
                               "An OWL2 datatype property, a special role, e.g. @ic{hasAge}")
                (data-range :owl-datatype-expression
                            "An OWL2 datatype expression, e.g. @ic{(d-base-type |http://www.w3.org/2001/XMLSchema#integer|)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLDataPropertyDomainAxiom|)
               (:label |OWLAPI-getOWLDataPropertyDomainAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature
                (data-property data-property-domain
                               &optional
                               reasoner))
               (:returns)
               (:arguments
                (data-property :datatype-property
                               "An OWL2 datatype property, a special role, e.g. @ic{hasAge}")
                (data-property-domain :concept-expression
                                      "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLDataPropertyAssertionAxiom|)
               (:label |OWLAPI-getOWLDataPropertyAssertionAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature
                (subject rel-data-property value &optional reasoner))
               (:returns)
               (:arguments
                (subject :abox-individual
                         "An ABox individual, e.g. @ic{betty}")
                (rel-data-property :datatype-property
                                   "An OWL2 datatype property, a special role, e.g. @ic{hasAge}")
                (value
                 :owl-data-literal
                 "An OWL2 data literal / value, e.g. @ic{(d-literal \"Michael\" (d-base-type http://www.w3.org/2001/XMLSchema#string))}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLClassAssertionAxiom|)
               (:label |OWLAPI-getOWLClassAssertionAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature (individual description &optional reasoner))
               (:returns)
               (:arguments
                (individual
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (description :concept-expression
                             "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLAxiomAnnotationAxiom|)
               (:label |OWLAPI-getOWLAxiomAnnotationAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature (axiom-id annotation &optional reasoner))
               (:returns)
               (:arguments
                (axiom-id :owlapi-axiom-id
                          "An OWLAPI axiom ID, a non-negative integer, for identifying OWLAPI axioms")
                (annotation :string "A string, e.g. @ic{\"hello\"}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLAsymmetricObjectPropertyAxiom|)
               (:label |OWLAPI-getOWLAsymmetricObjectPropertyAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature (object-property &optional reasoner))
               (:returns)
               (:arguments
                (object-property :object-property
                                 "An OWL2 object property, e.g. @ic{family:hasChild}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLAnnotationPropertyRangeAxiom|)
               (:label |OWLAPI-getOWLAnnotationPropertyRangeAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature
                (annotation-property annotation-property-range
                                     &optional
                                     reasoner))
               (:returns)
               (:arguments
                (annotation-property :annotation-property
                                     "An annotation property, a special role, e.g. @ic{rdfs:comment}")
                (annotation-property-range :concept-expression
                                           "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLAnnotationPropertyDomainAxiom|)
               (:label |OWLAPI-getOWLAnnotationPropertyDomainAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature
                (annotation-property annotation-property-domain
                                     &optional
                                     reasoner))
               (:returns)
               (:arguments
                (annotation-property :annotation-property
                                     "An annotation property, a special role, e.g. @ic{rdfs:comment}")
                (annotation-property-domain :concept-expression
                                            "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOWLAnnotationAssertionAxiom|)
               (:label |OWLAPI-getOWLAnnotationAssertionAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:signature
                (annotation-subject annotation-property
                                    annotation-value
                                    &optional
                                    reasoner))
               (:returns)
               (:arguments
                (annotation-subject :abox-individual
                                    "An ABox individual, e.g. @ic{betty}")
                (annotation-property :annotation-property
                                     "An annotation property, a special role, e.g. @ic{rdfs:comment}")
                (annotation-value :string
                                  "A string, e.g. @ic{\"hello\"}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getOntologies|)
               (:label |OWLAPI-getOntologies|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns
                (:list :owlapi-ontology-name)
                "A list of objects of the following type: An OWLAPI2 ontology name, a TBox / ABox name")
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getObjectPropertyValues|)
               (:label |OWLAPI-getObjectPropertyValues|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (ind property &optional reasoner synonyms))
               (:returns
                (:list (:list :abox-individual))
                "A list of objects of the following type: A list of objects of the following type: An ABox individual, e.g. @ic{betty}")
               (:arguments
                (ind
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (property
                 :object-property
                 "An OWL2 object property, e.g. @ic{family:hasChild}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}")
                (synonyms
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getObjectPropertyRelationships|)
               (:label |OWLAPI-getObjectPropertyRelationships|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (ind &optional reasoner))
               (:returns
                (:list
                 (:list :object-property (:list :abox-individual)))
                "A list of objects of the following type: A list of length 2 with objects of the following types: An OWL2 object property, e.g. @ic{family:hasChild}, A list of objects of the following type: An ABox individual, e.g. @ic{betty}")
               (:arguments
                (ind
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getLoadedOntologies|)
               (:label |OWLAPI-getLoadedOntologies|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns
                (:list :owlapi-ontology-name)
                "A list of objects of the following type: An OWLAPI2 ontology name, a TBox / ABox name")
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getInverseProperties|)
               (:label |OWLAPI-getInverseProperties|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (property &optional reasoner))
               (:returns
                (:list (:list :object-property))
                "A list of objects of the following type: A list of objects of the following type: An OWL2 object property, e.g. @ic{family:hasChild}")
               (:arguments
                (property
                 :object-property
                 "An OWL2 object property, e.g. @ic{family:hasChild}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getInstances|)
               (:label |OWLAPI-getInstances|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (class direct &optional reasoner synonyms))
               (:returns
                (:list (:list :abox-individual))
                "A list of objects of the following type: A list of objects of the following type: An ABox individual, e.g. @ic{betty}")
               (:arguments
                (class
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (direct
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}")
                (synonyms
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getIndividuals|)
               (:label |OWLAPI-getIndividuals|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (class direct &optional reasoner))
               (:returns
                (:list :abox-individual)
                "A list of objects of the following type: An ABox individual, e.g. @ic{betty}")
               (:arguments
                (class
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (direct
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getInconsistentClasses|)
               (:label |OWLAPI-getInconsistentClasses|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns
                (:list :concept-name)
                "A list of objects of the following type: A concept name, e.g. @ic{woman}")
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getEquivalentProperties|)
               (:label |OWLAPI-getEquivalentProperties|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (property &optional reasoner remove-self-p))
               (:returns
                (:list :role)
                "A list of objects of the following type: A role, e.g. @ic{has-child}")
               (:arguments
                (property
                 :object-property
                 "An OWL2 object property, e.g. @ic{family:hasChild}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}")
                (remove-self-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getEquivalentClasses|)
               (:label |OWLAPI-getEquivalentClasses|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (cls &optional reasoner))
               (:returns
                (:list :concept-name)
                "A list of objects of the following type: A concept name, e.g. @ic{woman}")
               (:arguments
                (cls
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getDomains|)
               (:label |OWLAPI-getDomains|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature
                (property &optional reasoner owlapi-hacking-mode))
               (:returns
                (:list (:list :concept-expression))
                "A list of objects of the following type: A list of objects of the following type: A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
               (:arguments
                (property
                 :object-property
                 "An OWL2 object property, e.g. @ic{family:hasChild}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}")
                (owlapi-hacking-mode
                 (:one-of 0 1 2)
                 "One of the following symbols: @ic{0, 1, 2}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getDisjointObjectProperties|)
               (:label |OWLAPI-getDisjointObjectProperties|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (property &optional reasoner))
               (:returns
                (:list :object-property)
                "A list of objects of the following type: An OWL2 object property, e.g. @ic{family:hasChild}")
               (:arguments
                (property
                 :object-property
                 "An OWL2 object property, e.g. @ic{family:hasChild}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getDisjointDataProperties|)
               (:label |OWLAPI-getDisjointDataProperties|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (property &optional reasoner))
               (:returns
                (:list :datatype-property)
                "A list of objects of the following type: An OWL2 datatype property, a special role, e.g. @ic{hasAge}")
               (:arguments
                (property
                 :datatype-property
                 "An OWL2 datatype property, a special role, e.g. @ic{hasAge}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getDisjointClasses|)
               (:label |OWLAPI-getDisjointClasses|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (concept &optional reasoner))
               (:returns
                (:list :concept-name)
                "A list of objects of the following type: A concept name, e.g. @ic{woman}")
               (:arguments
                (concept
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getDifferentIndividuals|)
               (:label |OWLAPI-getDifferentIndividuals|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (ind &optional reasoner synonyms))
               (:returns
                (:list :abox-individual)
                "A list of objects of the following type: An ABox individual, e.g. @ic{betty}")
               (:arguments
                (ind
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}")
                (synonyms
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getDescendantProperties|)
               (:label |OWLAPI-getDescendantProperties|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (property &optional reasoner remove-self-p))
               (:returns
                (:list (:list :role))
                "A list of objects of the following type: A list of objects of the following type: A role, e.g. @ic{has-child}")
               (:arguments
                (property
                 :object-property
                 "An OWL2 object property, e.g. @ic{family:hasChild}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}")
                (remove-self-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getDescendantClasses|)
               (:label |OWLAPI-getDescendantClasses|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (cls &optional reasoner))
               (:returns
                (:list (:list :concept-name))
                "A list of objects of the following type: A list of objects of the following type: A concept name, e.g. @ic{woman}")
               (:arguments
                (cls
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getDataPropertyValues|)
               (:label |OWLAPI-getDataPropertyValues|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (ind property &optional reasoner))
               (:returns
                (:list :owl-data-literal)
                "A list of objects of the following type: An OWL2 data literal / value, e.g. @ic{(d-literal \"Michael\" (d-base-type http://www.w3.org/2001/XMLSchema#string))}")
               (:arguments
                (ind
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (property
                 :datatype-property
                 "An OWL2 datatype property, a special role, e.g. @ic{hasAge}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getDataPropertyRelationships|)
               (:label |OWLAPI-getDataPropertyRelationships|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (ind &optional reasoner))
               (:returns
                (:list
                 (:list :datatype-property (:list :owl-data-literal)))
                "A list of objects of the following type: A list of length 2 with objects of the following types: An OWL2 datatype property, a special role, e.g. @ic{hasAge}, A list of objects of the following type: An OWL2 data literal / value, e.g. @ic{(d-literal \"Michael\" (d-base-type http://www.w3.org/2001/XMLSchema#string))}")
               (:arguments
                (ind
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getCurrentReasoner|)
               (:label |OWLAPI-getCurrentReasoner|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature nil)
               (:returns
                :owlapi-reasoner-name
                "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}")
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getChanges|)
               (:label |OWLAPI-getChanges|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns
                (:list :owlapi-change)
                "A list of objects of the following type: An OWLAPI change object, represented by its constructor call")
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getAxiomsPerOntology|)
               (:label |OWLAPI-getAxiomsPerOntology|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns
                (:list :owlapi-axiom-constructor-call)
                "A list of objects of the following type: An OWLAPI axiom constructor call, e.g. @ic{(OWLAPI-getOWLClassAssertionAxiom betty woman)}")
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getAxiomsOfTypeIn|)
               (:label |OWLAPI-getAxiomsOfTypeIn|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature
                (type-or-types
                 ont
                 &optional
                 reasoner
                 with-ids-p
                 status))
               (:returns
                (:list :owlapi-axiom-constructor-call)
                "A list of objects of the following type: An OWLAPI axiom constructor call, e.g. @ic{(OWLAPI-getOWLClassAssertionAxiom betty woman)}")
               (:arguments
                (type-or-types
                 :owlapi-axiom-type
                 "An OWLAPI axiom type, e.g. @ic{OWLClassAssertionAxiom, OWLSubClassAxiom,} etc.")
                (ont
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}")
                (with-ids-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (status
                 (:one-of :loaded :unloaded)
                 "One of the following symbols: @ic{:loaded, :unloaded}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getAxiomsOfType|)
               (:label |OWLAPI-getAxiomsOfType|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature
                (type-or-types
                 &optional
                 reasoner
                 with-ids-p
                 with-ont-names-p
                 status))
               (:returns
                (:list :owlapi-axiom-constructor-call)
                "A list of objects of the following type: An OWLAPI axiom constructor call, e.g. @ic{(OWLAPI-getOWLClassAssertionAxiom betty woman)}")
               (:arguments
                (type-or-types
                 :owlapi-axiom-type
                 "An OWLAPI axiom type, e.g. @ic{OWLClassAssertionAxiom, OWLSubClassAxiom,} etc.")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}")
                (with-ids-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (with-ont-names-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (status
                 (:one-of :loaded :unloaded)
                 "One of the following symbols: @ic{:loaded, :unloaded}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getAxiomsIn|)
               (:label |OWLAPI-getAxiomsIn|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (ont &optional reasoner with-ids-p status))
               (:returns
                (:list :owlapi-axiom-constructor-call)
                "A list of objects of the following type: An OWLAPI axiom constructor call, e.g. @ic{(OWLAPI-getOWLClassAssertionAxiom betty woman)}")
               (:arguments
                (ont
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}")
                (with-ids-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (status
                 (:one-of :loaded :unloaded)
                 "One of the following symbols: @ic{:loaded, :unloaded}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getAxioms|)
               (:label |OWLAPI-getAxioms|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature
                (&optional
                 reasoner
                 with-ids-p
                 with-ont-names-p
                 status))
               (:returns
                (:list :owlapi-axiom-constructor-call)
                "A list of objects of the following type: An OWLAPI axiom constructor call, e.g. @ic{(OWLAPI-getOWLClassAssertionAxiom betty woman)}")
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}")
                (with-ids-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (with-ont-names-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (status
                 (:one-of :loaded :unloaded)
                 "One of the following symbols: @ic{:loaded, :unloaded}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getAxiomCounter|)
               (:label |OWLAPI-getAxiomCounter|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns
                :non-negative-integer
                "A non-negative integer (possibly 0)")
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getAutoOntology|)
               (:label |OWLAPI-getAutoOntology|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns
                :owlapi-ontology-name
                "An OWLAPI2 ontology name, a TBox / ABox name")
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getAutoDeclareDataProperties|)
               (:label |OWLAPI-getAutoDeclareDataProperties|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getAnnotationAxiomsForAxiom|)
               (:label |OWLAPI-getAnnotationAxiomsForAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (axiom-id &optional reasoner))
               (:returns
                (:list :owlapi-axiom-constructor-call)
                "A list of objects of the following type: An OWLAPI axiom constructor call, e.g. @ic{(OWLAPI-getOWLClassAssertionAxiom betty woman)}")
               (:arguments
                (axiom-id :owlapi-axiom-id
                          "An OWLAPI axiom ID, a non-negative integer, for identifying OWLAPI axioms")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getAncestorProperties|)
               (:label |OWLAPI-getAncestorProperties|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (property &optional reasoner remove-self-p))
               (:returns
                (:list (:list :object-property))
                "A list of objects of the following type: A list of objects of the following type: An OWL2 object property, e.g. @ic{family:hasChild}")
               (:arguments
                (property
                 :object-property
                 "An OWL2 object property, e.g. @ic{family:hasChild}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}")
                (remove-self-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getAncestorClasses|)
               (:label |OWLAPI-getAncestorClasses|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature (cls &optional reasoner))
               (:returns
                (:list (:list :concept-name))
                "A list of objects of the following type: A list of objects of the following type: A concept name, e.g. @ic{woman}")
               (:arguments
                (cls
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-getAllOntologies|)
               (:label |OWLAPI-getAllOntologies|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature nil)
               (:returns
                (:list :owlapi-ontology-name)
                "A list of objects of the following type: An OWLAPI2 ontology name, a TBox / ABox name")
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-findObjectFromID|)
               (:label |OWLAPI-findObjectFromID|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (id))
               (:returns
                :owlapi-expression
                "An OWLAPI expression, e.g. an OWLAPI axiom constructor call, and OWLAPI entity description, etc.")
               (:arguments
                (id
                 :owlapi-other-id
                 "An OWLAPI ID, a symbol or non-negative integer"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-findIDFromObject|)
               (:label |OWLAPI-findIDFromObject|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (obj))
               (:returns
                :non-negative-integer
                "A non-negative integer (possibly 0)")
               (:arguments
                (obj
                 :owlapi-expression
                 "An OWLAPI expression, e.g. an OWLAPI axiom constructor call, and OWLAPI entity description, etc."))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-exportReasoner|)
               (:label |OWLAPI-exportReasoner|)
               (:type :function)
               (:in-sections all-functions owlapi-management io)
               (:protected t)
               (:signature (reasoner fn &key syntax quoted init))
               (:returns)
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}")
                (fn
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}")
                (init
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-exportOntology|)
               (:label |OWLAPI-exportOntology|)
               (:type :function)
               (:in-sections all-functions owlapi-management io)
               (:protected t)
               (:signature
                (ontology fn &key reasoner syntax quoted init header))
               (:returns)
               (:arguments
                (ontology
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name")
                (fn
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}")
                (init
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (header
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-enableTransientAxiomMode|)
               (:label |OWLAPI-enableTransientAxiomMode|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns)
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-enableSimplifiedProtocol|)
               (:label |OWLAPI-enableSimplifiedProtocol|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns)
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-enableMemorySavingMode|)
               (:label |OWLAPI-enableMemorySavingMode|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature
                (ontology &optional reasoner use-less-tbox-memory-p))
               (:returns)
               (:arguments
                (ontology
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}")
                (use-less-tbox-memory-p :unknown "What is this?!"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-enableLookupMode|)
               (:label |OWLAPI-enableLookupMode|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns)
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-enableIncrementalUpdates|)
               (:label |OWLAPI-enableIncrementalUpdates|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns)
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-dontRegisterReferencedEntities|)
               (:label |OWLAPI-dontRegisterReferencedEntities|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns)
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-dontRegisterDeclaredEntities|)
               (:label |OWLAPI-dontRegisterDeclaredEntities|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns)
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-disposeReasoner|)
               (:label |OWLAPI-disposeReasoner|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (name))
               (:returns)
               (:arguments
                (name :owlapi-reasoner-name
                      "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-disposeOntology|)
               (:label |OWLAPI-disposeOntology|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature
                (ont-name &optional reasoner dispose-axioms-p))
               (:returns)
               (:arguments
                (ont-name
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}")
                (dispose-axioms-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-disposeOntologies|)
               (:label |OWLAPI-disposeOntologies|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (ontologies &optional reasoner))
               (:returns)
               (:arguments
                (ontologies (:list :owlapi-ontology-name)
                            "A list of objects of the following type: An OWLAPI2 ontology name, a TBox / ABox name")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-disposeAxioms|)
               (:label |OWLAPI-disposeAxioms|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (ids-or-constructors &optional reasoner))
               (:returns)
               (:arguments
                (ids-or-constructors
                 (:list
                  (:or
                   :owlapi-axiom-id
                   :owlapi-axiom-constructor-call))
                 "A list of objects of the following type: One of the following:  An OWLAPI axiom ID, a non-negative integer, for identifying OWLAPI axioms, An OWLAPI axiom constructor call, e.g. @ic{(OWLAPI-getOWLClassAssertionAxiom betty woman)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-disposeAxiom|)
               (:label |OWLAPI-disposeAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (id-or-constructor &optional reasoner))
               (:returns)
               (:arguments
                (id-or-constructor
                 (:or :owlapi-axiom-id :owlapi-axiom-constructor-call)
                 "One of the following:  An OWLAPI axiom ID, a non-negative integer, for identifying OWLAPI axioms, An OWLAPI axiom constructor call, e.g. @ic{(OWLAPI-getOWLClassAssertionAxiom betty woman)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-dispose|)
               (:label |OWLAPI-dispose|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-disableTransientAxiomMode|)
               (:label |OWLAPI-disableTransientAxiomMode|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns)
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-disableSimplifiedProtocol|)
               (:label |OWLAPI-disableSimplifiedProtocol|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns)
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-disableMemorySavingMode|)
               (:label |OWLAPI-disableMemorySavingMode|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (reasoner))
               (:returns)
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-disableLookupMode|)
               (:label |OWLAPI-disableLookupMode|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns)
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-disableIncrementalUpdates|)
               (:label |OWLAPI-disableIncrementalUpdates|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns)
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-disableAutoMode|)
               (:label |OWLAPI-disableAutoMode|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns)
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-describeReasoners|)
               (:label |OWLAPI-describeReasoners|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature nil)
               (:returns
                (:list :owlapi-reasoner-description)
                "A list of objects of the following type: A description of the OWLAPI reasoner and its ontologies, a nested list expression")
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-describeReasoner|)
               (:label |OWLAPI-describeReasoner|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns
                :owlapi-reasoner-description
                "A description of the OWLAPI reasoner and its ontologies, a nested list expression")
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-describeOntology|)
               (:label |OWLAPI-describeOntology|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (ontology &optional reasoner))
               (:returns
                :owlapi-ontology-description
                "A description of the OWLAPI parameters of the OWLAPI ontology, a nested list expression")
               (:arguments
                (ontology
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-describeOntologies|)
               (:label |OWLAPI-describeOntologies|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns
                (:list :owlapi-ontology-description)
                "A list of objects of the following type: A description of the OWLAPI parameters of the OWLAPI ontology, a nested list expression")
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-contains|)
               (:label |OWLAPI-contains|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (ont-name &optional reasoner))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (ont-name
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-considerDeclarations|)
               (:label |OWLAPI-considerDeclarations|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns)
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-clearRegistry|)
               (:label |OWLAPI-clearRegistry|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns)
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-clearOntologies|)
               (:label |OWLAPI-clearOntologies|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns)
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-clearChanges|)
               (:label |OWLAPI-clearChanges|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns)
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-classify|)
               (:label |OWLAPI-classify|)
               (:type :function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:signature
                (&optional reasoner check-abox-consistency-p))
               (:returns)
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}")
                (check-abox-consistency-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-batchSynchronize|)
               (:label |OWLAPI-batchSynchronize|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (ontology &optional reasoner))
               (:returns)
               (:arguments
                (ontology
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-AxiomToID|)
               (:label |OWLAPI-AxiomToID|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature
                (axiom-constructor-call &optional reasoner ont))
               (:returns)
               (:arguments
                (axiom-constructor-call
                 :owlapi-axiom-constructor-call
                 "An OWLAPI axiom constructor call, e.g. @ic{(OWLAPI-getOWLClassAssertionAxiom betty woman)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}")
                (ont
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-AxiomLoaded?|)
               (:label |OWLAPI-AxiomLoaded?|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (id &optional reasoner))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (id
                 :owlapi-axiom-id
                 "An OWLAPI axiom ID, a non-negative integer, for identifying OWLAPI axioms")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-autoRemoveAxiomsFrom|)
               (:label |OWLAPI-autoRemoveAxiomsFrom|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (ontology &optional reasoner))
               (:returns)
               (:arguments
                (ontology
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-autoBatchRemoveAxiomsFrom|)
               (:label |OWLAPI-autoBatchRemoveAxiomsFrom|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (ontology &optional reasoner))
               (:returns)
               (:arguments
                (ontology
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-autoBatchAddAxiomsTo|)
               (:label |OWLAPI-autoBatchAddAxiomsTo|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (ontology &optional reasoner))
               (:returns)
               (:arguments
                (ontology
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-autoApplyChanges|)
               (:label |OWLAPI-autoApplyChanges|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns)
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-autoAddAxiomsTo|)
               (:label |OWLAPI-autoAddAxiomsTo|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (ontology &optional reasoner))
               (:returns)
               (:arguments
                (ontology
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-applyChanges|)
               (:label |OWLAPI-applyChanges|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns)
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-advanceProgress|)
               (:label |OWLAPI-advanceProgress|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns)
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-addPrefix|)
               (:label |OWLAPI-addPrefix|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (prefix namespace &optional reasoner))
               (:returns)
               (:arguments
                (prefix :prefix-string
                        "A namespace prefix string, e.g. @ic{\"rdfs\"} or @ic{\"family\"}")
                (namespace
                 :url
                 "A URL string, e.g. @ic{\"http://www.example-ontology.com\"}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-AddAxioms|)
               (:label |OWLAPI-AddAxioms|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (ont axioms &optional reasoner))
               (:returns)
               (:arguments
                (ont
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name")
                (axioms (:list
                         (:or
                          :owlapi-axiom-id
                          :owlapi-axiom-constructor-call))
                        "A list of objects of the following type: One of the following:  An OWLAPI axiom ID, a non-negative integer, for identifying OWLAPI axioms, An OWLAPI axiom constructor call, e.g. @ic{(OWLAPI-getOWLClassAssertionAxiom betty woman)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-addAxioms|)
               (:label |OWLAPI-addAxioms|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-AddAxiom|)
               (:label |OWLAPI-AddAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (ont axiom &optional reasoner))
               (:returns)
               (:arguments
                (ont
                 :owlapi-ontology-name
                 "An OWLAPI2 ontology name, a TBox / ABox name")
                (axiom (:or
                        :owlapi-axiom-id
                        :owlapi-axiom-constructor-call)
                       "One of the following:  An OWLAPI axiom ID, a non-negative integer, for identifying OWLAPI axioms, An OWLAPI axiom constructor call, e.g. @ic{(OWLAPI-getOWLClassAssertionAxiom betty woman)}")
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-addAxiom|)
               (:label |OWLAPI-addAxiom|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title |OWLAPI-abort|)
               (:label |OWLAPI-abort|)
               (:type :function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:signature (&optional reasoner))
               (:returns)
               (:arguments
                (reasoner
                 :owlapi-reasoner-name
                 "An OWLAPI reasoner name, a TBox / ABox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title optimizer-use-cardinality-heuristics)
               (:label optimizer-use-cardinality-heuristics)
               (:type :function)
               (:in-sections all-functions query-optimizer)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description
                "Advises the cost-based optimizer to use ABox statistics for enhanched query optimization")
               (:remarks nil)
               (:see-also
                enable-query-optimization
                describe-query-processing-mode)
               (:examples))

(add-doc-entry (:title optimizer-set-time-bound)
               (:label optimizer-set-time-bound)
               (:type :function)
               (:in-sections all-functions query-optimizer)
               (:protected t)
               (:signature (n))
               (:returns
                :non-negative-integer
                "A non-negative integer (possibly 0)")
               (:arguments
                (n :non-negative-integer
                   "A non-negative integer (possibly 0)"))
               (:description
                "Advises the cost-based optimizer to spend at most @arg{n} seconds for query optimization before reducing the number of plans to the half and retrying")
               (:remarks nil)
               (:see-also
                enable-query-optimization
                describe-query-processing-mode
                optimizer-set-no-of-plans-upper-bound
                optimizer-get-time-bound)
               (:examples))

(add-doc-entry (:title optimizer-set-no-of-plans-upper-bound)
               (:label optimizer-set-no-of-plans-upper-bound)
               (:type :function)
               (:in-sections all-functions query-optimizer)
               (:protected t)
               (:signature (n))
               (:returns
                :non-negative-integer
                "A non-negative integer (possibly 0)")
               (:arguments
                (n :non-negative-integer
                   "A non-negative integer (possibly 0)"))
               (:description
                "Advises the cost-based optimizer to generate a most @arg{n} query evaluation plans during query optimization")
               (:remarks nil)
               (:see-also
                enable-query-optimization
                describe-query-processing-mode
                optimizer-get-no-of-plans-upper-bound)
               (:examples))

(add-doc-entry (:title optimizer-get-time-bound)
               (:label optimizer-get-time-bound)
               (:type :function)
               (:in-sections all-functions query-optimizer)
               (:protected t)
               (:signature nil)
               (:returns
                :non-negative-integer
                "A non-negative integer (possibly 0)")
               (:arguments)
               (:description
                "Returns the current upper time bound the query optimizer spends for query optimization")
               (:remarks nil)
               (:see-also
                enable-query-optimization
                describe-query-processing-mode
                optimizer-set-time-bound)
               (:examples))

(add-doc-entry (:title optimizer-get-no-of-plans-upper-bound)
               (:label optimizer-get-no-of-plans-upper-bound)
               (:type :function)
               (:in-sections all-functions query-optimizer)
               (:protected t)
               (:signature nil)
               (:returns
                :non-negative-integer
                "A non-negative integer (possibly 0)")
               (:arguments)
               (:description
                "Returns the current upper bound on the number of query evaluation plans to consider during query optimization")
               (:remarks nil)
               (:see-also
                enable-query-optimization
                describe-query-processing-mode
                optimizer-set-no-of-plans-upper-bound)
               (:examples))

(add-doc-entry (:title optimizer-ensure-late-lambda-evaluation)
               (:label optimizer-ensure-late-lambda-evaluation)
               (:type :function)
               (:in-sections all-functions query-optimizer)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description
                "Advises the cost-based optimizer not to evaluate lambda query atoms before all conditions on the referenced query variables in the lambda have been checked")
               (:remarks nil)
               (:see-also
                enable-query-optimization
                describe-query-processing-mode)
               (:examples))

(add-doc-entry (:title optimizer-dont-use-cardinality-heuristics)
               (:label optimizer-dont-use-cardinality-heuristics)
               (:type :function)
               (:in-sections all-functions query-optimizer)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title optimizer-dont-ensure-late-lambda-evaluation)
               (:label optimizer-dont-ensure-late-lambda-evaluation)
               (:type :function)
               (:in-sections all-functions query-optimizer)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title node-label1)
               (:label node-label1)
               (:type :function)
               (:in-sections all-functions data-substrate)
               (:corresponding-macro node-label)
               (:protected t)
               (:signature (name &optional abox type-of-substrate))
               (:returns :substrate-description-label "unknown")
               (:arguments
                (name :substrate-node
                      "A substrate node, a symbol, e.g. @ic{person1}")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Like @funref{get-data-node-label}, but with the signature @arg{(name &optional abox type-of-substrate)}")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title node-description1)
               (:label node-description1)
               (:type :function)
               (:in-sections all-functions data-substrate)
               (:corresponding-macro node-description)
               (:protected t)
               (:signature (name &optional abox type-of-substrate))
               (:returns :substrate-description-label "unknown")
               (:arguments
                (name :substrate-node
                      "A substrate node, a symbol, e.g. @ic{person1}")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Like @funref{get-data-node-description}, but with the signature @arg{(name &optional abox type-of-substrate)}")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title move-rules)
               (:label move-rules)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (from-abox to-abox &key type-of-substrate))
               (:returns)
               (:arguments
                (from-abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (to-abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Moves the set of rules associated with substrate of type @arg{type-of-substrate} for ABox @arg{from-abox} into substrate for ABox @arg{to-abox}.")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title make-query-from-abox)
               (:label make-query-from-abox)
               (:type :function)
               (:in-sections all-functions abox-diff)
               (:protected t)
               (:signature
                (abox-or-name
                 &key
                 known-correspondences
                 common-concept-assertions
                 common-role-assertions
                 common-same-as-assertions
                 common-different-from-assertions
                 common-as-strict-atoms-p
                 injective-variables-p
                 forward-rule-consequence-p))
               (:returns
                :nrql-query-body
                "A nRQL query body (antecedence), e.g. @ic{(and (?x C) (?x ?y R) (?y D))}")
               (:arguments
                (abox-or-name
                 (:or :abox-name :abox)
                 "One of the following:  The name of an ABox, e.g. @ic{family-abox}, An anonymous ABox, a list of ABox assertions, e.g. @ic{((instance i C) (related i j R) (instance j D))}")
                (known-correspondences
                 (:list (:list :abox-individual :abox-individual))
                 "A list of objects of the following type: A list of length 2 with objects of the following types: An ABox individual, e.g. @ic{betty}, An ABox individual, e.g. @ic{betty}")
                (common-concept-assertions
                 (:list :concept-assertion)
                 "A list of objects of the following type: A concept assertion, e.g. @ic{(instance betty woman)}")
                (common-role-assertions
                 (:list :role-assertion)
                 "A list of objects of the following type: A role assertion, e.g. @ic{(related betty charles has-child)}")
                (common-same-as-assertions
                 (:list :same-as-assertion)
                 "A list of objects of the following type: A same-as equality assertion, e.g. @ic{(same-as santa-claus weihnachtsmann)}")
                (common-different-from-assertions
                 (:list :different-from-assertion)
                 "A list of objects of the following type: A different-from assertion, e.g. @ic{(different-from betty charles)}")
                (common-as-strict-atoms-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (injective-variables-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (forward-rule-consequence-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title make-plugin-from-fasl-file)
               (:label make-plugin-from-fasl-file)
               (:type :function)
               (:in-sections all-functions plugins)
               (:protected t)
               (:signature
                (fn2
                 &key
                 plugin-name
                 rand
                 type
                 extension
                 text-description
                 short-description
                 id
                 patch-name
                 for-version
                 for-build
                 platform))
               (:returns)
               (:arguments
                (fn2
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}")
                (plugin-name :string "A string, e.g. @ic{\"hello\"}")
                (extension
                 :file-extension
                 "A file extension string, e.g. @ic{\"txt\"} or @ic{\"owl\"}")
                (text-description :string
                                  "A string, e.g. @ic{\"hello\"}")
                (short-description :string
                                   "A string, e.g. @ic{\"hello\"}")
                (id :plugin-id "An ID string, e.g. @ic{\"1.0\"}")
                (patch-name :string "A string, e.g. @ic{\"hello\"}")
                (for-version
                 :version-string
                 "A version string as returned by @ic{(get-product-version)}, e.g. @ic{\"2.0\"}")
                (for-build
                 :build-string
                 "A build string as returned by @ic{(get-build-version)}, e.g. @ic{\"2012-07-08\"}, or the keyword @ic{:accept}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title make-forward-rule-from-aboxes)
               (:label make-forward-rule-from-aboxes)
               (:type :function)
               (:in-sections all-functions abox-diff)
               (:protected t)
               (:signature
                (precond-abox
                 postcond-abox
                 for-abox
                 &key
                 execute-p
                 parser-class
                 rewrite-defined-concepts-p
                 group-by-ops
                 bind-specials-p
                 original-query
                 rule-con-pattern
                 new-ind-ops
                 premise
                 generate-code-p
                 optimize-p
                 rewrite-semantically-p
                 rewrite-to-dnf-p
                 report-inconsistent-queries-p
                 report-tautological-queries-p
                 use-repository-p
                 put-into-repository-p
                 id
                 dont-check-id-p
                 parser
                 result-vois
                 substrate
                 abox
                 create-abox-if-not-found-p
                 package
                 type-of-substrate
                 prepare-now-p
                 known-correspondences
                 common-concept-assertions
                 common-role-assertions
                 common-same-as-assertions
                 common-different-from-assertions
                 common-as-strict-atoms-p
                 injective-variables-p
                 forward-rule-consequence-p))
               (:returns)
               (:arguments
                (precond-abox
                 :abox
                 "An anonymous ABox, a list of ABox assertions, e.g. @ic{((instance i C) (related i j R) (instance j D))}")
                (postcond-abox
                 :abox
                 "An anonymous ABox, a list of ABox assertions, e.g. @ic{((instance i C) (related i j R) (instance j D))}")
                (for-abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (execute-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-defined-concepts-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rule-con-pattern :nrql-rule-consequence
                                  "A nRQL rule consequence, a generalized ABox, e.g. @ic{((instance ?x mother) (?X ?y has-child))}")
                (premise (:list :abox-assertion)
                         "A list of objects of the following type: An ABox assertion, e.g. @ic{(instance betty woman)}")
                (optimize-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-semantically-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-to-dnf-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-inconsistent-queries-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-tautological-queries-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-repository-p :boolean
                                  "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (put-into-repository-p :boolean
                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (id :nrql-query-id
                    "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (dont-check-id-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (substrate :substrate-name
                           "The name of a substrate, e.g. @ic{geo-example-rcc}")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (create-abox-if-not-found-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}")
                (prepare-now-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (known-correspondences
                 (:list (:list :abox-individual :abox-individual))
                 "A list of objects of the following type: A list of length 2 with objects of the following types: An ABox individual, e.g. @ic{betty}, An ABox individual, e.g. @ic{betty}")
                (common-concept-assertions
                 (:list :concept-assertion)
                 "A list of objects of the following type: A concept assertion, e.g. @ic{(instance betty woman)}")
                (common-role-assertions
                 (:list :role-assertion)
                 "A list of objects of the following type: A role assertion, e.g. @ic{(related betty charles has-child)}")
                (common-same-as-assertions
                 (:list :same-as-assertion)
                 "A list of objects of the following type: A same-as equality assertion, e.g. @ic{(same-as santa-claus weihnachtsmann)}")
                (common-different-from-assertions
                 (:list :different-from-assertion)
                 "A list of objects of the following type: A different-from assertion, e.g. @ic{(different-from betty charles)}")
                (common-as-strict-atoms-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (injective-variables-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (forward-rule-consequence-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title make-backward-rule-from-aboxes)
               (:label make-backward-rule-from-aboxes)
               (:type :function)
               (:in-sections all-functions abox-diff)
               (:protected t)
               (:signature
                (precond-abox
                 postcond-abox
                 for-abox
                 &key
                 known-correspondences
                 common-concept-assertions
                 common-role-assertions
                 common-same-as-assertions
                 common-different-from-assertions
                 common-as-strict-atoms-p
                 injective-variables-p
                 forward-rule-consequence-p))
               (:returns)
               (:arguments
                (precond-abox
                 :abox
                 "An anonymous ABox, a list of ABox assertions, e.g. @ic{((instance i C) (related i j R) (instance j D))}")
                (postcond-abox
                 :abox
                 "An anonymous ABox, a list of ABox assertions, e.g. @ic{((instance i C) (related i j R) (instance j D))}")
                (for-abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (known-correspondences
                 (:list (:list :abox-individual :abox-individual))
                 "A list of objects of the following type: A list of length 2 with objects of the following types: An ABox individual, e.g. @ic{betty}, An ABox individual, e.g. @ic{betty}")
                (common-concept-assertions
                 (:list :concept-assertion)
                 "A list of objects of the following type: A concept assertion, e.g. @ic{(instance betty woman)}")
                (common-role-assertions
                 (:list :role-assertion)
                 "A list of objects of the following type: A role assertion, e.g. @ic{(related betty charles has-child)}")
                (common-same-as-assertions
                 (:list :same-as-assertion)
                 "A list of objects of the following type: A same-as equality assertion, e.g. @ic{(same-as santa-claus weihnachtsmann)}")
                (common-different-from-assertions
                 (:list :different-from-assertion)
                 "A list of objects of the following type: A different-from assertion, e.g. @ic{(different-from betty charles)}")
                (common-as-strict-atoms-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (injective-variables-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (forward-rule-consequence-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title make-abduction-rule-from-aboxes)
               (:label make-abduction-rule-from-aboxes)
               (:type :function)
               (:in-sections all-functions abox-diff)
               (:protected t)
               (:signature
                (precond-abox
                 postcond-abox
                 for-abox
                 &key
                 forward-rule-p
                 backward-rule-p
                 known-correspondences
                 common-concept-assertions
                 common-role-assertions
                 common-same-as-assertions
                 common-different-from-assertions
                 common-as-strict-atoms-p
                 injective-variables-p
                 forward-rule-consequence-p))
               (:returns)
               (:arguments
                (precond-abox
                 :abox
                 "An anonymous ABox, a list of ABox assertions, e.g. @ic{((instance i C) (related i j R) (instance j D))}")
                (postcond-abox
                 :abox
                 "An anonymous ABox, a list of ABox assertions, e.g. @ic{((instance i C) (related i j R) (instance j D))}")
                (for-abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (forward-rule-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (backward-rule-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (known-correspondences
                 (:list (:list :abox-individual :abox-individual))
                 "A list of objects of the following type: A list of length 2 with objects of the following types: An ABox individual, e.g. @ic{betty}, An ABox individual, e.g. @ic{betty}")
                (common-concept-assertions
                 (:list :concept-assertion)
                 "A list of objects of the following type: A concept assertion, e.g. @ic{(instance betty woman)}")
                (common-role-assertions
                 (:list :role-assertion)
                 "A list of objects of the following type: A role assertion, e.g. @ic{(related betty charles has-child)}")
                (common-same-as-assertions
                 (:list :same-as-assertion)
                 "A list of objects of the following type: A same-as equality assertion, e.g. @ic{(same-as santa-claus weihnachtsmann)}")
                (common-different-from-assertions
                 (:list :different-from-assertion)
                 "A list of objects of the following type: A different-from assertion, e.g. @ic{(different-from betty charles)}")
                (common-as-strict-atoms-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (injective-variables-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (forward-rule-consequence-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title load-racer-plugins)
               (:label load-racer-plugins)
               (:type :function)
               (:in-sections all-functions plugins)
               (:protected t)
               (:signature (directory))
               (:returns)
               (:arguments
                (directory :directory
                           "A directory stringm e.g. @ic{\"/home/mi.wessel/test/\"}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title load-racer-plugin)
               (:label load-racer-plugin)
               (:type :function)
               (:in-sections all-functions plugins)
               (:protected t)
               (:signature (fn))
               (:returns)
               (:arguments
                (fn
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title load-racer-patches)
               (:label load-racer-patches)
               (:type :function)
               (:in-sections all-functions patches)
               (:protected t)
               (:signature (directory))
               (:returns)
               (:arguments
                (directory :directory
                           "A directory stringm e.g. @ic{\"/home/mi.wessel/test/\"}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title load-racer-patch)
               (:label load-racer-patch)
               (:type :function)
               (:in-sections all-functions patches)
               (:protected t)
               (:signature (fn))
               (:returns)
               (:arguments
                (fn
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title keep-defined-query-atoms)
               (:label keep-defined-query-atoms)
               (:type :function)
               (:in-sections all-functions defined-queries abduction)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title installed-plugins)
               (:label installed-plugins)
               (:type :function)
               (:in-sections all-functions plugins)
               (:protected t)
               (:signature nil)
               (:returns
                (:list :patch-description)
                "A list of objects of the following type: A Racer plugin description")
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title installed-patches)
               (:label installed-patches)
               (:type :function)
               (:in-sections all-functions patches)
               (:protected t)
               (:signature nil)
               (:returns
                (:list :patch-description)
                "A list of objects of the following type: A Racer plugin description")
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title include-permutations)
               (:label include-permutations)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title inaccurate-rules)
               (:label inaccurate-rules)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :nrql-rule-id)
                "A list of objects of the following type: A nRQL rule ID, e.g. @ic{:rule-1}")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of inaccurate-queries)
               (:examples))

(add-doc-entry (:title inaccurate-queries)
               (:label inaccurate-queries)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :nrql-query-id)
                "A list of objects of the following type: A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Returns a list of (the IDs of) the queries that do not satisfy @funref{query-accurate-p}. Note that this is a subset of the set of processed queries (see @funref{processed-queries}")
               (:remarks nil)
               (:see-also)
               (:query-equivalent-of inaccurate-rules)
               (:examples))

(add-doc-entry (:title in-unsafe-mode?)
               (:label in-unsafe-mode?)
               (:type :function)
               (:in-sections all-functions general io)
               (:protected t)
               (:signature nil)
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments)
               (:description
                "Check whether Racer is running in unsafe mode")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title get-substrate-type)
               (:label get-substrate-type)
               (:type :function)
               (:in-sections all-functions substrate-management)
               (:protected t)
               (:signature nil)
               (:returns
                (:one-of
                 data-substrate
                 mirror-data-substrate
                 rcc-substrate
                 rcc-mirror-substrate)
                "One of the following symbols: @ic{data-substrate, mirror-data-substrate, rcc-substrate, rcc-mirror-substrate}")
               (:arguments)
               (:description
                "Returns the type (class) of the substrates that nRQL creates internally on request")
               (:remarks nil)
               (:see-also
                set-substrate-type
                describe-query-processing-mode)
               (:examples))

(add-doc-entry (:title get-substrate-nodes)
               (:label get-substrate-nodes)
               (:type :function)
               (:in-sections all-functions data-substrate)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :substrate-node)
                "A list of objects of the following type: A substrate node, a symbol, e.g. @ic{person1}")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Returns all nodes in the substrate of type @arg{type-of-substrate} for ABox @arg{abox}")
               (:remarks nil)
               (:see-also get-substrate-edges)
               (:examples))

(add-doc-entry (:title get-substrate-edges)
               (:label get-substrate-edges)
               (:type :function)
               (:in-sections all-functions data-substrate)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list (:list :substrate-node :substrate-node))
                "A list of objects of the following type: A list of length 2 with objects of the following types: A substrate node, a symbol, e.g. @ic{person1}, A substrate node, a symbol, e.g. @ic{person1}")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Like @funref{get-substrate-nodes}, but for the edges")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title get-role-hierarchy)
               (:label get-role-hierarchy)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (&optional tbox &key for-roles))
               (:returns
                :role-hiearchy
                "A nested list representing the role hierarchy, e.g.
@pc{(((HAS-MOTHER) ((HAS-PARENT)) ((*BOTTOM-OBJECT-ROLE*))) ((HAS-PARENT) ((*TOP-OBJECT-ROLE*)) ((HAS-FATHER) (HAS-MOTHER))) ((HAS-FATHER) ((HAS-PARENT)) ((*BOTTOM-OBJECT-ROLE*))) ((*TOP-OBJECT-ROLE*) ((*TOP-OBJECT-ROLE*)) ((HAS-PARENT))) ((*BOTTOM-OBJECT-ROLE*) ((HAS-MOTHER) (HAS-FATHER)) ((*BOTTOM-OBJECT-ROLE*))) ((*TOP-DATATYPE-ROLE*) ((*TOP-OBJECT-ROLE*)) ((*BOTTOM-DATATYPE-ROLE*) (RACER-INTERNAL%HAS-INTEGER-VALUE) (RACER-INTERNAL%HAS-REAL-VALUE) (RACER-INTERNAL%HAS-STRING-VALUE) (RACER-INTERNAL%HAS-BOOLEAN-VALUE))) ((*BOTTOM-DATATYPE-ROLE*) ((*TOP-DATATYPE-ROLE*) (RACER-INTERNAL%HAS-INTEGER-VALUE) (RACER-INTERNAL%HAS-REAL-VALUE) (RACER-INTERNAL%HAS-STRING-VALUE) (RACER-INTERNAL%HAS-BOOLEAN-VALUE)) ((*BOTTOM-OBJECT-ROLE*))))}")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (for-roles
                 (:list :role)
                 "A list of objects of the following type: A role, e.g. @ic{has-child}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title get-proxy-server)
               (:label get-proxy-server)
               (:type :function)
               (:in-sections all-functions owl-interface)
               (:protected t)
               (:signature nil)
               (:returns
                :ip-address
                "A TCP-IP IP address as a string, e.g. @ic{\"192.168.0.1\"}")
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title get-process-pool-size)
               (:label get-process-pool-size)
               (:type :function)
               (:in-sections all-functions query-optimizer)
               (:protected t)
               (:signature nil)
               (:returns
                :non-negative-integer
                "A non-negative integer (possibly 0)")
               (:arguments)
               (:description
                "Returns the current number of processes in the process pool (the process pool size)")
               (:remarks nil)
               (:see-also
                set-initial-size-of-process-pool
                get-initial-size-of-process-pool
                set-maximum-size-of-process-pool
                get-maximum-size-of-process-pool
                set-initial-size-of-process-pool
                get-initial-size-of-process-pool
                describe-query-processing-mode)
               (:examples))

(add-doc-entry (:title get-prefixes)
               (:label get-prefixes)
               (:type :function)
               (:in-sections all-functions owl-interface)
               (:protected t)
               (:signature (&optional tbox ask-owlapi-p))
               (:returns
                (:list (:list :prefix-string :url))
                "A list of objects of the following type: A list of length 2 with objects of the following types: A namespace prefix string, e.g. @ic{\"rdfs\"} or @ic{\"family\"}, A URL string, e.g. @ic{\"http://www.example-ontology.com\"}")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (ask-owlapi-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title get-nrql-version)
               (:label get-nrql-version)
               (:type :function)
               (:in-sections all-functions general nrql-abox)
               (:protected t)
               (:signature nil)
               (:returns :string "A string, e.g. @ic{\"hello\"}")
               (:arguments)
               (:description "Returns the nRQL version number")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title get-new-ind-prefix)
               (:label get-new-ind-prefix)
               (:type :function)
               (:in-sections all-functions abduction)
               (:protected t)
               (:signature nil)
               (:returns :string "A string, e.g. @ic{\"hello\"}")
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title get-new-ind-counter)
               (:label get-new-ind-counter)
               (:type :function)
               (:in-sections all-functions abduction)
               (:protected t)
               (:signature nil)
               (:returns
                :non-negative-integer
                "A non-negative integer (possibly 0)")
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title get-minimum)
               (:label get-minimum)
               (:type :function)
               (:in-sections all-functions abduction)
               (:protected t)
               (:signature (aboxes &key key))
               (:returns
                (:list :abox)
                "A list of objects of the following type: An anonymous ABox, a list of ABox assertions, e.g. @ic{((instance i C) (related i j R) (instance j D))}")
               (:arguments
                (aboxes
                 (:list :abox)
                 "A list of objects of the following type: An anonymous ABox, a list of ABox assertions, e.g. @ic{((instance i C) (related i j R) (instance j D))}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title get-maximum-size-of-process-pool)
               (:label get-maximum-size-of-process-pool)
               (:type :function)
               (:in-sections all-functions query-optimizer)
               (:protected t)
               (:signature nil)
               (:returns
                :non-negative-integer
                "A non-negative integer (possibly 0)")
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title get-maximum)
               (:label get-maximum)
               (:type :function)
               (:in-sections all-functions abduction)
               (:protected t)
               (:signature (aboxes &key key))
               (:returns
                (:list :abox)
                "A list of objects of the following type: An anonymous ABox, a list of ABox assertions, e.g. @ic{((instance i C) (related i j R) (instance j D))}")
               (:arguments
                (aboxes
                 (:list :abox)
                 "A list of objects of the following type: An anonymous ABox, a list of ABox assertions, e.g. @ic{((instance i C) (related i j R) (instance j D))}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title get-max-no-of-tuples-bound)
               (:label get-max-no-of-tuples-bound)
               (:type :function)
               (:in-sections all-functions query-optimizer)
               (:protected t)
               (:signature nil)
               (:returns
                (:or nil :non-negative-integer)
                "One of the following:  The symbol nil., A non-negative integer (possibly 0)")
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title get-initial-size-of-process-pool)
               (:label get-initial-size-of-process-pool)
               (:type :function)
               (:in-sections all-functions query-optimizer)
               (:protected t)
               (:signature nil)
               (:returns
                :non-negative-integer
                "A non-negative integer (possibly 0)")
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title get-individual-successors)
               (:label get-individual-successors)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:protected t)
               (:signature
                (ind
                 &key
                 no-inverses-p
                 only-inverses-p
                 no-transitives-p
                 no-top-role-p
                 negated-p
                 roles
                 only-one-p
                 only-if-p
                 abox
                 remove-synonyms-p
                 show-synonyms-p))
               (:returns
                (:list (:list :role (:list :abox-individual)))
                "A list of objects of the following type: A list of length 2 with objects of the following types: A role, e.g. @ic{has-child}, A list of objects of the following type: An ABox individual, e.g. @ic{betty}")
               (:arguments
                (ind
                 :substrate-node
                 "A substrate node, a symbol, e.g. @ic{person1}")
                (no-inverses-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (only-inverses-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (no-transitives-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (no-top-role-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (negated-p :boolean
                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (roles (:list :role)
                       "A list of objects of the following type: A role, e.g. @ic{has-child}")
                (only-one-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (remove-synonyms-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (show-synonyms-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title get-individual-datatype-fillers)
               (:label get-individual-datatype-fillers)
               (:type :function)
               (:in-sections all-functions abox-owl-ask)
               (:protected t)
               (:signature
                (individual-name &optional abox with-types-p))
               (:returns
                (:list
                 (:list :datatype-property (:list :owl-data-literal)))
                "A list of objects of the following type: A list of length 2 with objects of the following types: An OWL2 datatype property, a special role, e.g. @ic{hasAge}, A list of objects of the following type: An OWL2 data literal / value, e.g. @ic{(d-literal \"Michael\" (d-base-type http://www.w3.org/2001/XMLSchema#string))}")
               (:arguments
                (individual-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (with-types-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title get-individual-annotation-fillers)
               (:label get-individual-annotation-fillers)
               (:type :function)
               (:in-sections all-functions abox-owl-ask)
               (:protected t)
               (:signature (individual-name &optional abox))
               (:returns
                (:list
                 (:list :annotation-property (:list :abox-individual)))
                "A list of objects of the following type: A list of length 2 with objects of the following types: An annotation property, a special role, e.g. @ic{rdfs:comment}, A list of objects of the following type: An ABox individual, e.g. @ic{betty}")
               (:arguments
                (individual-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title get-individual-annotation-datatype-fillers)
               (:label get-individual-annotation-datatype-fillers)
               (:type :function)
               (:in-sections all-functions abox-owl-ask)
               (:protected t)
               (:signature
                (individual-name &optional abox with-types-p))
               (:returns
                (:list
                 (:list
                  :annotation-datatype-property
                  (:list :owl-data-literal)))
                "A list of objects of the following type: A list of length 2 with objects of the following types: What is this?!, A list of objects of the following type: An OWL2 data literal / value, e.g. @ic{(d-literal \"Michael\" (d-base-type http://www.w3.org/2001/XMLSchema#string))}")
               (:arguments
                (individual-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (with-types-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title get-edge-label-for-non-existent-edges)
               (:label get-edge-label-for-non-existent-edges)
               (:type :function)
               (:in-sections all-functions rcc-substrate)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns :substrate-description-label "unknown")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title get-data-node-label)
               (:label get-data-node-label)
               (:type :function)
               (:in-sections all-functions data-substrate)
               (:protected t)
               (:signature (name &key abox type-of-substrate))
               (:returns :substrate-description-label "unknown")
               (:arguments
                (name :substrate-node
                      "A substrate node, a symbol, e.g. @ic{person1}")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Returns the node label of the node @arg{name} from the data substrate of type @arg{type-of-substrate} for the ABox @arg{abox}")
               (:remarks nil)
               (:see-also get-data-node-description)
               (:examples))

(add-doc-entry (:title get-data-node-description)
               (:label get-data-node-description)
               (:type :function)
               (:in-sections all-functions data-substrate)
               (:protected t)
               (:signature (name &key abox type-of-substrate))
               (:returns :substrate-description-label "unknown")
               (:arguments
                (name :substrate-node
                      "A substrate node, a symbol, e.g. @ic{person1}")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Returns a description of the node @arg{name} from the data substrate of type @arg{type-of-substrate} for the ABox @arg{abox}")
               (:remarks nil)
               (:see-also get-data-node-label)
               (:examples))

(add-doc-entry (:title get-data-edge-label)
               (:label get-data-edge-label)
               (:type :function)
               (:in-sections all-functions data-substrate)
               (:protected t)
               (:signature (from to &key abox type-of-substrate))
               (:returns :substrate-description-label "unknown")
               (:arguments
                (from
                 :substrate-node
                 "A substrate node, a symbol, e.g. @ic{person1}")
                (to
                 :substrate-node
                 "A substrate node, a symbol, e.g. @ic{person1}")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Returns a description of the edge between the nodes @arg{from} and @arg{to} from the data substrate of type @arg{type-of-substrate} for the ABox @arg{abox}")
               (:remarks nil)
               (:see-also get-data-edge-description)
               (:examples))

(add-doc-entry (:title get-data-edge-description)
               (:label get-data-edge-description)
               (:type :function)
               (:in-sections all-functions data-substrate)
               (:protected t)
               (:signature (from to &key abox type-of-substrate))
               (:returns
                :substrate-edge-description
                "A substrate edge description, e.g. @ic{(((:FROM-NODE MICHAEL) (:TO-NODE RUDOLF) (:EDGE-LABEL ((HAS-FATHER)))))}")
               (:arguments
                (from
                 :substrate-node
                 "A substrate node, a symbol, e.g. @ic{person1}")
                (to
                 :substrate-node
                 "A substrate node, a symbol, e.g. @ic{person1}")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Returns the edge label of the edge between the nodes @arg{from} and @arg{to} from the data substrate of type @arg{type-of-substrate} for the ABox @arg{abox}")
               (:remarks nil)
               (:see-also get-data-edge-label)
               (:examples))

(add-doc-entry (:title get-concept-properties)
               (:label get-concept-properties)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature
                (concept &optional tbox &key for-roles qualifications))
               (:returns
                (:list (:list :role (:list :concept-name)))
                "A list of objects of the following type: A list of length 2 with objects of the following types: A role, e.g. @ic{has-child}, A list of objects of the following type: A concept name, e.g. @ic{woman}")
               (:arguments
                (concept
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (for-roles
                 (:list :role)
                 "A list of objects of the following type: A role, e.g. @ic{has-child}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title get-answer-size)
               (:label get-answer-size)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature
                (query &optional &key dont-show-variables execute-p))
               (:returns
                :non-negative-integer
                "A non-negative integer (possibly 0)")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (dont-show-variables :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (execute-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Like @funref{get-answer}, but only returns the number of result tuples (resp. number of sets of rule conclusions)")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title get-all-values)
               (:label get-all-values)
               (:type :function)
               (:in-sections all-functions minilisp)
               (:protected t)
               (:signature nil)
               (:returns
                (:list :minilisp-defcon-expression)
                "A list of objects of the following type: A MiniLisp parameter definition expression, e.g. @ic{(DEFCON SENSE-OF-LIFE 42)}")
               (:arguments)
               (:description
                "Returns all MiniLisp parameters and constants previously defined with @funref{defcon} or @funref{defpar}")
               (:remarks nil)
               (:see-also)
               (:examples ("Example one" (get-all-values))))

(add-doc-entry (:title get-all-server-values)
               (:label get-all-server-values)
               (:type :function)
               (:in-sections all-functions minilisp)
               (:protected t)
               (:signature nil)
               (:returns
                (:list :minilisp-defcon-expression)
                "A list of objects of the following type: A MiniLisp parameter definition expression, e.g. @ic{(DEFCON SENSE-OF-LIFE 42)}")
               (:arguments)
               (:description
                "Returns all MiniLisp server parameters and constants")
               (:remarks nil)
               (:see-also)
               (:examples ("Example one" (get-all-server-values))))

(add-doc-entry (:title get-all-server-functions)
               (:label get-all-server-functions)
               (:type :function)
               (:in-sections all-functions minilisp)
               (:protected t)
               (:signature nil)
               (:returns
                (:list :minilisp-define-expression)
                "A list of objects of the following type: A MiniLisp function definition expression, e.g. @ic{(DEFINE TWICE (X) (PROGN (+ X X)))}")
               (:arguments)
               (:description "Returns all MiniLisp server functions")
               (:remarks nil)
               (:see-also)
               (:examples ("Example one" (get-all-server-functions))))

(add-doc-entry (:title get-all-functions)
               (:label get-all-functions)
               (:type :function)
               (:in-sections all-functions minilisp)
               (:protected t)
               (:signature nil)
               (:returns
                (:list :minilisp-define-expression)
                "A list of objects of the following type: A MiniLisp function definition expression, e.g. @ic{(DEFINE TWICE (X) (PROGN (+ X X)))}")
               (:arguments)
               (:description
                "Returns all MiniLisp function previously defined with @funref{define}")
               (:remarks nil)
               (:see-also)
               (:examples ("Example one" (get-all-functions))))

(add-doc-entry (:title get-all-answers)
               (:label get-all-answers)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature
                (&key
                 ready-p
                 active-p
                 processed-p
                 queries-p
                 rules-p
                 abox
                 type-of-substrate
                 dont-show-variables
                 execute-p))
               (:returns
                (:list :nrql-query-answer)
                "A list of objects of the following type: A nRQL query answer, e.g. @ic{(((?X I) (?Y J)) ((?X I) (?Y I)) ((?X A) (?Y B)))}")
               (:arguments
                (ready-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (active-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (processed-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (queries-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rules-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}")
                (dont-show-variables :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (execute-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Applies @funref{get-answer} to specified lists of queries and/or rules")
               (:remarks
                "First the ready queries are executed, and then the processed queries reexecuted (however, the ready queries are not executed twice)")
               (:see-also
                reexecute-query
                execute-query
                execute-all-queries)
               (:examples))

(add-doc-entry (:title get-agraph-version)
               (:label get-agraph-version)
               (:type :function)
               (:in-sections all-functions general agraph)
               (:protected t)
               (:signature nil)
               (:returns :string "A string, e.g. @ic{\"hello\"}")
               (:arguments)
               (:description "Returns the AllegroGraph version number")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title get-abox-graph)
               (:label get-abox-graph)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:protected t)
               (:signature
                (&optional
                 abox
                 &key
                 depth
                 no-transitives-p
                 no-top-role-p
                 browsing-mode-p
                 told-only-p
                 root-individuals
                 selected-individuals
                 only-successors-in-selected-individuals-p
                 for-roles
                 for-datatype-properties
                 for-annotation-properties))
               (:returns)
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (depth
                 :non-negative-integer
                 "A non-negative integer (possibly 0)")
                (no-transitives-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (no-top-role-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (browsing-mode-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (told-only-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (root-individuals
                 (:list :abox-individual)
                 "A list of objects of the following type: An ABox individual, e.g. @ic{betty}")
                (selected-individuals
                 (:list :abox-individual)
                 "A list of objects of the following type: An ABox individual, e.g. @ic{betty}")
                (only-successors-in-selected-individuals-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (for-roles
                 (:list :role)
                 "A list of objects of the following type: A role, e.g. @ic{has-child}")
                (for-datatype-properties
                 (:list :datatype-property)
                 "A list of objects of the following type: An OWL2 datatype property, a special role, e.g. @ic{hasAge}")
                (for-annotation-properties
                 (:list :annotation-property)
                 "A list of objects of the following type: An annotation property, a special role, e.g. @ic{rdfs:comment}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title full-reset)
               (:label full-reset)
               (:type :function)
               (:in-sections all-functions general)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description
                "Simply calls @ic{(reset-nrql-engine :full-reset-p t)}, see @funref{reset-nrql-engine}")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title fcall)
               (:label fcall)
               (:type :function)
               (:in-sections all-functions minilisp)
               (:protected t)
               (:signature (name))
               (:returns
                :minilisp-sexpression
                "A MiniLisp S-expression")
               (:arguments
                (name :minilisp-object-name
                      "A MiniLisp identifier, e.g. a MiniLisp variable or function name"))
               (:description
                "Calls a MiniLisp function previously defined with @funref{define}. Recursive @ic{ fcall}s are aborted at runtime to ensure termination")
               (:remarks nil)
               (:see-also)
               (:examples ("Example one" (fcall twice 3))))

(add-doc-entry (:title expensive-rules)
               (:label expensive-rules)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :nrql-rule-id)
                "A list of objects of the following type: A nRQL rule ID, e.g. @ic{:rule-1}")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of expensive-queries)
               (:examples))

(add-doc-entry (:title expensive-queries)
               (:label expensive-queries)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :nrql-query-id)
                "A list of objects of the following type: A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Returns a list of (the IDs of) the queries that satisfy @funref{expensive-query-p}. Note that this is a subset of the set of active queries (see @funref{active-queries}")
               (:remarks nil)
               (:see-also)
               (:query-equivalent-of expensive-rules)
               (:examples))

(add-doc-entry (:title exit-server)
               (:label exit-server)
               (:type :function)
               (:in-sections all-functions general)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description "Exists the current Racer server.")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title execute-or-reexecute-all-rules)
               (:label execute-or-reexecute-all-rules)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (&key debug-p abox type-of-substrate))
               (:returns
                (:list :nrql-rule-result)
                "A list of objects of the following type: An anonymous ABox, e.g. @ic{(((INSTANCE I MOTHER) (RELATED I J HAS-CHILD) (INSTANCE J CHILD)))}")
               (:arguments
                (debug-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of execute-or-reexecute-all-queries)
               (:examples))

(add-doc-entry (:title execute-or-reexecute-all-queries)
               (:label execute-or-reexecute-all-queries)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature
                (&key
                 debug-p
                 abox
                 type-of-substrate
                 dont-add-abox-duplicates-p
                 remove-duplicates-p
                 two-phase-processing-p
                 deliver-phase-two-warning-tokens-p
                 deliver-kb-has-changed-warning-tokens-p
                 add-rule-consequences-p
                 continuation-based-instance-retrieval-p
                 told-information-reasoning-p
                 final-consistency-checking-p
                 runtime-consistency-checking-p
                 verbose-p
                 dont-show-variables
                 dont-show-head-projection-operators-p
                 dont-show-lambdas-p
                 how-many
                 only-new-tuples-p
                 timeout
                 proactive-tuple-computation-p
                 tuple-at-a-time-p
                 use-individual-synonyms-p
                 check-abox-consistency-p
                 ensure-tbox-classification-p
                 initial-abox-mirroring-p
                 initial-role-assertion-mirroring-p
                 classify-concepts-in-instance-assertions-p
                 exclude-permutations-p
                 record-explanations-p))
               (:returns)
               (:arguments
                (debug-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}")
                (dont-add-abox-duplicates-p :boolean
                                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (remove-duplicates-p :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (two-phase-processing-p :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (deliver-phase-two-warning-tokens-p :boolean
                                                    "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (deliver-kb-has-changed-warning-tokens-p :boolean
                                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (add-rule-consequences-p :boolean
                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (continuation-based-instance-retrieval-p :boolean
                                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (told-information-reasoning-p :boolean
                                              "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (final-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (runtime-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (verbose-p :boolean
                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-variables :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-head-projection-operators-p :boolean
                                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-lambdas-p :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (how-many :non-negative-integer
                          "A non-negative integer (possibly 0)")
                (only-new-tuples-p :boolean
                                   "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (timeout :non-negative-integer
                         "A non-negative integer (possibly 0)")
                (proactive-tuple-computation-p :boolean
                                               "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (tuple-at-a-time-p :boolean
                                   "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-individual-synonyms-p :boolean
                                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (check-abox-consistency-p :boolean
                                          "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (ensure-tbox-classification-p :boolean
                                              "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (initial-abox-mirroring-p :boolean
                                          "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (initial-role-assertion-mirroring-p :boolean
                                                    "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (classify-concepts-in-instance-assertions-p :boolean
                                                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (exclude-permutations-p :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (record-explanations-p :boolean
                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Applies @funref{execute-or-reexecute-query} to @funref{processed-queries}")
               (:remarks
                "First the ready queries are executed, and then the processed queries reexecuted (however, the ready queries are not executed twice)")
               (:see-also
                reexecute-query
                execute-query
                execute-all-queries)
               (:query-equivalent-of execute-or-reexecute-all-rules)
               (:examples))

(add-doc-entry (:title execute-all-rules)
               (:label execute-all-rules)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :nrql-rule-result)
                "A list of objects of the following type: An anonymous ABox, e.g. @ic{(((INSTANCE I MOTHER) (RELATED I J HAS-CHILD) (INSTANCE J CHILD)))}")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of execute-all-queries)
               (:examples))

(add-doc-entry (:title execute-all-queries)
               (:label execute-all-queries)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature
                (&key
                 abox
                 type-of-substrate
                 dont-add-abox-duplicates-p
                 remove-duplicates-p
                 two-phase-processing-p
                 deliver-phase-two-warning-tokens-p
                 deliver-kb-has-changed-warning-tokens-p
                 add-rule-consequences-p
                 continuation-based-instance-retrieval-p
                 told-information-reasoning-p
                 final-consistency-checking-p
                 runtime-consistency-checking-p
                 verbose-p
                 dont-show-variables
                 dont-show-head-projection-operators-p
                 dont-show-lambdas-p
                 how-many
                 only-new-tuples-p
                 timeout
                 proactive-tuple-computation-p
                 tuple-at-a-time-p
                 use-individual-synonyms-p
                 check-abox-consistency-p
                 ensure-tbox-classification-p
                 initial-abox-mirroring-p
                 initial-role-assertion-mirroring-p
                 classify-concepts-in-instance-assertions-p
                 exclude-permutations-p
                 record-explanations-p))
               (:returns)
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}")
                (dont-add-abox-duplicates-p :boolean
                                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (remove-duplicates-p :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (two-phase-processing-p :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (deliver-phase-two-warning-tokens-p :boolean
                                                    "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (deliver-kb-has-changed-warning-tokens-p :boolean
                                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (add-rule-consequences-p :boolean
                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (continuation-based-instance-retrieval-p :boolean
                                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (told-information-reasoning-p :boolean
                                              "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (final-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (runtime-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (verbose-p :boolean
                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-variables :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-head-projection-operators-p :boolean
                                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-lambdas-p :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (how-many :non-negative-integer
                          "A non-negative integer (possibly 0)")
                (only-new-tuples-p :boolean
                                   "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (timeout :non-negative-integer
                         "A non-negative integer (possibly 0)")
                (proactive-tuple-computation-p :boolean
                                               "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (tuple-at-a-time-p :boolean
                                   "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-individual-synonyms-p :boolean
                                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (check-abox-consistency-p :boolean
                                          "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (ensure-tbox-classification-p :boolean
                                              "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (initial-abox-mirroring-p :boolean
                                          "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (initial-role-assertion-mirroring-p :boolean
                                                    "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (classify-concepts-in-instance-assertions-p :boolean
                                                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (exclude-permutations-p :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (record-explanations-p :boolean
                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Applies @funref{execute-query} to @funref{ready-queries}")
               (:remarks nil)
               (:see-also execute-query abort-query)
               (:query-equivalent-of execute-all-rules)
               (:examples))

(add-doc-entry (:title exclude-permutations)
               (:label exclude-permutations)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description
                "Advises nRQL to (globally) exclude permutations of anwers tuples. See also argument @arg{exclude-permutations-p} of function @funref{execute-query}")
               (:remarks nil)
               (:see-also
                describe-query-processing-mode
                execute-query
                with-nrql-settings)
               (:examples))

(add-doc-entry (:title evaluate1)
               (:label evaluate1)
               (:type :function)
               (:in-sections all-functions minilisp)
               (:corresponding-macro evaluate)
               (:protected t)
               (:signature nil)
               (:returns
                :minilisp-sexpression
                "A MiniLisp S-expression")
               (:arguments)
               (:description
                "Evaluates a MiniLisp expression on the server")
               (:remarks nil)
               (:see-also)
               (:examples ("Example one" (evaluate (1+ 3)))))

(add-doc-entry (:title enable-very-smart-abox-mirroring)
               (:label enable-very-smart-abox-mirroring)
               (:type :function)
               (:in-sections
                all-functions
                substrate-management
                data-substrate)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description
                "Like @funref{enable-smart-abox-mirroring}, but now not only atomic concept assertions will be used for augmenting the information in the mirror resp. substrate caches and index structures, but also non-atomic concepts in ABox assertions. Thus, if @ic{ (instance i C)} is present for a non-atomic concepts @ic{ C}, then also the set of concept synonyms and concept ancestors is computed and added to the mirror. See also argument @arg{ told-information-reasoning-p} of function @funref{execute-query}")
               (:remarks
                "Might be expensive, since concepts in ABox concept assertion must be classified in order to compute the synonyms and ancestors")
               (:see-also
                enable-smart-abox-mirroring
                disable-abox-mirroring
                enable-abox-mirroring
                set-nrql-mode
                with-nrql-settings
                describe-query-processing-mode)
               (:examples))

(add-doc-entry (:title enable-two-phase-query-processing-mode)
               (:label enable-two-phase-query-processing-mode)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description
                "Enables (global) two phase query processing. In this mode, nRQL can distinguish between cheap (see @funref{cheap-query-p}) and expensive answer tuples (see @funref{expensive-query-p}) of a query. Please consult the User Guide for more information. See also argument @arg{ two-phase-processing-p} of function @funref{execute-query}")
               (:remarks
                "Before the first expensive tuple is computed, nRQL can be advised to deliver a so-called warning token, see @funref{enable-phase-two-starts-warning-tokens}")
               (:see-also
                disable-two-phase-query-processing-mode
                enable-phase-two-starts-warning-tokens
                set-nrql-mode
                with-nrql-settings
                describe-query-processing-mode)
               (:examples))

(add-doc-entry (:title enable-told-information-querying)
               (:label enable-told-information-querying)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description
                "Puts nRQL (globally) into told information querying mode; see also @arg{told-information-reasoning-p} of @funref{execute-query}. Told information querying means means that calls to Racer's ABox retrieval functions are avoided and only the information in the substrate caches is used for query answering. It is recommended to use @funref{set-nrql-mode} instead of this function. See also argument @arg{ told-information-reasoning-p} of function @funref{execute-query}")
               (:remarks nil)
               (:see-also
                set-nrql-mode
                describe-query-processing-mode
                with-nrql-settings)
               (:examples))

(add-doc-entry (:title enable-smart-abox-mirroring)
               (:label enable-smart-abox-mirroring)
               (:type :function)
               (:in-sections
                all-functions
                substrate-management
                data-substrate)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description
                "Enables ABox mirroring, see funref{enable-abox-mirroring}, but in a smarter way. Not only are the ABox assertion mirrored and put into the substrate caches and index structures, but also the TBox information is exploited. In case of a concept assertion such as @ic{ (instance i C)} with atomic concept @ic{ C}, not only @ic{ C} is added as told information for @ic{ i} to the ABox mirror resp. substrate caches and index structures, but also the set of concept synonyms and concept ancestors from the TBox is computed and added as well. The same applies for @ic{ related} role membership assertions in the presence of role hierarchies, etc. Please consult the User Guide for more details. See also argument @arg{ told-information-reasoning-p} of function @funref{execute-query}")
               (:remarks nil)
               (:see-also
                enable-very-smart-abox-mirroring
                disable-abox-mirroring
                enable-abox-mirroring
                set-nrql-mode
                with-nrql-settings
                describe-query-processing-mode)
               (:examples))

(add-doc-entry (:title enable-rcc-substrate-mirroring)
               (:label enable-rcc-substrate-mirroring)
               (:type :function)
               (:in-sections
                all-functions
                rcc-substrate
                substrate-management)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description
                "Like @funref{enable-data-substrate-mirroring}, but substrates of type @ic{ rcc-mirror-substrate} are created. This is a @ic{ mirror-data-substrate} as well as a @ic{ rcc-substrate}")
               (:remarks
                "Note that you can register a set of RCC relation synonyms using @funref{register-rcc-synonym}. This allows you, for example, to declare a set of OWL object properties to be used as RCC relations in the RCC substrate")
               (:see-also
                disable-rcc-substrate-mirroring
                register-rcc-synonym
                describe-query-processing-mode)
               (:examples))

(add-doc-entry (:title enable-query-repository)
               (:label enable-query-repository)
               (:type :function)
               (:in-sections all-functions query-reasoning)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description
                "Enables the QBox query repository facility")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title enable-query-realization)
               (:label enable-query-realization)
               (:type :function)
               (:in-sections all-functions query-reasoning)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description "Enables query realization")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title enable-query-optimization)
               (:label enable-query-optimization)
               (:type :function)
               (:in-sections all-functions query-optimizer)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description "Enables the cost-based query optimizer")
               (:remarks
                "Note that queries must be brought into DNF (Disjunctive Normal Form). Thus, query optimization might be expensive")
               (:see-also
                optimizer-use-cardinality-heuristics
                describe-query-processing-mode)
               (:examples))

(add-doc-entry (:title enable-phase-two-starts-warning-tokens)
               (:label enable-phase-two-starts-warning-tokens)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description
                "Enables (global) delivery of @ic{ :warning-expensive-phase-two-starts} tokens in two-phase query processing modes, denoting the transition between cheap (see @funref{cheap-query-p}) and expensive answer tuples (see @funref{expensive-query-p}). See also argument @arg{deliver-phase-two-warning-tokens-p} of function @funref{execute-query}")
               (:remarks
                "Can only be called if nRQL is in two phase processing mode (see @funref{enable-two-phase-query-processing-mode})")
               (:see-also
                enable-two-phase-query-processing-mode
                disable-two-phase-query-processing-mode
                set-nrql-mode
                with-nrql-settings
                describe-query-processing-mode)
               (:examples))

(add-doc-entry (:title enable-nrql-warnings)
               (:label enable-nrql-warnings)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description
                "Advises nRQL to print out warnings on STDOUT in certain circumstances and enables delivery of warning tokens (see @funref{enable-kb-has-changed-warning-tokens}, @funref{enable-phase-two-starts-warning-tokens})")
               (:remarks nil)
               (:see-also
                describe-query-processing-mode
                enable-kb-has-changed-warning-tokens
                with-nrql-settings
                disable-kb-has-changed-warning-tokens)
               (:examples))

(add-doc-entry (:title enable-lazy-unfolding-of-defined-queries)
               (:label enable-lazy-unfolding-of-defined-queries)
               (:type :function)
               (:in-sections all-functions defined-queries)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description
                "Enables the lazy unfolding defined queries.")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title enable-lazy-tuple-computation)
               (:label enable-lazy-tuple-computation)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title enable-kb-has-changed-warning-tokens)
               (:label enable-kb-has-changed-warning-tokens)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description
                "Enables (global) delivery of @ic{ :warning-kb-has-changed} tokens in tuple-at-a-time query processing mode. Such a token is delivered iff the query ABox / TBox changes during query answering (in the time the query is still active). See also argument @arg{deliver-kb-has-changed-warning-tokens-p} of function @funref{execute-query}")
               (:remarks
                "Can only be called if nRQL is in tuple-at-a-time mode")
               (:see-also
                set-nrql-mode
                with-nrql-settings
                describe-query-processing-mode)
               (:examples))

(add-doc-entry (:title enable-eager-tuple-computation)
               (:label enable-eager-tuple-computation)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description
                "Advises nRQL to precompute answer tuples in tuple-at-a-time mode, even if these tuples have not yet been requested (see @funref{get-next-tuple}); see also argument @arg{proactive-tuple-computation-p} of function @funref{execute-query}. A query started in eager mode will never appear on @funref{waiting-queries}. The inverse tuple-at-a-time mode is called lazy tuple-at-a-time mode. In this mode, the next answer tuple will not be computed by the query answering process (thread) until it is really requested; in the meantime, such a query appears on the list of @funref{waiting-queries}")
               (:remarks
                "Is only effective if nRQL is in tuple-at-a-time-mode")
               (:see-also
                describe-query-processing-mode
                set-nrql-mode
                with-nrql-settings)
               (:examples))

(add-doc-entry (:title enable-defined-queries)
               (:label enable-defined-queries)
               (:type :function)
               (:in-sections all-functions defined-queries)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description "Enables the defined queries.")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title enable-data-substrate-mirroring)
               (:label enable-data-substrate-mirroring)
               (:type :function)
               (:in-sections
                all-functions
                substrate-management
                data-substrate)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description
                "Advises nRQL (globally) to create substrates of type @ic{ mirror-data-substrate}. Additional retrieval facilities (especially for OWL) are provided on this kind of substrate. Please refer to the User Guide. See also argument @arg{type-of-substrate} of function @funref{racer-prepare-query}")
               (:remarks
                "If you want to exploit the additional retrieval facilities offered by the (mirror) data substrate, then make sure that this function is called before the first nRQL query is posed")
               (:see-also
                disable-data-substrate-mirroring
                set-nrql-mode
                with-nrql-settings
                describe-query-processing-mode)
               (:examples))

(add-doc-entry (:title enable-abox-mirroring)
               (:label enable-abox-mirroring)
               (:type :function)
               (:in-sections
                all-functions
                substrate-management
                data-substrate)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description
                "Instructs nRQL (globally) to mirror the asserted content of an ABox (the ABox assertions) into its internal data caches before querying starts. Note that the amount of information in the substrate resp. caches determines the degree of query answering completness in the incomplete modes (see @funref{enable-told-information-querying}). See also argument @arg{ told-information-reasoning-p} of function @funref{execute-query}")
               (:remarks nil)
               (:see-also
                disable-abox-mirroring
                enable-smart-abox-mirroring
                enable-very-smart-abox-mirroring
                enable-told-information-querying
                set-nrql-mode
                with-nrql-settings
                describe-query-processing-mode)
               (:examples))

(add-doc-entry (:title enable-abduction)
               (:label enable-abduction)
               (:type :function)
               (:in-sections all-functions abduction)
               (:protected t)
               (:signature
                (c-mode
                 r-mode
                 &key
                 reset-p
                 hypo-mode-stack
                 runtime-consistency-checking-p
                 final-consistency-checking-p
                 ensure-permutations-p
                 same-as-only-p
                 how-many
                 candidate-individuals
                 binding-validator
                 cutoff-fn
                 order-by
                 only-best-p
                 reverse-order-p))
               (:returns)
               (:arguments
                (reset-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (runtime-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (final-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (ensure-permutations-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (same-as-only-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (how-many :non-negative-integer
                          "A non-negative integer (possibly 0)")
                (candidate-individuals
                 (:list :abox-individual)
                 "A list of objects of the following type: An ABox individual, e.g. @ic{betty}")
                (order-by
                 (:one-of :new-paper-fn :cae :cae2 :rasouli-paper-fn)
                 "One of the following symbols: @ic{:new-paper-fn, :cae, :cae2, :rasouli-paper-fn}")
                (only-best-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (reverse-order-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title edge-label1)
               (:label edge-label1)
               (:type :function)
               (:in-sections all-functions data-substrate)
               (:corresponding-macro edge-label)
               (:protected t)
               (:signature (from to &optional abox type-of-substrate))
               (:returns :substrate-description-label "unknown")
               (:arguments
                (from
                 :substrate-node
                 "A substrate node, a symbol, e.g. @ic{person1}")
                (to
                 :substrate-node
                 "A substrate node, a symbol, e.g. @ic{person1}")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Like @funref{get-data-edge-label}, but with the signature @arg{(from to &optional abox type-of-substrate)}")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title edge-description1)
               (:label edge-description1)
               (:type :function)
               (:in-sections all-functions data-substrate)
               (:corresponding-macro edge-description)
               (:protected t)
               (:signature (from to &optional abox type-of-substrate))
               (:returns
                :substrate-edge-description
                "A substrate edge description, e.g. @ic{(((:FROM-NODE MICHAEL) (:TO-NODE RUDOLF) (:EDGE-LABEL ((HAS-FATHER)))))}")
               (:arguments
                (from
                 :substrate-node
                 "A substrate node, a symbol, e.g. @ic{person1}")
                (to
                 :substrate-node
                 "A substrate node, a symbol, e.g. @ic{person1}")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Like @funref{get-data-edge-description}, but with the signature @arg{(from to &optional abox type-of-substrate)}")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title dont-use-injective-variables-by-default)
               (:label dont-use-injective-variables-by-default)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title dont-use-individual-synonym-equivalence-classes)
               (:label dont-use-individual-synonym-equivalence-classes)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title dont-report-inconsistent-queries-and-rules)
               (:label dont-report-inconsistent-queries-and-rules)
               (:type :function)
               (:in-sections all-functions query-reasoning)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title dont-prefer-defined-queries)
               (:label dont-prefer-defined-queries)
               (:type :function)
               (:in-sections all-functions defined-queries abduction)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description
                "If a unary (binary) query is referenced in a body and there are corresponding concept (role) with the same name as the defined query, then the ambiguity is resolved in favor of the concept (role)")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title dont-keep-defined-query-atoms)
               (:label dont-keep-defined-query-atoms)
               (:type :function)
               (:in-sections all-functions defined-queries abduction)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title dont-check-abox-consistency-before-querying)
               (:label dont-check-abox-consistency-before-querying)
               (:type :function)
               (:in-sections all-functions query-reasoning)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title dont-allow-overloaded-definitions)
               (:label dont-allow-overloaded-definitions)
               (:type :function)
               (:in-sections all-functions defined-queries abduction)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description
                "Dont allow multiple defined queries with same name and arity")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title dont-add-rule-consequences-automatically)
               (:label dont-add-rule-consequences-automatically)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title
                dont-add-role-assertions-for-datatype-properties)
               (:label
                dont-add-role-assertions-for-datatype-properties)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title dont-add-missing-top-conjuncts)
               (:label dont-add-missing-top-conjuncts)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title disable-two-phase-query-processing-mode)
               (:label disable-two-phase-query-processing-mode)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title disable-told-information-querying)
               (:label disable-told-information-querying)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title disable-rcc-substrate-mirroring)
               (:label disable-rcc-substrate-mirroring)
               (:type :function)
               (:in-sections
                all-functions
                rcc-substrate
                substrate-management)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title disable-query-repository)
               (:label disable-query-repository)
               (:type :function)
               (:in-sections all-functions query-reasoning)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description
                "Disables the QBox query repository facility")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title disable-query-realization)
               (:label disable-query-realization)
               (:type :function)
               (:in-sections all-functions query-reasoning)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description "Disables query realization")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title disable-query-optimization)
               (:label disable-query-optimization)
               (:type :function)
               (:in-sections all-functions query-optimizer)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title disable-phase-two-starts-warning-tokens)
               (:label disable-phase-two-starts-warning-tokens)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title disable-nrql-warnings)
               (:label disable-nrql-warnings)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title disable-lazy-unfolding-of-defined-queries)
               (:label disable-lazy-unfolding-of-defined-queries)
               (:type :function)
               (:in-sections all-functions defined-queries)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description
                "Disables the lazy unfolding defined queries.")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title disable-kb-has-changed-warning-tokens)
               (:label disable-kb-has-changed-warning-tokens)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title disable-defined-queries)
               (:label disable-defined-queries)
               (:type :function)
               (:in-sections all-functions defined-queries)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description
                "Disables the defined queries, but keeps the definitions.")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title disable-data-substrate-mirroring)
               (:label disable-data-substrate-mirroring)
               (:type :function)
               (:in-sections
                all-functions
                substrate-management
                data-substrate)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title disable-abox-mirroring)
               (:label disable-abox-mirroring)
               (:type :function)
               (:in-sections all-functions substrate-management)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title disable-abduction)
               (:label disable-abduction)
               (:type :function)
               (:in-sections all-functions abduction)
               (:protected t)
               (:signature (&key reset-p))
               (:returns)
               (:arguments
                (reset-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title description-implies-p)
               (:label description-implies-p)
               (:type :function)
               (:in-sections all-functions data-substrate)
               (:corresponding-macro description-implies?)
               (:protected t)
               (:signature (a b))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (a :substrate-label-description "unknown")
                (b :substrate-label-description "unknown"))
               (:description
                "Checks whether label @arg{a} implies label @arg{b}")
               (:remarks nil)
               (:see-also)
               (:examples
                ("Example one" (description-implies-p 'a '((a b))))))

(add-doc-entry (:title describe-substrate)
               (:label describe-substrate)
               (:type :function)
               (:in-sections all-functions substrate-management)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                :substrate-description
                "A data substrate description, a nested attribute-value list")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Returns a description of the substrate for ABox @arg{abox} of type @arg{type-of-substrate}")
               (:remarks "")
               (:see-also describe-all-substrates describe-substrate)
               (:examples))

(add-doc-entry (:title describe-query-processing-mode)
               (:label describe-query-processing-mode)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature nil)
               (:returns
                :nrql-query-processing-mode
                "A description of the parameters and settings of the nRQL query answering engine, a nested attribute-value list")
               (:arguments)
               (:description
                "Returns a description of the current (global) nRQL settings resp. query processing mode")
               (:remarks nil)
               (:see-also
                describe-query
                describe-current-substrate
                set-nrql-mode
                with-nrql-settings
                execute-query)
               (:examples))

(add-doc-entry (:title describe-definition)
               (:label describe-definition)
               (:type :function)
               (:in-sections all-functions defined-queries)
               (:protected t)
               (:signature (name &key tbox arity error-p))
               (:returns
                :defquery-expression
                "A defined query defquery expression, e.g. @ic{((DEFQUERY MOTHER (?X) (AND (?X WOMAN) (?X ?Y HAS-CHILD))))}")
               (:arguments
                (name :nrql-defined-query-name
                      "A symbol, the name of a nRQL defined query")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (arity
                 :non-negative-integer
                 "A non-negative integer (possibly 0)")
                (error-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Describes the definition @arg{name} local to @arg{tbox}")
               (:remarks nil)
               (:see-also define-query)
               (:examples))

(add-doc-entry (:title describe-current-substrate)
               (:label describe-current-substrate)
               (:type :function)
               (:in-sections all-functions substrate-management)
               (:protected t)
               (:signature nil)
               (:returns
                :substrate-description
                "A data substrate description, a nested attribute-value list")
               (:arguments)
               (:description
                "Returns a description of the current substrate used for query answering")
               (:remarks nil)
               (:see-also
                describe-query-processing-mode
                describe-query
                describe-rule)
               (:examples))

(add-doc-entry (:title describe-all-substrates)
               (:label describe-all-substrates)
               (:type :function)
               (:in-sections all-functions substrate-management)
               (:protected t)
               (:signature nil)
               (:returns
                (:list :substrate-description)
                "A list of objects of the following type: A data substrate description, a nested attribute-value list")
               (:arguments)
               (:description
                "Maps @funref{describe-substrate} over @funref{all-substrates}")
               (:remarks "")
               (:see-also describe-substrate)
               (:examples))

(add-doc-entry (:title describe-all-rules)
               (:label describe-all-rules)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature
                (&optional rewritten-p &key abox type-of-substrate))
               (:returns
                (:list :nrql-rule-description)
                "A list of objects of the following type: A nRQL rule description, e.g. @ic{(:RULE-2 (:NOT-ACCURATE :PROCESSED) (PREPARE-ABOX-RULE (?X C) ((INSTANCE ?X C)) :ABOX TEST))}")
               (:arguments
                (rewritten-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of describe-all-queries)
               (:examples))

(add-doc-entry (:title describe-all-queries)
               (:label describe-all-queries)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature
                (&optional rewritten-p &key abox type-of-substrate))
               (:returns
                (:list :nrql-query-description)
                "A list of objects of the following type: A nRQL query description, e.g. @ic{(:QUERY-1 (:ACCURATE :PROCESSED) (RETRIEVE (?X) (?X C) :ABOX TEST))}")
               (:arguments
                (rewritten-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Applies @funref{describe-query} to the result of @funref{all-queries} and returns it")
               (:remarks nil)
               (:see-also)
               (:query-equivalent-of describe-all-rules)
               (:examples))

(add-doc-entry (:title describe-all-nodes)
               (:label describe-all-nodes)
               (:type :function)
               (:in-sections all-functions substrate-management)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :substrate-node-description)
                "A list of objects of the following type: A data substrate node description, e.g. @ic{((:NODE-NAME MICHAEL) (:NODE-LABEL ((PERSON))) (:NODE-SUCCESSORS NIL) (:NODE-PREDECESSORS NIL))}")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Returns a list containing the result of applying @funref{get-data-node-description} on @funref{get-substrate-nodes}")
               (:remarks nil)
               (:see-also describe-all-edges)
               (:examples))

(add-doc-entry (:title describe-all-edges)
               (:label describe-all-edges)
               (:type :function)
               (:in-sections all-functions substrate-management)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :substrate-edge-description)
                "A list of objects of the following type: A substrate edge description, e.g. @ic{(((:FROM-NODE MICHAEL) (:TO-NODE RUDOLF) (:EDGE-LABEL ((HAS-FATHER)))))}")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Like @funref{describe-all-nodes}, but for the edges")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title describe-all-definitions)
               (:label describe-all-definitions)
               (:type :function)
               (:in-sections all-functions defined-queries)
               (:protected t)
               (:signature (&key tbox error-p))
               (:returns
                (:list :defquery-expression)
                "A list of objects of the following type: A defined query defquery expression, e.g. @ic{((DEFQUERY MOTHER (?X) (AND (?X WOMAN) (?X ?Y HAS-CHILD))))}")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (error-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Returns a list containing all definitions (see @funref{describe-definition}) local to @arg{tbox}")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title delete-rcc-synonyms)
               (:label delete-rcc-synonyms)
               (:type :function)
               (:in-sections all-functions rcc-substrate)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description
                "Deletes all registered RCC synonyms (see @funref{register-rcc-synonym}")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title delete-prefix-mappings)
               (:label delete-prefix-mappings)
               (:type :function)
               (:in-sections all-functions owl-interface)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title delete-data-node)
               (:label delete-data-node)
               (:type :function)
               (:in-sections all-functions data-substrate)
               (:protected t)
               (:signature
                (name &key abox type-of-substrate told-info-p))
               (:returns)
               (:arguments
                (name :substrate-node
                      "A substrate node, a symbol, e.g. @ic{person1}")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}")
                (told-info-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Deletes the node named @arg{name} from the data substrate of type @arg{type-of-substrate} for the ABox @arg{abox}")
               (:remarks nil)
               (:see-also create-data-node get-data-edge-label)
               (:examples))

(add-doc-entry (:title delete-data-edge)
               (:label delete-data-edge)
               (:type :function)
               (:in-sections all-functions data-substrate)
               (:protected t)
               (:signature
                (from to &key abox type-of-substrate told-info-p))
               (:returns)
               (:arguments
                (from
                 :substrate-node
                 "A substrate node, a symbol, e.g. @ic{person1}")
                (to
                 :substrate-node
                 "A substrate node, a symbol, e.g. @ic{person1}")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}")
                (told-info-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Deletes the edge between the nodes @arg{from} and @arg{to} from the data substrate of type @arg{type-of-substrate} for the ABox @arg{abox}")
               (:remarks nil)
               (:see-also create-data-edge get-data-edge-label)
               (:examples))

(add-doc-entry (:title delete-all-substrates)
               (:label delete-all-substrates)
               (:type :function)
               (:in-sections all-functions substrate-management)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns)
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description "Deletes all substrates")
               (:remarks nil)
               (:see-also
                reset-all-substrates
                reset-nrql-engine
                all-substrates
                describe-all-substrates)
               (:examples))

(add-doc-entry (:title delete-all-rules)
               (:label delete-all-rules)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns)
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description "Aborts and deletes all rules")
               (:remarks nil)
               (:see-also abort-rule delete-rule abort-all-rules)
               (:examples))

(add-doc-entry (:title delete-all-queries)
               (:label delete-all-queries)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns)
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description "Aborts and deletes all queries")
               (:remarks nil)
               (:see-also abort-query delete-query abort-all-queries)
               (:examples))

(add-doc-entry (:title delete-all-definitions)
               (:label delete-all-definitions)
               (:type :function)
               (:in-sections all-functions defined-queries)
               (:protected t)
               (:signature (&key tbox))
               (:returns)
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:description
                "Deletes all defined queries local to @arg{tbox}")
               (:remarks nil)
               (:see-also undefine-query)
               (:examples))

(add-doc-entry (:title del-rcc-node1)
               (:label del-rcc-node1)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for del-data-node1))

(add-doc-entry (:title del-rcc-edge1)
               (:label del-rcc-edge1)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for del-data-edge1))

(add-doc-entry (:title del-doc-entry1)
               (:label del-doc-entry1)
               (:type :function)
               (:in-sections all-functions doc)
               (:corresponding-macro del-doc-entry)
               (:protected t)
               (:signature (label))
               (:returns)
               (:arguments (label :keyword "A keyword symbol"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title del-data-node1)
               (:label del-data-node1)
               (:type :function)
               (:in-sections all-functions data-substrate)
               (:corresponding-macro del-data-node)
               (:protected t)
               (:signature (name &optional abox type-of-substrate))
               (:returns)
               (:arguments
                (name :substrate-node
                      "A substrate node, a symbol, e.g. @ic{person1}")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Like @funref{delete-data-node}, but with the signature @arg{(name &optional abox type-of-substrate)}")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title del-data-edge1)
               (:label del-data-edge1)
               (:type :function)
               (:in-sections all-functions data-substrate)
               (:corresponding-macro del-data-edge)
               (:protected t)
               (:signature (from to &optional abox type-of-substrate))
               (:returns)
               (:arguments
                (from
                 :substrate-node
                 "A substrate node, a symbol, e.g. @ic{person1}")
                (to
                 :substrate-node
                 "A substrate node, a symbol, e.g. @ic{person1}")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Like @funref{delete-data-edge}, but with the signature @arg{(from to &optional abox type-of-substrate)}")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title defpar1)
               (:label defpar1)
               (:type :function)
               (:in-sections all-functions minilisp)
               (:corresponding-macro defpar)
               (:protected t)
               (:signature (name value))
               (:returns)
               (:arguments
                (name :minilisp-object-name
                      "A MiniLisp identifier, e.g. a MiniLisp variable or function name")
                (value
                 :minilisp-sexpression
                 "A MiniLisp S-expression"))
               (:description "Defines a MiniLisp parameter")
               (:remarks nil)
               (:see-also)
               (:examples ("Example one" (defpar1 pi (+ 1 2)))))

(add-doc-entry (:title define1)
               (:label define1)
               (:type :function)
               (:in-sections all-functions minilisp)
               (:corresponding-macro define)
               (:protected t)
               (:signature (name arglist))
               (:returns)
               (:arguments
                (name :minilisp-object-name
                      "A MiniLisp identifier, e.g. a MiniLisp variable or function name")
                (arglist
                 :lambda-list
                 "A MiniLisp lambda list, e.g. @ic{(x y)}"))
               (:description
                "Defines a MiniLisp function on the server. Functions can be called using @funref{fcall}")
               (:remarks nil)
               (:see-also)
               (:examples ("Example one" (define twice (a) (+ a a)))))

(add-doc-entry (:title define-query)
               (:label define-query)
               (:type :function)
               (:in-sections all-functions defined-queries)
               (:corresponding-macro defquery)
               (:protected t)
               (:signature
                (name head
                      body
                      &key
                      keep-p
                      tbox
                      consider-head-atom-for-consistency-check-p
                      allow-multiple-definitions-p))
               (:returns)
               (:arguments
                (name :nrql-defined-query-name
                      "A symbol, the name of a nRQL defined query")
                (head :nrql-query-head
                      "A nRQL query head, e.g. @ic{(?x (told-value (age ?x)))}")
                (body :nrql-query-body
                      "A nRQL query body (antecedence), e.g. @ic{(and (?x C) (?x ?y R) (?y D))}")
                (keep-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (consider-head-atom-for-consistency-check-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (allow-multiple-definitions-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Associates a query head and body with a name which is the name of the definition. This defined query can be reused by means of code{substitute} query atoms. The definitions are local to argument{tbox}")
               (:remarks
                "The argument{body} can reference other defined queries as well, but cyclic definitions are not possible. Note that defined queries can also be used in a rule antecedence")
               (:see-also)
               (:examples
                ("Example one"
                 (define-query 'is-a-mother
                               '(?x)
                               '(and (?x woman) (?x ?y has-child))))
                ("Example two"
                 (define-query '(?a) '(substitute (is-a-mother ?a))))
                ("Example three" (retrieve (?a) (?a is-a-mother)))))

(add-doc-entry (:title define-and-prepare-query)
               (:label define-and-prepare-query)
               (:type :function)
               (:in-sections all-functions defined-queries)
               (:corresponding-macro def-and-prep-query)
               (:protected t)
               (:signature
                (name head
                      body
                      &key
                      keep-p
                      tbox
                      consider-head-atom-for-consistency-check-p
                      allow-multiple-definitions-p))
               (:returns)
               (:arguments
                (name :nrql-defined-query-name
                      "A symbol, the name of a nRQL defined query")
                (head :nrql-query-head
                      "A nRQL query head, e.g. @ic{(?x (told-value (age ?x)))}")
                (body :nrql-query-body
                      "A nRQL query body (antecedence), e.g. @ic{(and (?x C) (?x ?y R) (?y D))}")
                (keep-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (consider-head-atom-for-consistency-check-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (allow-multiple-definitions-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Like @funref{define-query} with @ic{ keep-p} = @ic{ t} and @ic{ execute-p} = @ic{ nil}")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title define-and-execute-query)
               (:label define-and-execute-query)
               (:type :function)
               (:in-sections all-functions defined-queries)
               (:corresponding-macro def-and-exec-query)
               (:protected t)
               (:signature
                (name head
                      body
                      &key
                      keep-p
                      tbox
                      consider-head-atom-for-consistency-check-p
                      allow-multiple-definitions-p))
               (:returns)
               (:arguments
                (name :nrql-defined-query-name
                      "A symbol, the name of a nRQL defined query")
                (head :nrql-query-head
                      "A nRQL query head, e.g. @ic{(?x (told-value (age ?x)))}")
                (body :nrql-query-body
                      "A nRQL query body (antecedence), e.g. @ic{(and (?x C) (?x ?y R) (?y D))}")
                (keep-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (consider-head-atom-for-consistency-check-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (allow-multiple-definitions-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Like @funref{define-query} with @ic{ keep-p} = @ic{ t} and @ic{ execute-p} = @ic{ t}")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title defcon1)
               (:label defcon1)
               (:type :function)
               (:in-sections all-functions minilisp)
               (:corresponding-macro defcon)
               (:protected t)
               (:signature (name value))
               (:returns)
               (:arguments
                (name :minilisp-object-name
                      "A MiniLisp identifier, e.g. a MiniLisp variable or function name")
                (value
                 :minilisp-sexpression
                 "A MiniLisp S-expression"))
               (:description "Defines a MiniLisp constant")
               (:remarks nil)
               (:see-also)
               (:examples ("Example one" (defcon1 pi 3.141))))

(add-doc-entry (:title deactivate-defined-query)
               (:label deactivate-defined-query)
               (:type :function)
               (:in-sections all-functions defined-queries)
               (:protected t)
               (:signature (name arity &key pos tbox))
               (:returns (:one-of :okay) "The symbol :okay")
               (:arguments
                (name :nrql-defined-query-name
                      "A symbol, the name of a nRQL defined query")
                (arity
                 :non-negative-integer
                 "A non-negative integer (possibly 0)")
                (pos
                 :non-negative-integer
                 "A non-negative integer (possibly 0)")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title data-node1)
               (:label data-node1)
               (:type :function)
               (:in-sections all-functions data-substrate)
               (:corresponding-macro data-node)
               (:protected t)
               (:signature
                (name &optional
                      descr
                      racer-descr
                      abox
                      type-of-substrate))
               (:returns)
               (:arguments
                (name :substrate-node
                      "A substrate node, a symbol, e.g. @ic{person1}")
                (descr :substrate-label-description "unknown")
                (racer-descr
                 :racer-substrate-description-label
                 "A substrate label description, e.g. @ic{(\"michael\" age 34)}")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Like @funref{create-data-node}, but with the signature @arg{(name &optional descr racer-descr abox type-of-substrate)}")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title data-edge1)
               (:label data-edge1)
               (:type :function)
               (:in-sections all-functions data-substrate)
               (:corresponding-macro data-edge)
               (:protected t)
               (:signature
                (from
                 to
                 data-relation
                 &optional
                 racer-descr
                 abox
                 type-of-substrate))
               (:returns)
               (:arguments
                (from
                 :substrate-node
                 "A substrate node, a symbol, e.g. @ic{person1}")
                (to
                 :substrate-node
                 "A substrate node, a symbol, e.g. @ic{person1}")
                (data-relation
                 :substrate-relation
                 "A substrate relation")
                (racer-descr
                 :racer-substrate-description-label
                 "A substrate label description, e.g. @ic{(\"michael\" age 34)}")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Like @funref{create-data-edge}, but with signature @arg{(from to &optional descr racer-descr abox type-of-substrate)}")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title create-subgraph-aboxes)
               (:label create-subgraph-aboxes)
               (:type :function)
               (:in-sections all-functions abox-diff)
               (:protected t)
               (:signature (abox-or-name &optional new-name tbox))
               (:returns)
               (:arguments
                (abox-or-name
                 (:or :abox-name :abox)
                 "One of the following:  The name of an ABox, e.g. @ic{family-abox}, An anonymous ABox, a list of ABox assertions, e.g. @ic{((instance i C) (related i j R) (instance j D))}")
                (new-name
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title create-rcc-node)
               (:label create-rcc-node)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for create-data-node))

(add-doc-entry (:title create-rcc-edge)
               (:label create-rcc-edge)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for create-data-edge))

(add-doc-entry (:title create-data-node)
               (:label create-data-node)
               (:type :function)
               (:in-sections all-functions data-substrate)
               (:protected t)
               (:signature
                (name &key
                      abox
                      type-of-substrate
                      racer-descr
                      descr
                      told-info-p))
               (:returns)
               (:arguments
                (name :substrate-node
                      "A substrate node, a symbol, e.g. @ic{person1}")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}")
                (racer-descr
                 :racer-substrate-description-label
                 "A substrate label description, e.g. @ic{(\"michael\" age 34)}")
                (descr :substrate-label-description "unknown")
                (told-info-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Creates a node named @arg{name} in the data substrate of type @arg{type-of-substrate} for ABox @arg{abox} if the node does not exists yet. The label @arg{descr} is added as a conjunct to the label of @arg{name}. If @arg{racer-descr} is specified, then also a concept assertion @ic{ (instance name racer-descr)} is added to @arg{abox}")
               (:remarks nil)
               (:see-also create-data-edge get-data-node-label)
               (:examples))

(add-doc-entry (:title create-data-edge)
               (:label create-data-edge)
               (:type :function)
               (:in-sections all-functions data-substrate)
               (:protected t)
               (:signature
                (from
                 to
                 descr
                 &key
                 abox
                 type-of-substrate
                 racer-descr
                 told-info-p))
               (:returns)
               (:arguments
                (from
                 :substrate-node
                 "A substrate node, a symbol, e.g. @ic{person1}")
                (to
                 :substrate-node
                 "A substrate node, a symbol, e.g. @ic{person1}")
                (descr :substrate-label-description "unknown")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}")
                (racer-descr
                 :racer-substrate-description-label
                 "A substrate label description, e.g. @ic{(\"michael\" age 34)}")
                (told-info-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Creates an edge between nodes @arg{from} and @arg{to} in the data substrate of type @arg{type-of-substrate} for ABox @arg{abox}. If the nodes do not exists they are created. If the edge does not exist it is created. The label @arg{descr} is added as a conjunct to the label of the edge. If @arg{racer-descr} is specified, then also a role assertion @ic{ (related from to racer-descr)} is added to @arg{abox}")
               (:remarks nil)
               (:see-also create-data-node get-data-edge-label)
               (:examples))

(add-doc-entry (:title copy-rules)
               (:label copy-rules)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature
                (from-abox
                 to-abox
                 &key
                 type-of-substrate
                 keep-old-names-p))
               (:returns)
               (:arguments
                (from-abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (to-abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}")
                (keep-old-names-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Copies the set of rules associated with substrate of type @arg{type-of-substrate} for ABox @arg{from-abox} into substrate for ABox @arg{to-abox}.")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title compute-subgraph-aboxes)
               (:label compute-subgraph-aboxes)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:protected t)
               (:signature (abox-or-name))
               (:returns
                (:list (:list :abox (:list :abox-individual)))
                "A list of objects of the following type: A list of length 2 with objects of the following types: An anonymous ABox, a list of ABox assertions, e.g. @ic{((instance i C) (related i j R) (instance j D))}, A list of objects of the following type: An ABox individual, e.g. @ic{betty}")
               (:arguments
                (abox-or-name
                 (:or :abox-name :abox)
                 "One of the following:  The name of an ABox, e.g. @ic{family-abox}, An anonymous ABox, a list of ABox assertions, e.g. @ic{((instance i C) (related i j R) (instance j D))}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title compute-abox-difference2)
               (:label compute-abox-difference2)
               (:type :function)
               (:in-sections all-functions abox-diff)
               (:corresponding-macro
                compute-abox-difference-alternative)
               (:protected t)
               (:signature
                (a
                 b
                 &key
                 also-unmapped-differences-p
                 remove-redundant-diffs-p
                 optimizer-max-plans
                 known-correspondances
                 auto-correspondances-p
                 only-difference-p
                 full-tuples-p
                 show-score-p
                 equi-order-by
                 remove-implied-concept-assertions-p
                 remove-common-assertions-p
                 common-assertions-as-strict-atoms-p
                 map-new-inds-to-new-inds-p
                 cutoff-fn
                 hypo-mode-stack
                 c-mode
                 r-mode
                 only-best-p
                 order-by
                 reverse-order-p
                 ensure-permutations-p
                 how-many
                 strategy
                 simple-result-p
                 runtime-consistency-checking-p
                 final-consistency-checking-p
                 same-as-only-p
                 candidate-individuals
                 binding-validator))
               (:returns
                (:list :abox)
                "A list of objects of the following type: An anonymous ABox, a list of ABox assertions, e.g. @ic{((instance i C) (related i j R) (instance j D))}")
               (:arguments
                (a
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (b
                 :abox
                 "An anonymous ABox, a list of ABox assertions, e.g. @ic{((instance i C) (related i j R) (instance j D))}")
                (also-unmapped-differences-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (remove-redundant-diffs-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (optimizer-max-plans
                 :non-negative-integer
                 "A non-negative integer (possibly 0)")
                (known-correspondances
                 (:list (:list :abox-individual :abox-individual))
                 "A list of objects of the following type: A list of length 2 with objects of the following types: An ABox individual, e.g. @ic{betty}, An ABox individual, e.g. @ic{betty}")
                (auto-correspondances-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (only-difference-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (full-tuples-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (show-score-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (equi-order-by
                 (:one-of :prefer-old-inds :prefer-new-inds)
                 "One of the following symbols: @ic{:prefer-old-inds, :prefer-new-inds}")
                (remove-implied-concept-assertions-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (remove-common-assertions-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (common-assertions-as-strict-atoms-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (map-new-inds-to-new-inds-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (only-best-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (order-by
                 (:one-of :new-paper-fn :cae :cae2 :rasouli-paper-fn)
                 "One of the following symbols: @ic{:new-paper-fn, :cae, :cae2, :rasouli-paper-fn}")
                (reverse-order-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (ensure-permutations-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (how-many :non-negative-integer
                          "A non-negative integer (possibly 0)")
                (simple-result-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (runtime-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (final-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (same-as-only-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (candidate-individuals
                 (:list :abox-individual)
                 "A list of objects of the following type: An ABox individual, e.g. @ic{betty}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title compute-abox-difference1)
               (:label compute-abox-difference1)
               (:type :function)
               (:in-sections all-functions abox-diff)
               (:corresponding-macro compute-abox-difference)
               (:protected t)
               (:signature
                (a
                 b
                 &key
                 also-unmapped-differences-p
                 remove-redundant-diffs-p
                 optimizer-max-plans
                 known-correspondances
                 auto-correspondances-p
                 only-difference-p
                 full-tuples-p
                 show-score-p
                 equi-order-by
                 remove-implied-concept-assertions-p
                 remove-common-assertions-p
                 common-assertions-as-strict-atoms-p
                 map-new-inds-to-new-inds-p
                 cutoff-fn
                 hypo-mode-stack
                 c-mode
                 r-mode
                 only-best-p
                 order-by
                 reverse-order-p
                 ensure-permutations-p
                 how-many
                 strategy
                 simple-result-p
                 runtime-consistency-checking-p
                 final-consistency-checking-p
                 same-as-only-p
                 candidate-individuals
                 binding-validator))
               (:returns
                (:list :abox)
                "A list of objects of the following type: An anonymous ABox, a list of ABox assertions, e.g. @ic{((instance i C) (related i j R) (instance j D))}")
               (:arguments
                (a
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (b
                 :abox
                 "An anonymous ABox, a list of ABox assertions, e.g. @ic{((instance i C) (related i j R) (instance j D))}")
                (also-unmapped-differences-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (remove-redundant-diffs-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (optimizer-max-plans
                 :non-negative-integer
                 "A non-negative integer (possibly 0)")
                (known-correspondances
                 (:list (:list :abox-individual :abox-individual))
                 "A list of objects of the following type: A list of length 2 with objects of the following types: An ABox individual, e.g. @ic{betty}, An ABox individual, e.g. @ic{betty}")
                (auto-correspondances-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (only-difference-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (full-tuples-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (show-score-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (equi-order-by
                 (:one-of :prefer-old-inds :prefer-new-inds)
                 "One of the following symbols: @ic{:prefer-old-inds, :prefer-new-inds}")
                (remove-implied-concept-assertions-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (remove-common-assertions-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (common-assertions-as-strict-atoms-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (map-new-inds-to-new-inds-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (only-best-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (order-by
                 (:one-of :new-paper-fn :cae :cae2 :rasouli-paper-fn)
                 "One of the following symbols: @ic{:new-paper-fn, :cae, :cae2, :rasouli-paper-fn}")
                (reverse-order-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (ensure-permutations-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (how-many :non-negative-integer
                          "A non-negative integer (possibly 0)")
                (simple-result-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (runtime-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (final-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (same-as-only-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (candidate-individuals
                 (:list :abox-individual)
                 "A list of objects of the following type: An ABox individual, e.g. @ic{betty}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title clear-all-documentation)
               (:label clear-all-documentation)
               (:type :function)
               (:in-sections all-functions doc)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title check-ontology)
               (:label check-ontology)
               (:type :function)
               (:in-sections all-functions explanations owl-interface)
               (:protected t)
               (:signature (filename &key verbose explain-all n))
               (:returns)
               (:arguments
                (filename
                 :filename
                 "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}")
                (verbose
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (explain-all
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (n :non-negative-integer
                   "A non-negative integer (possibly 0)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title check-nrql-subscriptions)
               (:label check-nrql-subscriptions)
               (:type :function)
               (:in-sections all-functions publish-subscribe)
               (:protected t)
               (:signature (&optional abox))
               (:returns
                (:list)
                "A list of objects of the following type: The symbol nil.")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title check-for-updates)
               (:label check-for-updates)
               (:type :function)
               (:in-sections all-functions updates)
               (:protected t)
               (:signature (&key url))
               (:returns)
               (:arguments
                (url
                 :url
                 "A URL string, e.g. @ic{\"http://www.example-ontology.com\"}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title check-concept-coherence)
               (:label check-concept-coherence)
               (:type :function)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (concept &optional tbox))
               (:returns
                (:list (:list :concept-name) (:list :role))
                "A list of length 2 with objects of the following types: A list of objects of the following type: A concept name, e.g. @ic{woman}, A list of objects of the following type: A role, e.g. @ic{has-child}")
               (:arguments
                (concept
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title check-abox-consistency-before-querying)
               (:label check-abox-consistency-before-querying)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description
                "Advises nRQL to check the ABox consistency before a query is executed; see also argument @arg{check-abox-consistency-p} of function @funref{execute-query}. Queries on inconsistent ABoxes are not meaningful")
               (:remarks nil)
               (:see-also
                describe-query-processing-mode
                with-nrql-settings)
               (:examples))

(add-doc-entry (:title cheap-rules)
               (:label cheap-rules)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :nrql-rule-id)
                "A list of objects of the following type: A nRQL rule ID, e.g. @ic{:rule-1}")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of cheap-queries)
               (:examples))

(add-doc-entry (:title cheap-queries)
               (:label cheap-queries)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :nrql-query-id)
                "A list of objects of the following type: A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Returns a list of (the IDs of) the queries that satisfy @funref{cheap-query-p}. Note that this is a subset of the set of active queries (see @funref{active-queries}")
               (:remarks nil)
               (:see-also)
               (:query-equivalent-of cheap-rules)
               (:examples))

(add-doc-entry (:title apply-rule-under-premise1)
               (:label apply-rule-under-premise1)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for racer-apply-rule-under-premise1))

(add-doc-entry (:title apply-rule-under-premise)
               (:label apply-rule-under-premise)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for racer-apply-rule-under-premise))

(add-doc-entry (:title apply-rule)
               (:label apply-rule)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for racer-apply-rule))

(add-doc-entry (:title answer-tbox-query1)
               (:label answer-tbox-query1)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for racer-answer-tbox-query))

(add-doc-entry (:title answer-tbox-query)
               (:label answer-tbox-query)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for racer-answer-tbox-query))

(add-doc-entry (:title answer-query1)
               (:label answer-query1)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for racer-answer-query1))

(add-doc-entry (:title answer-query-under-premise1)
               (:label answer-query-under-premise1)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for racer-answer-query-under-premise1))

(add-doc-entry (:title answer-query-under-premise)
               (:label answer-query-under-premise)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for racer-answer-query-under-premise))

(add-doc-entry (:title answer-query)
               (:label answer-query)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for racer-answer-query))

(add-doc-entry (:title allow-overloaded-definitions)
               (:label allow-overloaded-definitions)
               (:type :function)
               (:in-sections all-functions defined-queries abduction)
               (:protected t)
               (:signature nil)
               (:returns
                (:one-of :okay-allowing-overloaded-definitions)
                "The symbol :okay-allowing-overloaded-definitions")
               (:arguments)
               (:description
                "Allow multiple defined queries with same name and arity")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title all-substrates)
               (:label all-substrates)
               (:type :function)
               (:in-sections all-functions substrate-management)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :substrate-name)
                "A list of objects of the following type: The name of a substrate, e.g. @ic{geo-example-rcc}")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Returns a list of all substrates. A substrate is the internal (ABox) representation that nRQL needs in order to answer queries. A substrate has a type and a corresponding Racer ABox. For each ABox and type there is at most one substrate")
               (:remarks "")
               (:see-also reset-all-substrates describe-all-substrates)
               (:examples))

(add-doc-entry (:title all-same-as-assertions)
               (:label all-same-as-assertions)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:protected t)
               (:signature (&optional abox &key count))
               (:returns
                (:list :same-as-assertion)
                "A list of objects of the following type: A same-as equality assertion, e.g. @ic{(same-as santa-claus weihnachtsmann)}")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (count :boolean
                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title all-rules)
               (:label all-rules)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :nrql-rule-id)
                "A list of objects of the following type: A nRQL rule ID, e.g. @ic{:rule-1}")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of all-queries)
               (:examples))

(add-doc-entry (:title all-queries)
               (:label all-queries)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :nrql-query-id)
                "A list of objects of the following type: A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Returns a list of (the IDs of) all queries")
               (:remarks nil)
               (:see-also)
               (:query-equivalent-of all-rules)
               (:examples))

(add-doc-entry (:title all-different-from-assertions)
               (:label all-different-from-assertions)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:protected t)
               (:signature (&optional abox &key count))
               (:returns
                (:list :different-from-assertion)
                "A list of objects of the following type: A different-from assertion, e.g. @ic{(different-from betty charles)}")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (count :boolean
                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title add-rule-consequences-automatically)
               (:label add-rule-consequences-automatically)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description
                "Rule consequences / ABox assertions generated by a rule application can be added automatically after the rule has terminated. Use this function to put nRQL (globally) into that mode. Note that in tuple-at-a-time mode this applies to the chosen sets of rule consequences (see @funref{choose-current-set-of-rule-consequences}), whereas in set-at-a-time mode this applies to all sets of rule consequences. In case rule consequences are not automatically, the functino @funref{add-chosen-sets-of-rule-consequences} can be called manually, but only once. See also argument @arg{add-rule-consequences-p} of function @funref{execute-rule}")
               (:remarks nil)
               (:see-also
                describe-query-processing-mode
                with-nrql-settings
                process-tuple-at-a-time
                process-set-at-a-time
                execute-rule
                get-current-set-of-rule-consequences
                choose-current-set-of-rule-consequences
                add-chosen-sets-of-rule-consequences)
               (:examples))

(add-doc-entry (:title add-role-assertions-for-datatype-properties)
               (:label add-role-assertions-for-datatype-properties)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description
                "Constraint query atoms referring OWL datatype properties only work on OWL KBs if some additional auxiliary ABox assertions are added to the ABox created from the OWL file. Use this function to ensure that nRQL adds these additional assertions. Note that this function must be called before the first nRQL query to that OWL KB is posed")
               (:remarks nil)
               (:see-also
                describe-query-processing-mode
                set-nrql-mode
                with-nrql-settings)
               (:examples))

(add-doc-entry (:title add-missing-top-conjuncts)
               (:label add-missing-top-conjuncts)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title add-doc-phrase1)
               (:label add-doc-phrase1)
               (:type :function)
               (:in-sections all-functions doc)
               (:corresponding-macro add-doc-phrase)
               (:protected t)
               (:signature (label string))
               (:returns)
               (:arguments
                (label :keyword "A keyword symbol")
                (string :string "A string, e.g. @ic{\"hello\"}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title add-doc-image-file1)
               (:label add-doc-image-file1)
               (:type :function)
               (:in-sections all-functions doc)
               (:corresponding-macro add-doc-image-file)
               (:protected t)
               (:signature (url type pathname))
               (:returns)
               (:arguments
                (url
                 :url
                 "A URL string, e.g. @ic{\"http://www.example-ontology.com\"}")
                (type
                 (:one-of :gif-image :jpeg-image)
                 "One of the following symbols: @ic{:gif-image, :jpeg-image}")
                (pathname :filename
                          "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title add-doc-image-data1)
               (:label add-doc-image-data1)
               (:type :function)
               (:in-sections all-functions doc)
               (:corresponding-macro add-doc-image-data)
               (:protected t)
               (:signature (url type bytes))
               (:returns)
               (:arguments
                (url
                 :url
                 "A URL string, e.g. @ic{\"http://www.example-ontology.com\"}")
                (type
                 (:one-of :gif-image :jpeg-image)
                 "One of the following symbols: @ic{:gif-image, :jpeg-image}")
                (bytes
                 (:list :byte)
                 "A list of objects of the following type: A byte in decimal notation (a non-negative integer between 0 and 255)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title add-doc-image-data-from-file1)
               (:label add-doc-image-data-from-file1)
               (:type :function)
               (:in-sections all-functions doc)
               (:corresponding-macro add-doc-image-data-from-file)
               (:protected t)
               (:signature (url type pathname))
               (:returns)
               (:arguments
                (url
                 :url
                 "A URL string, e.g. @ic{\"http://www.example-ontology.com\"}")
                (type
                 (:one-of :gif-image :jpeg-image)
                 "One of the following symbols: @ic{:gif-image, :jpeg-image}")
                (pathname :filename
                          "A filename string, e.g. @ic{\"/home/mi.wessel/ontology.racer\"}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title add-doc-entry1)
               (:label add-doc-entry1)
               (:type :function)
               (:in-sections all-functions doc)
               (:corresponding-macro add-doc-entry)
               (:protected t)
               (:signature nil)
               (:returns)
               (:arguments)
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title active-rules)
               (:label active-rules)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :nrql-rule-id)
                "A list of objects of the following type: A nRQL rule ID, e.g. @ic{:rule-1}")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Returns a list of (the IDs of) all rules which satisfy @funref{rule-active-p}")
               (:remarks nil)
               (:see-also ready-rules processed-rules)
               (:examples))

(add-doc-entry (:title active-queries)
               (:label active-queries)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :nrql-query-id)
                "A list of objects of the following type: A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Returns a list of (the IDs of) all queries which satisfy @funref{query-active-p}")
               (:remarks nil)
               (:see-also ready-queries processed-queries)
               (:examples))

(add-doc-entry (:title activate-defined-query)
               (:label activate-defined-query)
               (:type :function)
               (:in-sections all-functions defined-queries)
               (:protected t)
               (:signature (name arity &key pos tbox))
               (:returns (:one-of :okay) "The symbol :okay")
               (:arguments
                (name :nrql-defined-query-name
                      "A symbol, the name of a nRQL defined query")
                (arity
                 :non-negative-integer
                 "A non-negative integer (possibly 0)")
                (pos
                 :non-negative-integer
                 "A non-negative integer (possibly 0)")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title accurate-rules)
               (:label accurate-rules)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :nrql-rule-id)
                "A list of objects of the following type: A nRQL rule ID, e.g. @ic{:rule-1}")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of accurate-queries)
               (:examples))

(add-doc-entry (:title accurate-queries)
               (:label accurate-queries)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :nrql-query-id)
                "A list of objects of the following type: A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Returns a list of (the IDs of) the queries that satisfy @funref{query-accurate-p}. Note that this is a subset of the set of processed queries (see @funref{processed-queries}")
               (:remarks nil)
               (:see-also)
               (:query-equivalent-of accurate-rules)
               (:examples))

(add-doc-entry (:title abox-entails-abox-p)
               (:label abox-entails-abox-p)
               (:type :function)
               (:in-sections all-functions abox-ask)
               (:protected t)
               (:signature (a b &optional tbox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (a
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (b
                 :abox
                 "An anonymous ABox, a list of ABox assertions, e.g. @ic{((instance i C) (related i j R) (instance j D))}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title abort-all-rules)
               (:label abort-all-rules)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:one-of :okay-all-rules-aborted)
                "The symbol :okay-all-rules-aborted")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of abort-all-queries)
               (:examples))

(add-doc-entry (:title abort-all-queries)
               (:label abort-all-queries)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns)
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Applies @funref{abort-query} to @funref{active-queries}")
               (:remarks nil)
               (:see-also abort-query execute-query)
               (:query-equivalent-of abort-all-rules)
               (:examples))

(add-doc-entry (:title unsubscribe-from)
               (:label unsubscribe-from)
               (:type :function)
               (:in-sections all-functions publish-subscribe)
               (:protected t)
               (:signature
                (query subscriber-name
                       &key
                       ip
                       port
                       use-simplified-protocol-p))
               (:returns)
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (subscriber-name :symbol "A symbol")
                (ip
                 :ip-address
                 "A TCP-IP IP address as a string, e.g. @ic{\"192.168.0.1\"}")
                (port :ip-port "A TCP-IP port, e.g. @ic{8080}")
                (use-simplified-protocol-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title unapplicable-rules)
               (:label unapplicable-rules)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :nrql-rule-id)
                "A list of objects of the following type: A nRQL rule ID, e.g. @ic{:rule-1}")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Returns (a list of) all rules which satisfy @funref{rule-unapplicable-p}")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title subscribe-to)
               (:label subscribe-to)
               (:type :function)
               (:in-sections all-functions publish-subscribe)
               (:protected t)
               (:signature
                (query subscriber-name
                       &key
                       ip
                       port
                       use-simplified-protocol-p))
               (:returns)
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (subscriber-name :symbol "A symbol")
                (ip
                 :ip-address
                 "A TCP-IP IP address as a string, e.g. @ic{\"192.168.0.1\"}")
                (port :ip-port "A TCP-IP port, e.g. @ic{8080}")
                (use-simplified-protocol-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title show-qbox-for-abox)
               (:label show-qbox-for-abox)
               (:type :function)
               (:in-sections all-functions query-reasoning)
               (:protected t)
               (:signature (&optional abox definitions-p))
               (:returns)
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (definitions-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Prints the DAG of the QBox for the @arg{abox} as a tree on STDOUT")
               (:remarks nil)
               (:see-also
                get-dag-of-qbox-for-abox
                get-nodes-in-qbox-for-abox)
               (:examples))

(add-doc-entry (:title rule-waiting-p)
               (:label rule-waiting-p)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (query))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of query-waiting-p)
               (:examples))

(add-doc-entry (:title rule-unapplicable-p)
               (:label rule-unapplicable-p)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (query))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description "Negation of @funref{rule-applicable-p}")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title rule-terminated-p)
               (:label rule-terminated-p)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for rule-processed-p))

(add-doc-entry (:title rule-sleeping-p)
               (:label rule-sleeping-p)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for rule-waiting-p))

(add-doc-entry (:title rule-running-p)
               (:label rule-running-p)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (query))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of query-running-p)
               (:examples))

(add-doc-entry (:title rule-ready-p)
               (:label rule-ready-p)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (query))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of query-ready-p)
               (:examples))

(add-doc-entry (:title rule-processed-p)
               (:label rule-processed-p)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (query))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of query-processed-p)
               (:examples))

(add-doc-entry (:title rule-prepared-p)
               (:label rule-prepared-p)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for rule-ready-p))

(add-doc-entry (:title rule-consistent-p)
               (:label rule-consistent-p)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (query &key))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of :query-consistent-p)
               (:examples))

(add-doc-entry (:title rule-consequence)
               (:label rule-consequence)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (query))
               (:returns
                (:or (:one-of :not-found) :rule-righthand-side)
                "One of the following:  The symbol :not-found, A rule body, the antecedence, e.g. @ic{(and (?x woman) (?x ?y has-child))}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Returns the (possibly rewritten) rule consequence of the rule @arg{id}")
               (:remarks nil)
               (:see-also original-rule-consequence rule-antecedence)
               (:rule-equivalent-of query-head)
               (:examples))

(add-doc-entry (:title rule-applicable-p)
               (:label rule-applicable-p)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (query))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Checks whether rule @arg{id} is applicable, i.e. its antecedence is true. Thus, its consequence might produce new ABox assertions (or delete existing ABox assertions)")
               (:remarks
                "A rule can only be applicable if it is either ready (see @funref{rule-ready-p}) or processed (see @funref{rule-processed-p}). Rules which are already active (see @funref{rule-active-p}) are not applicable. If an already processed rule is found to be applicable, then it is also automatically reprepared, see funref{reprepare-rule} so it can immediately be fired again (see @funref{execute-rule})")
               (:see-also
                rule-unapplicable-p
                applicable-rules
                unapplicable-rules
                execute-rule)
               (:examples))

(add-doc-entry (:title rule-antecedence)
               (:label rule-antecedence)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (query))
               (:returns
                (:or (:one-of :not-found) :rule-lefthand-side)
                "One of the following:  The symbol :not-found, A rule head, the rule consequence, e.g. @ic{(?x mother)}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Returns the (possibly rewritten) antecedence of the rule @arg{id}")
               (:remarks nil)
               (:see-also original-rule-antecedence rule-consequence)
               (:rule-equivalent-of query-body)
               (:examples))

(add-doc-entry (:title rule-active-p)
               (:label rule-active-p)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (query))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of query-active-p)
               (:examples))

(add-doc-entry (:title rule-accurate-p)
               (:label rule-accurate-p)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (query))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of query-accurate-p)
               (:examples))

(add-doc-entry (:title reprepare-rule)
               (:label reprepare-rule)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (query))
               (:returns
                (:or :nrql-rule-id-and-status (:one-of :not-found))
                "One of the following:  A nRQL rule id plus status description, e.g. @ic{(:RULE-1 :READY-TO-RUN)}, The symbol :not-found")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of reprepare-query)
               (:examples))

(add-doc-entry (:title reprepare-query)
               (:label reprepare-query)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (query &key to-substrate copy-p new-id))
               (:returns
                (:or (:one-of :not-found) :nrql-query-id-and-status)
                "One of the following:  The symbol :not-found, A nRQL query id plus status description, e.g. @ic{(:QUERY-1 :READY-TO-RUN)}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (to-substrate
                 :substrate-name
                 "The name of a substrate, e.g. @ic{geo-example-rcc}")
                (copy-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (new-id
                 :nrql-query-id
                 "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Reprepares an already processed query (see @funref{query-processed-p}) and makes it ready for execution (via @funref{execute-query}) again (see @funref{query-ready-p})")
               (:remarks "Note that the query cannot be altered")
               (:see-also)
               (:query-equivalent-of reprepare-rule)
               (:examples))

(add-doc-entry (:title reexecute-rule)
               (:label reexecute-rule)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (query))
               (:returns
                (:or :nrql-rule-result (:one-of :not-found))
                "One of the following:  An anonymous ABox, e.g. @ic{(((INSTANCE I MOTHER) (RELATED I J HAS-CHILD) (INSTANCE J CHILD)))}, The symbol :not-found")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of reexecute-query)
               (:examples))

(add-doc-entry (:title reexecute-query)
               (:label reexecute-query)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (query))
               (:returns
                (:or (:one-of :not-found) :nrql-query-answer)
                "One of the following:  The symbol :not-found, A nRQL query answer, e.g. @ic{(((?X I) (?Y J)) ((?X I) (?Y I)) ((?X A) (?Y B)))}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Reprepares and executes an already processed query (see @funref{query-processed-p})")
               (:remarks
                "Note that the query cannot be altered, but can be executed using different settings, since @arg{args} are passed to @funref{execute-query}")
               (:see-also reprepare-query)
               (:query-equivalent-of reexecute-rule)
               (:examples))

(add-doc-entry (:title query-waiting-p)
               (:label query-waiting-p)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (query))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Checks whether the query @arg{id} is active and waiting (sleeping), i.e., its query answering process (thread) is currently not consuming CPU cycles")
               (:remarks "Use @funref{abort-query} to abort the query")
               (:see-also
                waiting-queries
                query-active-p
                query-running-p)
               (:query-equivalent-of rule-waiting-p)
               (:examples))

(add-doc-entry (:title query-terminated-p)
               (:label query-terminated-p)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for query-processed-p))

(add-doc-entry (:title query-subscribers)
               (:label query-subscribers)
               (:type :function)
               (:in-sections all-functions publish-subscribe)
               (:protected t)
               (:signature (query))
               (:returns
                (:list :symbol)
                "A list of objects of the following type: A symbol")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title query-sleeping-p)
               (:label query-sleeping-p)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for query-waiting-p))

(add-doc-entry (:title query-running-p)
               (:label query-running-p)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (query))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Checks whether query @arg{id} is active and running, i.e., its query answering process (thread) is currently consuming CPU cycles")
               (:remarks "Use @funref{abort-query} to abort the query")
               (:see-also
                running-queries
                query-active-p
                query-waiting-p)
               (:query-equivalent-of rule-running-p)
               (:examples))

(add-doc-entry (:title query-ready-p)
               (:label query-ready-p)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (query))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Checks whether query @arg{id} is ready for execution")
               (:remarks
                "Use @funref{execute-query} to start the query")
               (:see-also ready-queries)
               (:query-equivalent-of rule-ready-p)
               (:examples))

(add-doc-entry (:title query-processed-p)
               (:label query-processed-p)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (query))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Checks whether the query @arg{id} is processed and terminated, i.e., its query answering process (thread) has died")
               (:remarks
                "Use @funref{reprepare-query} to reprepare the query, @funref{reexecute-query} to reexecute it")
               (:see-also
                processed-queries
                query-active-p
                query-prepared-p)
               (:query-equivalent-of rule-processed-p)
               (:examples))

(add-doc-entry (:title query-prepared-p)
               (:label query-prepared-p)
               (:type :synonym-function)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for query-ready-p))

(add-doc-entry (:title query-parents)
               (:label query-parents)
               (:type :function)
               (:in-sections all-functions query-reasoning)
               (:protected t)
               (:signature (query))
               (:returns
                (:or (:one-of :not-found) (:list :nrql-query-id))
                "One of the following:  The symbol :not-found, A list of objects of the following type: A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Returns the IDs of the parent queries of the query @arg{id} from the QBox. See Section 6.2.8 in the User Guide")
               (:remarks nil)
               (:see-also
                query-children
                query-equivalents
                query-ancestors
                query-descendants)
               (:examples))

(add-doc-entry (:title query-head)
               (:label query-head)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (query))
               (:returns
                (:or (:one-of :not-found) (:list :nrql-query-head))
                "One of the following:  The symbol :not-found, A list of objects of the following type: A nRQL query head, e.g. @ic{(?x (told-value (age ?x)))}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Returns the (possibly rewritten) head of the query @arg{id}")
               (:remarks
                "Note that individuals in the original query head are usually yreplaced by representative variables")
               (:see-also original-query-head query-body)
               (:query-equivalent-of rule-consequence)
               (:examples))

(add-doc-entry (:title query-equivalents)
               (:label query-equivalents)
               (:type :function)
               (:in-sections all-functions query-reasoning)
               (:protected t)
               (:signature (query))
               (:returns
                (:or (:one-of :not-found) (:list :nrql-query-id))
                "One of the following:  The symbol :not-found, A list of objects of the following type: A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Returns the IDs of the synonym / equivalent queries of the query @arg{id} from the QBox. See Section 6.2.8 in the User Guide")
               (:remarks nil)
               (:see-also
                query-parents
                query-equivalents
                query-ancestors
                query-descendants)
               (:examples))

(add-doc-entry (:title query-equivalent-p)
               (:label query-equivalent-p)
               (:type :function)
               (:in-sections all-functions query-reasoning)
               (:protected t)
               (:signature (a b &key))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (a
                 :nrql-query-id
                 "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (b
                 :nrql-query-id
                 "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Checks whether the two queries @arg{id1} and @arg{id2} mutually subsumes each other")
               (:remarks nil)
               (:see-also query-entails-p)
               (:examples))

(add-doc-entry (:title query-entails-p)
               (:label query-entails-p)
               (:type :function)
               (:in-sections all-functions query-reasoning)
               (:protected t)
               (:signature (a b &key))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (a
                 :nrql-query-id
                 "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (b
                 :nrql-query-id
                 "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Checks whether query @arg{id1} entails (is more specific than) query @arg{id2}")
               (:remarks nil)
               (:see-also query-consistent-p rule-consistent-p)
               (:examples))

(add-doc-entry (:title query-descendants)
               (:label query-descendants)
               (:type :function)
               (:in-sections all-functions query-reasoning)
               (:protected t)
               (:signature (query))
               (:returns
                (:list :nrql-query-id)
                "A list of objects of the following type: A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Like @funref{query-parents}, but the ancestors (i.e., all subsuming resp. entailed queries) from the QBOx are returned")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title query-consistent-p)
               (:label query-consistent-p)
               (:type :function)
               (:in-sections all-functions query-reasoning)
               (:protected t)
               (:signature (query &key))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Checks the consistency of the query @arg{id}")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title query-children)
               (:label query-children)
               (:type :function)
               (:in-sections all-functions query-reasoning)
               (:protected t)
               (:signature (query))
               (:returns
                (:or (:one-of :not-found) (:list :nrql-query-id))
                "One of the following:  The symbol :not-found, A list of objects of the following type: A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Returns the IDs of the children queries of the query @arg{id} from the QBox. See Section 6.2.8 in the User Guide")
               (:remarks nil)
               (:see-also
                query-parents
                query-equivalents
                query-ancestors
                query-descendants)
               (:examples))

(add-doc-entry (:title query-body)
               (:label query-body)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (query))
               (:returns
                (:or (:one-of :not-found) :nrql-query-body)
                "One of the following:  The symbol :not-found, A nRQL query body (antecedence), e.g. @ic{(and (?x C) (?x ?y R) (?y D))}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Returns the (possibly rewritten) body of the query @arg{id}")
               (:remarks nil)
               (:see-also original-query-body query-head)
               (:query-equivalent-of rule-antecedence)
               (:examples))

(add-doc-entry (:title query-ancestors)
               (:label query-ancestors)
               (:type :function)
               (:in-sections all-functions query-reasoning)
               (:protected t)
               (:signature (query))
               (:returns
                (:list :nrql-query-id)
                "A list of objects of the following type: A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Like @funref{query-parents}, but the ancestors (i.e., all subsuming resp. entailed queries) from the QBOx are returned")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title query-active-p)
               (:label query-active-p)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (query))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Checks whether query @arg{id} is active. A query is active iff a corresponding query answering thread exists")
               (:remarks
                "An active query can either be waiting (if it has been started in lazy mode, @funref{query-waiting-p}) or running (@funref{query-running-p}), until its process terminates or is manually aborted (see @funref{abort-query}), @funref{query-processed-p}")
               (:see-also
                active-queries
                query-waiting-p
                query-running-p)
               (:query-equivalent-of rule-active-p)
               (:examples))

(add-doc-entry (:title query-accurate-p)
               (:label query-accurate-p)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (query))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Determines whether the computed and stored answer of a processed query @funref{query-processed-p} is still accurate. The answer resp. processed query is called emph{accurate} iff the queried KB (TBox, ABox) has not changed since the query was executed. Thus, the answers of an accuarte query must not be recomputed. Inaccurate query answers can be reecomputed see @funref{reexecute-query}")
               (:remarks nil)
               (:see-also accurate-queries)
               (:query-equivalent-of rule-accurate-p)
               (:examples))

(add-doc-entry (:title original-rule-consequence)
               (:label original-rule-consequence)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (query))
               (:returns
                :nrql-rule-consequence
                "A nRQL rule consequence, a generalized ABox, e.g. @ic{((instance ?x mother) (?X ?y has-child))}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Like @funref{rule-consequence}, but the original consequence is returned")
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of original-query-head)
               (:examples))

(add-doc-entry (:title original-rule-antecedence)
               (:label original-rule-antecedence)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (query))
               (:returns
                :nrql-query-body
                "A nRQL query body (antecedence), e.g. @ic{(and (?x C) (?x ?y R) (?y D))}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Like @funref{rule-antecedence}, but the original antecedence is returned")
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of original-query-body)
               (:examples))

(add-doc-entry (:title original-query-head)
               (:label original-query-head)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (query))
               (:returns
                :nrql-query-head
                "A nRQL query head, e.g. @ic{(?x (told-value (age ?x)))}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Like @funref{query-head}, but the original head is returned")
               (:remarks nil)
               (:see-also)
               (:query-equivalent-of original-rule-consequence)
               (:examples))

(add-doc-entry (:title original-query-body)
               (:label original-query-body)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (query))
               (:returns
                :nrql-query-body
                "A nRQL query body (antecedence), e.g. @ic{(and (?x C) (?x ?y R) (?y D))}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Like @funref{query-body}, but the original body is returned")
               (:remarks nil)
               (:see-also)
               (:query-equivalent-of original-rule-antecedence)
               (:examples))

(add-doc-entry (:title next-tuple-available-p)
               (:label next-tuple-available-p)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (query))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Checks for the availability of the next answer tuple from a query")
               (:remarks
                "If this function returns @ic{ t}, then @funref{get-next-tuple} returns that tuple immediately (without computation delay; the API does not block)")
               (:see-also get-next-tuple)
               (:query-equivalent-of
                next-set-of-rule-consequences-available-p)
               (:examples))

(add-doc-entry (:title next-set-of-rule-consequences-available-p)
               (:label next-set-of-rule-consequences-available-p)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (query))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Checks for the availability of the next set of rule consequences")
               (:remarks
                "If this function returns @ic{ t}, then @funref{get-next-set-of-rule-consequences} returns that set immediately (without computation delay; the API does not block)")
               (:see-also get-next-set-of-rule-consequences)
               (:rule-equivalent-of next-tuple-available-p)
               (:examples))

(add-doc-entry (:title get-number-of-explanations)
               (:label get-number-of-explanations)
               (:type :function)
               (:in-sections all-functions abduction)
               (:protected t)
               (:signature (query &key dont-show-variables execute-p))
               (:returns
                :non-negative-integer
                "A non-negative integer (possibly 0)")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (dont-show-variables :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (execute-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title get-nodes-in-qbox-for-abox)
               (:label get-nodes-in-qbox-for-abox)
               (:type :function)
               (:in-sections all-functions query-reasoning)
               (:protected t)
               (:signature (&optional abox))
               (:returns
                (:list :nrql-query-id)
                "A list of objects of the following type: A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}"))
               (:description
                "Returns the DAG nodes (queries) of the QBox for the @arg{abox}")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title get-next-tuple)
               (:label get-next-tuple)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (query &key execute-p))
               (:returns
                (:or (:one-of :not-found) :nrql-answer-tuple)
                "One of the following:  The symbol :not-found, A nRQL answer tuple providing bindings to nRQL query variables, e.g. @ic{((?X I) (?Y J))}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (execute-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Gets the next tuple from query @arg{id}. The query must be on the list of @funref{active-queries} or @funref{processed-queries}. A ready (prepared) query can also be started (executed), see @arg{execute-p} argument. For rules, @funref{get-next-set-of-rule-consequences} must be used")
               (:remarks
                "If the query had been started in lazy tuple-at-a-time mode, then computation of the next tuple might eventually take some time and thus the function might not return immediately. However, if the query had been started in eager mode, then there is a chance that the next tuple (and probably some more tuples not yet requested) have already been pre-computed, and are thus already available. The function @funref{next-tuple-available-p} can be used to check for the availability of such (immediately available) tuples. Note that a query might still have tuples available, even if the query process (thread) has already terminated and thus the query is no longer active (the query already appears on the list of @funref{processed-queries}). This happens in the eager tuple-at-a-time mode")
               (:see-also
                next-tuple-available-p
                get-current-tuple
                get-next-n-remaining-tuples)
               (:examples))

(add-doc-entry (:title get-next-set-of-rule-consequences)
               (:label get-next-set-of-rule-consequences)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (query &key))
               (:returns
                (:or (:one-of :not-found) :abox)
                "One of the following:  The symbol :not-found, An anonymous ABox, a list of ABox assertions, e.g. @ic{((instance i C) (related i j R) (instance j D))}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Gets the next set of rule consequences of the rule @arg{id}. The rule must be on the list of @funref{active-rules} or @funref{processed-rules}. A rule can also be started (executed); use @arg{execute-p} argument")
               (:remarks
                "If the query had been started in lazy tuple-at-a-time mode, then computation of the next tuple might eventually take some time and thus the function might not return immediately. However, if the query had been started in eager mode, then there is a chance that the next tuple (and probably some more tuples not yet requested) have already been pre-computed, and are thus already available. The function @funref{next-tuple-available-p} can be used to check for the availability of such (immediately available) tuples. Note that a query might still have tuples available, even if the query process (thread) has already terminated and thus the query is no longer active (the query already appears on the list of @funref{processed-queries}). This happens in the eager tuple-at-a-time mode")
               (:see-also
                next-tuple-available-p
                get-current-tuple
                get-next-n-remaining-tuples)
               (:examples))

(add-doc-entry (:title get-next-n-remaining-tuples)
               (:label get-next-n-remaining-tuples)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (query &optional n &key execute-p))
               (:returns
                :nrql-query-answer
                "A nRQL query answer, e.g. @ic{(((?X I) (?Y J)) ((?X I) (?Y I)) ((?X A) (?Y B)))}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (n :non-negative-integer
                   "A non-negative integer (possibly 0)")
                (execute-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Like @funref{get-next-tuple}, but now the next @arg{n} remaining tuples are requested. Pass @ic{ nil} if you want all remaining tuples; see also @funref{get-all-remaining-tuples}")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title get-next-n-remaining-sets-of-rule-consequences)
               (:label get-next-n-remaining-sets-of-rule-consequences)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (query &optional n &key))
               (:returns
                (:list :abox)
                "A list of objects of the following type: An anonymous ABox, a list of ABox assertions, e.g. @ic{((instance i C) (related i j R) (instance j D))}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (n :non-negative-integer
                   "A non-negative integer (possibly 0)"))
               (:description
                "Like @funref{get-next-set-of-rule-consequences}, but now the next @arg{n} remaining sets are requested. Pass @ic{ nil} if you want all remaining sets; see also @funref{get-all-remaining-sets-of-rule-consequences}")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title get-explanations)
               (:label get-explanations)
               (:type :function)
               (:in-sections all-functions abduction)
               (:protected t)
               (:signature
                (query &key
                       from
                       to
                       only-best-p
                       order-by
                       reverse-order-p
                       equi-order-by
                       remove-marker-symbols-p
                       remove-entailed-explanations-p
                       new-inds-p
                       tuples-p
                       full-tuples-p
                       all-assertions-p
                       hypothesized-assertions-p
                       show-score-p
                       abox-entailment
                       ensure-permutations-p))
               (:returns)
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (from
                 :substrate-node
                 "A substrate node, a symbol, e.g. @ic{person1}")
                (to
                 :non-negative-integer
                 "A non-negative integer (possibly 0)")
                (only-best-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (order-by
                 (:one-of :new-paper-fn :cae :cae2 :rasouli-paper-fn)
                 "One of the following symbols: @ic{:new-paper-fn, :cae, :cae2, :rasouli-paper-fn}")
                (reverse-order-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (equi-order-by
                 (:one-of :prefer-old-inds :prefer-new-inds)
                 "One of the following symbols: @ic{:prefer-old-inds, :prefer-new-inds}")
                (remove-marker-symbols-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (remove-entailed-explanations-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (new-inds-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (tuples-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (full-tuples-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (all-assertions-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (hypothesized-assertions-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (show-score-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (abox-entailment
                 (:one-of :most-specific :most-general)
                 "One of the following symbols: @ic{:most-specific, :most-general}")
                (ensure-permutations-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title get-dag-of-qbox-for-abox)
               (:label get-dag-of-qbox-for-abox)
               (:type :function)
               (:in-sections all-functions query-reasoning)
               (:protected t)
               (:signature (&optional abox))
               (:returns)
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}"))
               (:description
                "Returns the DAG of the QBox for the @arg{abox} as a structured list")
               (:remarks nil)
               (:see-also
                show-qbox-for-abox
                get-nodes-in-qbox-for-abox)
               (:examples))

(add-doc-entry (:title get-current-tuple)
               (:label get-current-tuple)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (query))
               (:returns
                (:or (:one-of :not-found) :nrql-answer-tuple)
                "One of the following:  The symbol :not-found, A nRQL answer tuple providing bindings to nRQL query variables, e.g. @ic{((?X I) (?Y J))}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Returns the result of the last call to @funref{get-next-tuple} on the query @arg{id}")
               (:remarks nil)
               (:see-also get-next-tuple)
               (:examples))

(add-doc-entry (:title get-current-set-of-rule-consequences)
               (:label get-current-set-of-rule-consequences)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (query))
               (:returns
                (:or (:one-of :not-found) :abox)
                "One of the following:  The symbol :not-found, An anonymous ABox, a list of ABox assertions, e.g. @ic{((instance i C) (related i j R) (instance j D))}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Returns the result of the last call to @funref{get-next-set-of-rule-consequences} on the rule @arg{id}")
               (:remarks nil)
               (:see-also get-next-set-of-rule-consequences)
               (:examples))

(add-doc-entry (:title get-chosen-sets-of-rule-consequences)
               (:label get-chosen-sets-of-rule-consequences)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (query))
               (:returns
                (:or (:one-of :not-found) (:list :abox))
                "One of the following:  The symbol :not-found, A list of objects of the following type: An anonymous ABox, a list of ABox assertions, e.g. @ic{((instance i C) (related i j R) (instance j D))}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Returns the chosen (selected) sets of rule consequences of the rule @arg{id}. These assertions will be added to the ABox if @funref{add-chosen-sets-of-rule-consequences} is called on that rule")
               (:remarks nil)
               (:see-also
                choose-current-set-of-rule-consequences
                add-chosen-sets-of-rule-consequences)
               (:examples))

(add-doc-entry (:title get-answer)
               (:label get-answer)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (query &key dont-show-variables execute-p))
               (:returns
                (:or (:one-of :not-found) :nrql-query-answer)
                "One of the following:  The symbol :not-found, A nRQL query answer, e.g. @ic{(((?X I) (?Y J)) ((?X I) (?Y I)) ((?X A) (?Y B)))}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (dont-show-variables :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (execute-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Gets (resp. forces the computation of) the complete answer set (result) of a query or the set of conclusions of a rule, independently if the query resp. rule had been in tuple- or set-at-a-time mode. The query or rule must be active (see @funref{query-active-p}, @funref{rule-active-p}, @funref{active-queries}, @funref{active-rules}) or already processed (see @funref{query-processed-p}, @funref{rule-processed-p}, @funref{processed-queries}, @funref{processed-rules})")
               (:remarks
                "Can be called an arbitrary number of times on a query or rule. The answer is stored in the query resp. rule object and is thus not recomputed if @ic{ get-answer} is called. You can check with @funref{query-accurate-p} (resp. @funref{rule-accurate-p}) whether the stored answer is still valid. See also the value of @funref{describe-query}. In case of a rule, the rule consequences can be added with @funref{add-chosen-sets-of-rule-consequences}. Note that the query or rule named @arg{id} must be on the list of active or processed queries (see @funref{active-queries}, @funref{processed-queries}), otherwise @ic{ :NOT-FOUND} is returned. The tuples are actually computed by repeated calls to @funref{get-next-tuple}. Thus, also special tokens (markers) returned by @funref{get-next-tuple} might appear in the answer")
               (:see-also
                get-next-tuple
                get-next-n-remaining-tuples
                add-chosen-sets-of-rule-consequences
                active-queries
                processed-queries)
               (:examples))

(add-doc-entry (:title get-all-remaining-tuples)
               (:label get-all-remaining-tuples)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (query &key execute-p))
               (:returns
                :nrql-query-answer
                "A nRQL query answer, e.g. @ic{(((?X I) (?Y J)) ((?X I) (?Y I)) ((?X A) (?Y B)))}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (execute-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Like @funref{get-next-n-remaining-tuples} with @arg{n} = @ic{ nil}")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title get-all-remaining-sets-of-rule-consequences)
               (:label get-all-remaining-sets-of-rule-consequences)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (query &key))
               (:returns
                :nrql-rule-result
                "An anonymous ABox, e.g. @ic{(((INSTANCE I MOTHER) (RELATED I J HAS-CHILD) (INSTANCE J CHILD)))}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Like @funref{get-next-n-remaining-sets-of-rule-consequences} with @arg{n} = @ic{ nil}")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title expensive-rule-p)
               (:label expensive-rule-p)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (query))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of expensive-query-p)
               (:examples))

(add-doc-entry (:title expensive-query-p)
               (:label expensive-query-p)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (query))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "If an active query is not cheap @funref{cheap-query-p}, then it is expensive; thus, emph{phase 2} has started")
               (:remarks nil)
               (:see-also)
               (:query-equivalent-of expensive-rule-p)
               (:examples))

(add-doc-entry (:title execute-rule)
               (:label execute-rule)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (query &key))
               (:returns
                (:or (:one-of :not-found) (:list :abox))
                "One of the following:  The symbol :not-found, A list of objects of the following type: An anonymous ABox, a list of ABox assertions, e.g. @ic{((instance i C) (related i j R) (instance j D))}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description "See @funref{execute-query}")
               (:remarks
                "The rule has to be prepared (ready) before it can be executed, see @funref{rule-ready-p}, @funref{prepared-rules}. Note that rules cannot be execute in eager tuple-at-a-time mode")
               (:see-also
                racer-prepare-rule
                get-answer
                prepare-nrql-engine)
               (:rule-equivalent-of :execute-query)
               (:examples))

(add-doc-entry (:title execute-query)
               (:label execute-query)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature
                (query &key
                       dont-add-abox-duplicates-p
                       remove-duplicates-p
                       two-phase-processing-p
                       deliver-phase-two-warning-tokens-p
                       deliver-kb-has-changed-warning-tokens-p
                       add-rule-consequences-p
                       continuation-based-instance-retrieval-p
                       told-information-reasoning-p
                       final-consistency-checking-p
                       runtime-consistency-checking-p
                       verbose-p
                       dont-show-variables
                       dont-show-head-projection-operators-p
                       dont-show-lambdas-p
                       how-many
                       only-new-tuples-p
                       timeout
                       proactive-tuple-computation-p
                       tuple-at-a-time-p
                       use-individual-synonyms-p
                       check-abox-consistency-p
                       ensure-tbox-classification-p
                       initial-abox-mirroring-p
                       initial-role-assertion-mirroring-p
                       classify-concepts-in-instance-assertions-p
                       exclude-permutations-p
                       record-explanations-p))
               (:returns
                (:or (:one-of :not-found) :nrql-query-answer)
                "One of the following:  The symbol :not-found, A nRQL query answer, e.g. @ic{(((?X I) (?Y J)) ((?X I) (?Y I)) ((?X A) (?Y B)))}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (dont-add-abox-duplicates-p :boolean
                                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (remove-duplicates-p :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (two-phase-processing-p :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (deliver-phase-two-warning-tokens-p :boolean
                                                    "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (deliver-kb-has-changed-warning-tokens-p :boolean
                                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (add-rule-consequences-p :boolean
                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (continuation-based-instance-retrieval-p :boolean
                                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (told-information-reasoning-p :boolean
                                              "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (final-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (runtime-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (verbose-p :boolean
                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-variables :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-head-projection-operators-p :boolean
                                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-lambdas-p :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (how-many :non-negative-integer
                          "A non-negative integer (possibly 0)")
                (only-new-tuples-p :boolean
                                   "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (timeout :non-negative-integer
                         "A non-negative integer (possibly 0)")
                (proactive-tuple-computation-p :boolean
                                               "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (tuple-at-a-time-p :boolean
                                   "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-individual-synonyms-p :boolean
                                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (check-abox-consistency-p :boolean
                                          "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (ensure-tbox-classification-p :boolean
                                              "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (initial-abox-mirroring-p :boolean
                                          "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (initial-role-assertion-mirroring-p :boolean
                                                    "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (classify-concepts-in-instance-assertions-p :boolean
                                                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (exclude-permutations-p :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (record-explanations-p :boolean
                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Sets up and starts a query answering process (thread) for the prepared (ready) query @arg{id}. The query answering process prepares the substrate for query answering if it has not been prepared yet (see @funref{prepare-nrql-engine}) before query answering starts on that substrate. In set-at-a-time mode, automatically calls @funref{get-answer} and returns the answer")
               (:remarks
                "The query has to be prepared (ready) before it can be executed, see @funref{query-ready-p}, @funref{prepared-queries}. If no values for the listed keyword arguments are specified, then either the lexical settings established by a surrounding @funref{with-nrql-settings} or the currently active global settings (see @funref{describe-query-processing-mode}) will be used; this is documents as ``default by environment'' in the argument lists. Note that also the keyword arguments accepted by @funref{get-answer} are accepted and passed through to @funref{get-answer} with @arg{args}")
               (:see-also
                racer-prepare-query
                get-answer
                prepare-nrql-engine)
               (:examples
                ("Example one" (racer-prepare-query '(?x) '(?x woman)))
                ("Example two" (execute-query :last))))

(add-doc-entry (:title execute-or-reexecute-rule)
               (:label execute-or-reexecute-rule)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (query))
               (:returns
                (:or :nrql-rule-result (:one-of :not-found))
                "One of the following:  An anonymous ABox, e.g. @ic{(((INSTANCE I MOTHER) (RELATED I J HAS-CHILD) (INSTANCE J CHILD)))}, The symbol :not-found")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of execute-or-reexecute-query)
               (:examples))

(add-doc-entry (:title execute-or-reexecute-query)
               (:label execute-or-reexecute-query)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature
                (query &key
                       dont-add-abox-duplicates-p
                       remove-duplicates-p
                       two-phase-processing-p
                       deliver-phase-two-warning-tokens-p
                       deliver-kb-has-changed-warning-tokens-p
                       add-rule-consequences-p
                       continuation-based-instance-retrieval-p
                       told-information-reasoning-p
                       final-consistency-checking-p
                       runtime-consistency-checking-p
                       verbose-p
                       dont-show-variables
                       dont-show-head-projection-operators-p
                       dont-show-lambdas-p
                       how-many
                       only-new-tuples-p
                       timeout
                       proactive-tuple-computation-p
                       tuple-at-a-time-p
                       use-individual-synonyms-p
                       check-abox-consistency-p
                       ensure-tbox-classification-p
                       initial-abox-mirroring-p
                       initial-role-assertion-mirroring-p
                       classify-concepts-in-instance-assertions-p
                       exclude-permutations-p
                       record-explanations-p))
               (:returns
                (:or :nrql-query-answer (:one-of :not-found))
                "One of the following:  A nRQL query answer, e.g. @ic{(((?X I) (?Y J)) ((?X I) (?Y I)) ((?X A) (?Y B)))}, The symbol :not-found")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (dont-add-abox-duplicates-p :boolean
                                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (remove-duplicates-p :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (two-phase-processing-p :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (deliver-phase-two-warning-tokens-p :boolean
                                                    "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (deliver-kb-has-changed-warning-tokens-p :boolean
                                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (add-rule-consequences-p :boolean
                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (continuation-based-instance-retrieval-p :boolean
                                                         "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (told-information-reasoning-p :boolean
                                              "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (final-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (runtime-consistency-checking-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (verbose-p :boolean
                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-variables :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-head-projection-operators-p :boolean
                                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-lambdas-p :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (how-many :non-negative-integer
                          "A non-negative integer (possibly 0)")
                (only-new-tuples-p :boolean
                                   "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (timeout :non-negative-integer
                         "A non-negative integer (possibly 0)")
                (proactive-tuple-computation-p :boolean
                                               "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (tuple-at-a-time-p :boolean
                                   "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-individual-synonyms-p :boolean
                                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (check-abox-consistency-p :boolean
                                          "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (ensure-tbox-classification-p :boolean
                                              "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (initial-abox-mirroring-p :boolean
                                          "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (initial-role-assertion-mirroring-p :boolean
                                                    "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (classify-concepts-in-instance-assertions-p :boolean
                                                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (exclude-permutations-p :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (record-explanations-p :boolean
                                       "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Like @funref{execute-query} in case the query is already prepared (ready, see @funref{query-ready-p}), and like @funref{reexecute-query} in case the query is already processed (see @funref{query-processed-p})")
               (:remarks nil)
               (:see-also)
               (:query-equivalent-of execute-or-reexecute-rule)
               (:examples))

(add-doc-entry (:title execute-applicable-rules)
               (:label execute-applicable-rules)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list (:list :abox))
                "A list of objects of the following type: A list of objects of the following type: An anonymous ABox, a list of ABox assertions, e.g. @ic{((instance i C) (related i j R) (instance j D))}")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Calls @funref{execute-rule} on all @funref{applicable-rules}")
               (:remarks nil)
               (:see-also
                execute-rule
                applicable-rules
                rule-applicable-p)
               (:examples))

(add-doc-entry (:title describe-rule-status)
               (:label describe-rule-status)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (query))
               (:returns
                (:or (:one-of :not-found) :nrql-rule-status)
                "One of the following:  The symbol :not-found, A nRQL rule status description, e.g. @ic{:READY-TO-RUN} or @ic{(:ACCURATE :PROCESSED)}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of describe-query-status)
               (:examples))

(add-doc-entry (:title describe-rule)
               (:label describe-rule)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (query &optional rewritten-p))
               (:returns
                (:or (:one-of :not-found) :nrql-rule-description)
                "One of the following:  The symbol :not-found, A nRQL rule description, e.g. @ic{(:RULE-2 (:NOT-ACCURATE :PROCESSED) (PREPARE-ABOX-RULE (?X C) ((INSTANCE ?X C)) :ABOX TEST))}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (rewritten-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of describe-all-queries)
               (:examples))

(add-doc-entry (:title describe-query-status)
               (:label describe-query-status)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (query))
               (:returns
                (:or (:one-of :not-found) :nrql-query-status)
                "One of the following:  The symbol :not-found, A nRQL query status description, e.g. @ic{:READY-TO-RUN, (:NOT-ACCURATE :READY-TO-RUN), :PROCESSED,} etc.")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Describes the current status of the query @arg{id} - whether the query is ready (to run), running, waiting (sleeping), or terminated")
               (:remarks nil)
               (:see-also describe-all-queries)
               (:query-equivalent-of describe-rule-status)
               (:examples))

(add-doc-entry (:title describe-query)
               (:label describe-query)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (query &optional rewritten-p))
               (:returns
                (:or (:one-of :not-found) :nrql-query-description)
                "One of the following:  The symbol :not-found, A nRQL query description, e.g. @ic{(:QUERY-1 (:ACCURATE :PROCESSED) (RETRIEVE (?X) (?X C) :ABOX TEST))}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (rewritten-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Returns a description of the query @arg{id}")
               (:remarks
                "This function uses @funref{describe-query-status}, @funref{query-head} (or @funref{original-query-head}) and @funref{query-body} (or @funref{original-query-body}) to create the description")
               (:see-also describe-all-queries)
               (:examples))

(add-doc-entry (:title delete-rule)
               (:label delete-rule)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (query))
               (:returns)
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Deletes the query @arg{id}, enabling the garbage collector to recycle some memory")
               (:remarks nil)
               (:see-also delete-all-rules)
               (:examples))

(add-doc-entry (:title delete-query)
               (:label delete-query)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (query))
               (:returns)
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Deletes the query @arg{id}, enabling the garbage collector to recycle some memory")
               (:remarks nil)
               (:see-also delete-all-queries)
               (:examples))

(add-doc-entry (:title classify-query)
               (:label classify-query)
               (:type :function)
               (:in-sections all-functions query-reasoning)
               (:protected t)
               (:signature (query))
               (:returns)
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Classifies the query @arg{id}, i.e., computed its correct position in the current QBox")
               (:remarks nil)
               (:see-also
                query-entails-p
                query-equivalent-p
                query-parents
                query-equivalents
                query-children
                query-ancestors
                query-descendants)
               (:examples))

(add-doc-entry (:title choose-current-set-of-rule-consequences)
               (:label choose-current-set-of-rule-consequences)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (query))
               (:returns)
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Consequences of a rule are not added to the ABox as long as the rule is still active (see @funref{rule-active-p}). Some of the generated consequences are added when the rule has terminated. If a rule is executed (see @funref{execute-rule}) in tuple-at-a time mode, then rule consequences are requested and computed lazily via @funref{get-next-set-of-rule-consequences}. The @em{current set of rule consequences,} see funref{get-current-set-of-rule-consequences}, can thus be selected and memoized in the rule object for addition to the ABox (after termination of the rule) with this function. Rule consequences are added using the function @funref{add-chosen-sets-of-rule-consequences}. Note that in set-at-time-mode, all produced sets of consequences are chosen automatically for addition. Using either @funref{add-rule-consequences-automatically} (@funref{dont-add-rule-consequences-automatically}) resp. the @arg{add-rule-consequences-p} argument of @funref{execute-rule}, you can determine whether (the selected) rule consequences will be added automatically with @funref{add-chosen-sets-of-rule-consequences} when the rule terminates or not. In the latter case, @funref{add-chosen-sets-of-rule-consequences} can be called manually later (see also @funref{get-chosen-sets-of-rule-consequences})")
               (:remarks nil)
               (:see-also
                add-chosen-sets-of-rule-consequences
                get-chosen-sets-of-rule-consequences)
               (:examples))

(add-doc-entry (:title cheap-rule-p)
               (:label cheap-rule-p)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (query))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of cheap-query-p)
               (:examples))

(add-doc-entry (:title cheap-query-p)
               (:label cheap-query-p)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (query))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Checks whether query @arg{id} is still in emph{phase one} (see User Guide). Only active queries (see @funref{query-active-p}) can be recognized as cheap")
               (:remarks
                "A query will only produce cheap tuples if it has been started in two-phase query processing mode, see @funref{execute-query}, @funref{enable-two-phase-query-processing-mode}. Note also that query must be executed in lazy tuple-at-a-time mode")
               (:see-also
                cheap-queries
                expensive-query-p
                enable-two-phase-query-processing-mode
                set-nrql-mode
                execute-query)
               (:query-equivalent-of cheap-rule-p)
               (:examples))

(add-doc-entry (:title applicable-rules)
               (:label applicable-rules)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (&key abox type-of-substrate))
               (:returns
                (:list :nrql-rule-id)
                "A list of objects of the following type: A nRQL rule ID, e.g. @ic{:rule-1}")
               (:arguments
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}"))
               (:description
                "Returns (a list of) all rules which satisfy @funref{rule-applicable-p}")
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title add-explanation-assertions)
               (:label add-explanation-assertions)
               (:type :function)
               (:in-sections all-functions abduction)
               (:protected t)
               (:signature
                (query expl-no
                       &key
                       from
                       to
                       only-best-p
                       order-by
                       reverse-order-p
                       equi-order-by
                       remove-marker-symbols-p
                       remove-entailed-explanations-p
                       new-inds-p
                       tuples-p
                       full-tuples-p
                       all-assertions-p
                       hypothesized-assertions-p
                       show-score-p
                       abox-entailment
                       ensure-permutations-p))
               (:returns)
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (expl-no
                 :non-negative-integer
                 "A non-negative integer (possibly 0)")
                (from
                 :substrate-node
                 "A substrate node, a symbol, e.g. @ic{person1}")
                (only-best-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (order-by
                 (:one-of :new-paper-fn :cae :cae2 :rasouli-paper-fn)
                 "One of the following symbols: @ic{:new-paper-fn, :cae, :cae2, :rasouli-paper-fn}")
                (reverse-order-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (equi-order-by
                 (:one-of :prefer-old-inds :prefer-new-inds)
                 "One of the following symbols: @ic{:prefer-old-inds, :prefer-new-inds}")
                (remove-marker-symbols-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (remove-entailed-explanations-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (new-inds-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (tuples-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (full-tuples-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (all-assertions-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (hypothesized-assertions-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (show-score-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (abox-entailment
                 (:one-of :most-specific :most-general)
                 "One of the following symbols: @ic{:most-specific, :most-general}")
                (ensure-permutations-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:examples))

(add-doc-entry (:title add-chosen-sets-of-rule-consequences)
               (:label add-chosen-sets-of-rule-consequences)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (query &key dont-add-abox-duplicates-p))
               (:returns)
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1")
                (dont-add-abox-duplicates-p :boolean
                                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:description
                "Adds the chosen sets of rule consequences (see @funref{get-current-set-of-rule-consequences}, @funref{add-chosen-sets-of-rule-consequences}) to the ABox (this is the ABox on which the rule has fired) produced by the rule @arg{id}. See @funref{get-chosen-sets-of-rule-consequences} to learn which assertions will be added")
               (:remarks
                "This function can only be called if the rule has terminated (see @funref{rule-processed-p}). Note that an active rule (see @funref{rule-active-p}) can be aborted (see @funref{abort-rule})")
               (:see-also
                get-chosen-sets-of-rule-consequences
                get-current-set-of-rule-consequences
                choose-current-set-of-rule-consequences)
               (:examples))

(add-doc-entry (:title abort-rule)
               (:label abort-rule)
               (:type :function)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature (query))
               (:returns
                (:one-of :okay-rule-aborted :not-found)
                "One of the following symbols: @ic{:okay-rule-aborted, :not-found}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description nil)
               (:remarks nil)
               (:see-also)
               (:rule-equivalent-of :abort-query)
               (:examples))

(add-doc-entry (:title abort-query)
               (:label abort-query)
               (:type :function)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature (query))
               (:returns
                (:one-of :not-found :okay-query-aborted)
                "One of the following symbols: @ic{:not-found, :okay-query-aborted}")
               (:arguments
                (query :nrql-query-id
                       "A nRQL query ID, a non-negative-integer or symbol, e.g. 1"))
               (:description
                "Aborts the active query (see @funref{query-active-p}) @arg{id}. The query becomes processed (see @funref{query-processed-p})")
               (:remarks nil)
               (:see-also abort-all-queries query-active-p)
               (:examples))

(add-doc-entry (:title unsubscribe)
               (:label unsubscribe)
               (:type :macro)
               (:macro-for unsubscribe-1)
               (:in-sections all-functions publish-subscribe)
               (:protected t)
               (:signature (subscriber &optional query-concept abox))
               (:returns)
               (:arguments
                (subscriber :symbol "A symbol")
                (query-concept
                 :concept-name
                 "A concept name, e.g. @ic{woman}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:see-also nil)
               (:description "Retract a subscription.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title unrelated)
               (:label unrelated)
               (:type :macro)
               (:macro-for add-negated-role-assertion)
               (:in-sections all-functions abox-tell)
               (:protected t)
               (:signature (left-name right-name role-name))
               (:returns)
               (:arguments
                (left-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (right-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (role-name :role "A role, e.g. @ic{has-child}"))
               (:see-also nil)
               (:description nil)
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title unpublish)
               (:label unpublish)
               (:type :macro)
               (:macro-for unpublish-1)
               (:in-sections all-functions publish-subscribe)
               (:protected t)
               (:signature (individual &optional abox))
               (:returns)
               (:arguments
                (individual
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:see-also nil)
               (:description "Withdraw a publish statement.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title transitive?)
               (:label transitive?)
               (:type :macro)
               (:macro-for transitive-p)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (role-term &optional tbox-name))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (tbox-name :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "Checks if @arg{role-term} is a transitive role in the specified TBox.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title transitive)
               (:label transitive)
               (:type :macro)
               (:macro-for role-is-transitive)
               (:in-sections all-functions tbox-tell)
               (:protected t)
               (:signature (rolename &optional tbox))
               (:returns)
               (:arguments
                (rolename :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "States that a role is to be interpreted as transitive.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title timenet-retrieve)
               (:label timenet-retrieve)
               (:type :macro)
               (:macro-for timenet-answer-query)
               (:in-sections all-functions events)
               (:protected t)
               (:signature (query &key abox))
               (:returns
                :timenet-query-result
                "A timenet query result")
               (:arguments
                (query :timenet-query "unknown")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:see-also nil)
               (:description nil)
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title time)
               (:label time)
               (:type :macro)
               (:macro-for :none)
               (:in-sections all-functions testing)
               (:protected t)
               (:signature (form))
               (:returns nil "The symbol nil.")
               (:arguments (form :unknown "What is this?!"))
               (:see-also nil)
               (:description
                "This macro prints some timing information.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title tbox-prepared?)
               (:label tbox-prepared?)
               (:type :macro)
               (:macro-for tbox-prepared-p)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (&optional tbox-name))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (tbox-name :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "It is checked if internal index structures are already 
			   computed for the specified TBox.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title tbox-cyclic?)
               (:label tbox-cyclic?)
               (:type :macro)
               (:macro-for tbox-cyclic-p)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (&optional tbox-name))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (tbox-name :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "It is checked if cyclic GCIs are present in a TBox.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title tbox-coherent?)
               (:label tbox-coherent?)
               (:type :macro)
               (:macro-for tbox-coherent-p)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (&optional tbox-name))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (tbox-name :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "Checks if there are any unsatisfiable atomic concepts in the 
			   current or specified TBox.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title tbox-classified?)
               (:label tbox-classified?)
               (:type :macro)
               (:macro-for tbox-classified-p)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (&optional tbox-name))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (tbox-name :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "It is checked if the specified TBox has already been classified.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title symmetric?)
               (:label symmetric?)
               (:type :macro)
               (:macro-for symmetric-p)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (role-term &optional tbox-name))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (tbox-name :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "Checks if @arg{role-term} is symmetric in the specified TBox.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title symmetric)
               (:label symmetric)
               (:type :macro)
               (:macro-for role-is-symmetric)
               (:in-sections all-functions tbox-tell)
               (:protected t)
               (:signature (rolename &optional tbox))
               (:returns)
               (:arguments
                (rolename :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description nil)
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title subscribe)
               (:label subscribe)
               (:type :macro)
               (:macro-for subscribe-1)
               (:in-sections all-functions publish-subscribe)
               (:protected t)
               (:signature
                (subscriber
                 query-concept
                 &optional
                 abox
                 ip
                 port
                 use-simplified-protocol-p))
               (:returns)
               (:arguments
                (subscriber :symbol "A symbol")
                (query-concept
                 :concept-name
                 "A concept name, e.g. @ic{woman}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (ip
                 :ip-address
                 "A TCP-IP IP address as a string, e.g. @ic{\"192.168.0.1\"}")
                (port :ip-port "A TCP-IP port, e.g. @ic{8080}")
                (use-simplified-protocol-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:see-also nil)
               (:description nil)
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title state)
               (:label state)
               (:type :macro)
               (:macro-for :none)
               (:in-sections all-functions abox-tell)
               (:protected t)
               (:signature (&body forms))
               (:returns nil "The symbol nil.")
               (:arguments
                (forms
                 (:list :abox-assertion)
                 "A list of objects of the following type: An ABox assertion, e.g. @ic{(instance betty woman)}"))
               (:see-also nil)
               (:description
                "This macro asserts a set of ABox statements.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title sparql-retrieve)
               (:label sparql-retrieve)
               (:type :macro)
               (:macro-for :none)
               (:in-sections all-functions sparql)
               (:protected t)
               (:signature
                (sparql-query
                 &rest
                 args
                 &key
                 racer
                 stream
                 native
                 add-standard-prefixes
                 use-optimizer
                 &allow-other-keys))
               (:returns
                :nrql-query-answer
                "A nRQL query answer, e.g. @ic{(((?X I) (?Y J)) ((?X I) (?Y I)) ((?X A) (?Y B)))}")
               (:arguments
                (sparql-query
                 :sparql-query-string
                 "A SPARQL query string")
                (args :unknown "What is this?!")
                (racer
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (native
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (add-standard-prefixes
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-optimizer
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:see-also nil)
               (:description nil)
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title sparql-answer-query)
               (:label sparql-answer-query)
               (:type :macro)
               (:macro-for :none)
               (:in-sections all-functions sparql)
               (:protected t)
               (:signature
                (sparql-query
                 &rest
                 args
                 &key
                 racer
                 stream
                 native
                 add-standard-prefixes
                 use-optimizer
                 &allow-other-keys))
               (:returns
                :nrql-query-answer
                "A nRQL query answer, e.g. @ic{(((?X I) (?Y J)) ((?X I) (?Y I)) ((?X A) (?Y B)))}")
               (:arguments
                (sparql-query
                 :sparql-query-string
                 "A SPARQL query string")
                (args :unknown "What is this?!")
                (racer
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (native
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (add-standard-prefixes
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-optimizer
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:see-also nil)
               (:description nil)
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title signature)
               (:label signature)
               (:type :macro)
               (:macro-for ensure-abox-signature)
               (:in-sections all-functions kb-management)
               (:protected t)
               (:signature
                (&whole
                 signature-form
                 &key
                 atomic-concepts
                 roles
                 transitive-roles
                 features
                 attributes
                 individuals
                 objects))
               (:returns)
               (:arguments
                (atomic-concepts
                 (:list :concept-name)
                 "A list of objects of the following type: A concept name, e.g. @ic{woman}")
                (roles
                 (:list :role)
                 "A list of objects of the following type: A role, e.g. @ic{has-child}")
                (transitive-roles
                 (:list :role)
                 "A list of objects of the following type: A role, e.g. @ic{has-child}")
                (features
                 (:list :role)
                 "A list of objects of the following type: A role, e.g. @ic{has-child}")
                (attributes
                 (:list :cd-attribute)
                 "A list of objects of the following type: A concrete domain attribute, e.g. @ic{age}")
                (individuals
                 (:list :abox-individual)
                 "A list of objects of the following type: An ABox individual, e.g. @ic{betty}")
                (objects
                 (:list :cd-object)
                 "A list of objects of the following type: A concrete domain object, e.g. @ic{betty-age}"))
               (:see-also nil)
               (:description
                "Defines the signature for a knowledge base. @n
If any keyword except @arg{individuals} or @arg{objects} is used, the (@funref{current-tbox}) is
initialized and the signature is defined for it. @n
If the keyword @arg{individuals} or @arg{objects} is used, the (current-abox) is initialized. 
If all keywords are used, the (@funref{current-abox}) and its TBox are both
initialized.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title same-individual-as)
               (:label same-individual-as)
               (:type :macro)
               (:macro-for add-same-individual-as-assertion)
               (:in-sections all-functions abox-tell)
               (:protected t)
               (:signature (individual-name-1 individual-name-2))
               (:returns)
               (:arguments
                (individual-name-1
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (individual-name-2
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}"))
               (:see-also nil)
               (:description "Synonym to @funref{same-as.}")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title same-as)
               (:label same-as)
               (:type :macro)
               (:macro-for add-same-individual-as-assertion)
               (:in-sections all-functions abox-tell)
               (:protected t)
               (:signature (individual-name-1 individual-name-2))
               (:returns)
               (:arguments
                (individual-name-1
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (individual-name-2
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}"))
               (:see-also nil)
               (:description
                "This form declares two individuals to refer to the same domain object.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title roles-equivalent)
               (:label roles-equivalent)
               (:type :macro)
               (:macro-for roles-equivalent-1)
               (:in-sections all-functions tbox-tell)
               (:protected t)
               (:signature (role1 role2 &optional tbox))
               (:returns)
               (:arguments
                (role1 :role "A role, e.g. @ic{has-child}")
                (role2 :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description "Declares two roles to be equivalent.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title roles-disjoint)
               (:label roles-disjoint)
               (:type :macro)
               (:macro-for role-disjoint-1)
               (:in-sections all-functions tbox-tell)
               (:protected t)
               (:signature (role1 role2 &optional tbox))
               (:returns)
               (:arguments
                (role1 :role "A role, e.g. @ic{has-child}")
                (role2 :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description nil)
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title role?)
               (:label role?)
               (:type :macro)
               (:macro-for role-p)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (role-term &optional tbox-name))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (tbox-name :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "Checks if @arg{role-term} is a role term for a role in the specified TBox.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title role-synonyms)
               (:label role-synonyms)
               (:type :macro)
               (:macro-for atomic-role-synonyms)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (role-term &optional tbox))
               (:returns
                (:list :role)
                "A list of objects of the following type: A role, e.g. @ic{has-child}")
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "Gets the synonyms of a role including the role itself.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title role-subsumes?)
               (:label role-subsumes?)
               (:type :macro)
               (:macro-for role-subsumes-p)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (role-term-1 role-term-2 &optional tbox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (role-term-1 :role "A role, e.g. @ic{has-child}")
                (role-term-2 :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "Checks if two roles are subsuming each other.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title role-satisfiable?)
               (:label role-satisfiable?)
               (:type :macro)
               (:macro-for role-satisfiable-p)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (role &optional tbox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (role :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description nil)
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title role-range)
               (:label role-range)
               (:type :macro)
               (:macro-for atomic-role-range)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (role-term &optional tbox))
               (:returns
                :concept-expression
                "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "Returns the range of role name @arg{role-term.}")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title role-parents)
               (:label role-parents)
               (:type :macro)
               (:macro-for atomic-role-parents)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (role-term &optional tbox))
               (:returns
                (:list :role)
                "A list of objects of the following type: A role, e.g. @ic{has-child}")
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "Gets the roles from the TBox that directly 
			   subsume the given role in the role hierarchy.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title role-inverse)
               (:label role-inverse)
               (:type :macro)
               (:macro-for atomic-role-inverse)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (role-term &optional tbox))
               (:returns
                :role-term
                "A role name or inverse role name, e.g. the symbol @ic{R} or the expression @ic{(inv R)}")
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "Returns the inverse role of role term @arg{role-term.}")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title role-equivalent?)
               (:label role-equivalent?)
               (:type :macro)
               (:macro-for role-equivalent-p)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (role-term-1 role-term-2 &optional tbox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (role-term-1 :role "A role, e.g. @ic{has-child}")
                (role-term-2 :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description "Checks if two roles are equivalent.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title role-domain)
               (:label role-domain)
               (:type :macro)
               (:macro-for atomic-role-domain)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (role-term &optional tbox))
               (:returns
                :concept-expression
                "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "Returns the domain of role name @arg{role-term.}")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title role-disjoint?)
               (:label role-disjoint?)
               (:type :macro)
               (:macro-for role-disjoint-p)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (role-term-1 role-term-2 &optional tbox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (role-term-1 :role "A role, e.g. @ic{has-child}")
                (role-term-2 :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description nil)
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title role-descendants)
               (:label role-descendants)
               (:type :macro)
               (:macro-for atomic-role-descendants)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (role-term &optional tbox))
               (:returns
                (:list :role)
                "A list of objects of the following type: A role, e.g. @ic{has-child}")
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "Gets all roles from the TBox, that the given role subsumes.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title role-children)
               (:label role-children)
               (:type :macro)
               (:macro-for atomic-role-children)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (role-term &optional tbox))
               (:returns
                (:list :role)
                "A list of objects of the following type: A role, e.g. @ic{has-child}")
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "Gets all roles from the TBox that are directly 
			   subsumed by the given role in the role hierarchy.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title role-ancestors)
               (:label role-ancestors)
               (:type :macro)
               (:macro-for atomic-role-ancestors)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (role-term &optional tbox))
               (:returns
                (:list :role)
                "A list of objects of the following type: A role, e.g. @ic{has-child}")
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "Gets all roles from the TBox, that subsume the 
			   given role in the role hierarchy.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title related-individuals)
               (:label related-individuals)
               (:type :macro)
               (:macro-for retrieve-related-individuals)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (role-term &optional abox-name))
               (:returns
                (:list (:list :abox-individual :abox-individual))
                "A list of objects of the following type: A list of length 2 with objects of the following types: An ABox individual, e.g. @ic{betty}, An ABox individual, e.g. @ic{betty}")
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (abox-name :abox-name
                           "The name of an ABox, e.g. @ic{family-abox}"))
               (:see-also nil)
               (:description
                "Gets all pairs of individuals that are related via the specified relation.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title related)
               (:label related)
               (:type :macro)
               (:macro-for add-role-assertion)
               (:in-sections all-functions tbox-tell)
               (:protected t)
               (:signature (left-name right-name role-name))
               (:returns)
               (:arguments
                (left-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (right-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (role-name :role "A role, e.g. @ic{has-child}"))
               (:see-also nil)
               (:description
                "Builds a role assertion, asserts that two individuals 
			   are related via a role (or feature).")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title reflexive?)
               (:label reflexive?)
               (:type :macro)
               (:macro-for reflexive-p)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (role-term &optional tbox-name))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (tbox-name :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "Checks if @arg{role-term} is reflexive in the specified TBox.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title reflexive)
               (:label reflexive)
               (:type :macro)
               (:macro-for role-is-reflexive)
               (:in-sections all-functions tbox-tell)
               (:protected t)
               (:signature (rolename &optional tbox))
               (:returns)
               (:arguments
                (rolename :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description nil)
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title range)
               (:label range)
               (:type :macro)
               (:macro-for role-has-range)
               (:in-sections all-functions tbox-tell)
               (:protected t)
               (:signature (rolename concept &optional tbox errorp))
               (:returns)
               (:arguments
                (rolename :role "A role, e.g. @ic{has-child}")
                (concept
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (errorp
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:see-also nil)
               (:description "Declares the range of a role.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title publish)
               (:label publish)
               (:type :macro)
               (:macro-for publish-1)
               (:in-sections all-functions publish-subscribe)
               (:protected t)
               (:signature (individual &optional abox))
               (:returns)
               (:arguments
                (individual
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:see-also nil)
               (:description nil)
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title pretrieve)
               (:label pretrieve)
               (:type :macro)
               (:macro-for pracer-answer-query)
               (:in-sections all-functions agraph)
               (:protected t)
               (:signature (head body &rest args))
               (:returns
                :nrql-query-answer
                "A nRQL query answer, e.g. @ic{(((?X I) (?Y J)) ((?X I) (?Y I)) ((?X A) (?Y B)))}")
               (:arguments
                (head
                 :event-rule-head
                 "An event rule head (the rule consequence)")
                (body
                 :event-rule-body
                 "An event rule body (antecedence)")
                (args :unknown "What is this?!"))
               (:see-also nil)
               (:description nil)
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title irreflexive?)
               (:label irreflexive?)
               (:type :macro)
               (:macro-for irreflexive-p)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (role-term &optional tbox-name))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (tbox-name :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description nil)
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title irreflexive)
               (:label irreflexive)
               (:type :macro)
               (:macro-for role-is-irreflexive)
               (:in-sections all-functions tbox-tell)
               (:protected t)
               (:signature (rolename &optional tbox))
               (:returns)
               (:arguments
                (rolename :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description nil)
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title inverse)
               (:label inverse)
               (:type :macro)
               (:macro-for inverse-of-role)
               (:in-sections all-functions tbox-tell)
               (:protected t)
               (:signature (rolename inverse-role &optional tbox))
               (:returns
                :role-term
                "A role name or inverse role name, e.g. the symbol @ic{R} or the expression @ic{(inv R)}")
               (:arguments
                (rolename :role "A role, e.g. @ic{has-child}")
                (inverse-role :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "Defines a name for the inverse of a role.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title instance)
               (:label instance)
               (:type :macro)
               (:macro-for add-concept-assertion)
               (:in-sections all-functions abox-tell)
               (:protected t)
               (:signature (name concept))
               (:returns)
               (:arguments
                (name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (concept
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}"))
               (:see-also nil)
               (:description
                "Builds a concept assertion, asserts that an individual 
			   is an instance of a concept.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title init-subscriptions)
               (:label init-subscriptions)
               (:type :macro)
               (:macro-for init-subscriptions1)
               (:in-sections all-functions publish-subscribe)
               (:protected t)
               (:signature (&optional abox))
               (:returns)
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:see-also nil)
               (:description "Initialize the subscription database.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title init-publications)
               (:label init-publications)
               (:type :macro)
               (:macro-for init-publications1)
               (:in-sections all-functions publish-subscribe)
               (:protected t)
               (:signature (&optional abox))
               (:returns)
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:see-also nil)
               (:description
                "Initialize the set of published individuals.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title individuals-related?)
               (:label individuals-related?)
               (:type :macro)
               (:macro-for individuals-related-p)
               (:in-sections all-functions abox-ask)
               (:protected t)
               (:signature
                (individual-1 individual-2 role-term &optional abox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (individual-1
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (individual-2
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (role-term :role "A role, e.g. @ic{has-child}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:see-also nil)
               (:description
                "Checks if two individuals are directly related via the specified role.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title individuals-not-equal?)
               (:label individuals-not-equal?)
               (:type :macro)
               (:macro-for individuals-not-equal-p)
               (:in-sections all-functions abox-ask)
               (:protected t)
               (:signature (individual-1 individual-2 &optional abox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (individual-1
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (individual-2
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:see-also nil)
               (:description
                "Checks if two individual names do not refer to the same domain object.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title individuals-equal?)
               (:label individuals-equal?)
               (:type :macro)
               (:macro-for individuals-equal-p)
               (:in-sections all-functions abox-ask)
               (:protected t)
               (:signature (individual-1 individual-2 &optional abox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (individual-1
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (individual-2
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:see-also nil)
               (:description
                "Checks if two individual names refer to the same domain object.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title individual?)
               (:label individual?)
               (:type :macro)
               (:macro-for individual-p)
               (:in-sections all-functions abox-ask)
               (:protected t)
               (:signature (individual-name &optional abox-name))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (individual-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (abox-name :abox-name
                           "The name of an ABox, e.g. @ic{family-abox}"))
               (:see-also nil)
               (:description
                "Checks if @arg{individual-name} is a name of an individual mentioned in an ABox @arg{abox.}")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title individual-types)
               (:label individual-types)
               (:type :macro)
               (:macro-for instantiators)
               (:in-sections all-functions abox-ask)
               (:protected t)
               (:signature (individual-name &optional abox))
               (:returns
                (:list (:list :concept-name))
                "A list of objects of the following type: A list of objects of the following type: A concept name, e.g. @ic{woman}")
               (:arguments
                (individual-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:see-also nil)
               (:description
                "Gets all atomic concepts of which the individual is an instance.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title individual-told-datatype-fillers)
               (:label individual-told-datatype-fillers)
               (:type :macro)
               (:macro-for retrieve-individual-told-datatype-fillers)
               (:in-sections all-functions abox-owl-ask)
               (:protected t)
               (:signature (ind datatype-role &optional abox))
               (:returns
                (:list :cd-literal)
                "A list of objects of the following type: A concrete domain literal, e.g., @ic{\"Betty\"} or @ic{80}")
               (:arguments
                (ind
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (datatype-role
                 :datatype-property
                 "An OWL2 datatype property, a special role, e.g. @ic{hasAge}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:see-also nil)
               (:description
                "Gets told values for datatype property roles.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title individual-told-attribute-value)
               (:label individual-told-attribute-value)
               (:type :macro)
               (:macro-for retrieve-individual-told-attribute-value)
               (:in-sections all-functions abox-cd-ask)
               (:protected t)
               (:signature (ind attribute &optional abox))
               (:returns
                :cd-object
                "A concrete domain object, e.g. @ic{betty-age}")
               (:arguments
                (ind
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (attribute
                 :cd-attribute
                 "A concrete domain attribute, e.g. @ic{age}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:see-also nil)
               (:description "Gets told values for attributes.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title individual-synonyms)
               (:label individual-synonyms)
               (:type :macro)
               (:macro-for retrieve-individual-synonyms)
               (:in-sections all-functions abox-ask)
               (:protected t)
               (:signature (individual &optional told-only abox-name))
               (:returns
                (:list :abox-individual)
                "A list of objects of the following type: An ABox individual, e.g. @ic{betty}")
               (:arguments
                (individual
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (told-only
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (abox-name :abox-name
                           "The name of an ABox, e.g. @ic{family-abox}"))
               (:see-also nil)
               (:description
                "Gets all individuals which can be proven to refer to the same domain object.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title individual-instance?)
               (:label individual-instance?)
               (:type :macro)
               (:macro-for individual-instance-p)
               (:in-sections all-functions abox-ask)
               (:protected t)
               (:signature (individual concept &optional abox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (individual
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (concept
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:see-also nil)
               (:description
                "Checks if an individual is an instance of a given 
			   concept with respect to the (@funref{current-abox}) and its TBox.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title individual-fillers)
               (:label individual-fillers)
               (:type :macro)
               (:macro-for retrieve-individual-fillers)
               (:in-sections all-functions abox-ask)
               (:protected t)
               (:signature (ind-predecessor role-term &optional abox))
               (:returns
                (:list :abox-individual)
                "A list of objects of the following type: An ABox individual, e.g. @ic{betty}")
               (:arguments
                (ind-predecessor
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (role-term :role "A role, e.g. @ic{has-child}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:see-also nil)
               (:description
                "Gets all individuals that are fillers of a role for a specified individual.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title individual-filled-roles)
               (:label individual-filled-roles)
               (:type :macro)
               (:macro-for retrieve-individual-filled-roles)
               (:in-sections all-functions abox-ask)
               (:protected t)
               (:signature (ind-predecessor ind-filler &optional abox))
               (:returns
                (:list :role-term)
                "A list of objects of the following type: A role name or inverse role name, e.g. the symbol @ic{R} or the expression @ic{(inv R)}")
               (:arguments
                (ind-predecessor
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (ind-filler
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:see-also nil)
               (:description
                "Equivalent to @funref{retrieve-individual-filled-roles}")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title individual-direct-types)
               (:label individual-direct-types)
               (:type :macro)
               (:macro-for most-specific-instantiators)
               (:in-sections all-functions abox-ask)
               (:protected t)
               (:signature (individual-name &optional abox))
               (:returns
                (:list :concept-name)
                "A list of objects of the following type: A concept name, e.g. @ic{woman}")
               (:arguments
                (individual-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:see-also nil)
               (:description
                "Gets the most-specific atomic concepts of which 
			   an individual is an instance.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title individual-attribute-fillers)
               (:label individual-attribute-fillers)
               (:type :macro)
               (:macro-for retrieve-individual-attribute-fillers)
               (:in-sections all-functions abox-cd-ask)
               (:protected t)
               (:signature (ind attribute &optional abox))
               (:returns
                (:list :cd-object)
                "A list of objects of the following type: A concrete domain object, e.g. @ic{betty-age}")
               (:arguments
                (ind
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (attribute
                 :cd-attribute
                 "A concrete domain attribute, e.g. @ic{age}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:see-also nil)
               (:description
                "Gets all object names that are fillers of an attribute for a specified individual.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title individual-antonyms)
               (:label individual-antonyms)
               (:type :macro)
               (:macro-for retrieve-individual-antonyms)
               (:in-sections all-functions abox-ask)
               (:protected t)
               (:signature (individual &optional told-only abox-name))
               (:returns
                (:list :abox-individual)
                "A list of objects of the following type: An ABox individual, e.g. @ic{betty}")
               (:arguments
                (individual
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (told-only
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (abox-name :abox-name
                           "The name of an ABox, e.g. @ic{family-abox}"))
               (:see-also nil)
               (:description nil)
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title in-tbox)
               (:label in-tbox)
               (:type :macro)
               (:macro-for in-tbox-internal)
               (:in-sections all-functions tbox-management)
               (:protected t)
               (:signature (name &key init size role-size signature))
               (:returns)
               (:arguments
                (name :tbox-name "A TBox name, e.g. @ic{family}")
                (init
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (signature :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "The TBox with the specified name is taken or a new 
			   TBox with that name is generated.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title in-knowledge-base)
               (:label in-knowledge-base)
               (:type :macro)
               (:macro-for :none)
               (:in-sections all-functions kb-management)
               (:protected t)
               (:signature (tbox-name &rest args))
               (:returns nil "The symbol nil.")
               (:arguments
                (tbox-name :tbox-name "A TBox name, e.g. @ic{family}")
                (args
                 (:or :abox-name (:list (:one-of :init) :boolean))
                 "One of the following:  The name of an ABox, e.g. @ic{family-abox}, A list of length 2 with objects of the following types: The symbol :init, A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:see-also nil)
               (:description
                "This form is an abbreviation for the sequence:@n
@ic{(@funref{in-tbox} TBN)}
@ic{(@funref{in-abox} ABN TBN).} See the appropriate documentation for these
functions.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title in-abox)
               (:label in-abox)
               (:type :macro)
               (:macro-for in-abox-internal)
               (:in-sections all-functions abox-management)
               (:protected t)
               (:signature (abox-name &optional tbox-name))
               (:returns)
               (:arguments
                (abox-name :abox-name
                           "The name of an ABox, e.g. @ic{family-abox}")
                (tbox-name :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "The ABox with this name is taken or generated. If a 
			   TBox is specified, the ABox is also initialized.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title implies-role)
               (:label implies-role)
               (:type :macro)
               (:macro-for role-has-parent)
               (:in-sections all-functions tbox-tell)
               (:protected t)
               (:signature (rolename-1 rolename-2 &optional tbox))
               (:returns)
               (:arguments
                (rolename-1 :role "A role, e.g. @ic{has-child}")
                (rolename-2 :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description "Defines a parent of a role.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title implies)
               (:label implies)
               (:type :macro)
               (:macro-for add-concept-axiom)
               (:in-sections all-functions tbox-tell)
               (:protected t)
               (:signature (left right))
               (:returns)
               (:arguments
                (left
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (right
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}"))
               (:see-also nil)
               (:description
                "Defines a GCI between @ic{C1} and @ic{C2.}")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title get-concept-negated-definition)
               (:label get-concept-negated-definition)
               (:type :macro)
               (:macro-for get-concept-negated-definition-1)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (concept-name &optional tbox))
               (:returns
                :concept-expression
                "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
               (:arguments
                (concept-name
                 :concept-name
                 "A concept name, e.g. @ic{woman}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "Optimized DL systems perform a static analysis 
			   of given terminological axioms. The axioms of a TBox are usually 
			   transformed in such a way that processing promises to be faster. 
			   In particular, the idea is to transform GCIs into (primitive) 
			   concept definitions. For a given concept name the function 
			   @funref{get-concept-negated-definition} returns the definition of 
			   the negated concept compiled by RACER during the absorption phase.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title get-concept-definition)
               (:label get-concept-definition)
               (:type :macro)
               (:macro-for get-concept-definition-1)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (concept-name &optional tbox))
               (:returns
                :concept-expression
                "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
               (:arguments
                (concept-name
                 :concept-name
                 "A concept name, e.g. @ic{woman}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "Optimized DL systems perform a static analysis 
			   of given terminological axioms. The axioms of a TBox are usually 
			   transformed in such a way that processing promises to be faster. 
			   In particular, the idea is to transform GCIs into (primitive) 
			   concept definitions. For a given concept name the function 
			   @funref{get-concept-definition} returns the definition compiled 
			   by RACER during the absorption phase.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title functional)
               (:label functional)
               (:type :macro)
               (:macro-for role-is-functional)
               (:in-sections all-functions tbox-tell)
               (:protected t)
               (:signature (rolename &optional tbox))
               (:returns)
               (:arguments
                (rolename :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "States that a role is to be interpreted as functional.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title forget)
               (:label forget)
               (:type :macro)
               (:macro-for forget-statement)
               (:in-sections all-functions tbox-forget)
               (:protected t)
               (:signature (&key &body assertions))
               (:returns)
               (:arguments
                (assertions
                 (:list :abox-assertion)
                 "A list of objects of the following type: An ABox assertion, e.g. @ic{(instance betty woman)}"))
               (:see-also nil)
               (:description
                "This macro retracts a set of TBox/ABox statements. 
			   Note that statement to be forgotten must be literally identical 
			   to the ones previously asserted, i.e., only explicitly given 
			   information can be forgotten.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title feature?)
               (:label feature?)
               (:type :macro)
               (:macro-for feature-p)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (role-term &optional tbox-name))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (tbox-name :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "Checks if @arg{role-term} is a feature in the specified TBox.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title equivalent)
               (:label equivalent)
               (:type :macro)
               (:macro-for add-concept-axiom)
               (:in-sections all-functions tbox-tell)
               (:protected t)
               (:signature (left right))
               (:returns)
               (:arguments
                (left
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (right
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}"))
               (:see-also nil)
               (:description
                "States the equality between two concept terms.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title domain)
               (:label domain)
               (:type :macro)
               (:macro-for role-has-domain)
               (:in-sections all-functions tbox-tell)
               (:protected t)
               (:signature (rolename concept &optional tbox errorp))
               (:returns)
               (:arguments
                (rolename :role "A role, e.g. @ic{has-child}")
                (concept
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (errorp
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:see-also nil)
               (:description "Declares the domain of a role.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title disjoint)
               (:label disjoint)
               (:type :macro)
               (:macro-for add-disjointness-axiom)
               (:in-sections all-functions tbox-tell)
               (:protected t)
               (:signature (&whole form &rest concept-names))
               (:returns)
               (:arguments
                (form
                 (:list :concept-expression)
                 "A list of objects of the following type: A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (concept-names
                 (:list :concept-name)
                 "A list of objects of the following type: A concept name, e.g. @ic{woman}"))
               (:see-also nil)
               (:description
                "This axiom states the disjointness of a set of concepts.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title direct-predecessors)
               (:label direct-predecessors)
               (:type :macro)
               (:macro-for retrieve-direct-predecessors)
               (:in-sections all-functions abox-ask)
               (:protected t)
               (:signature (role-term ind-filler &optional abox))
               (:returns
                (:list :abox-individual)
                "A list of objects of the following type: An ABox individual, e.g. @ic{betty}")
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (ind-filler
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:see-also nil)
               (:description
                "Equivalent to @funref{retrieve-direct-predecessors}")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title different-from)
               (:label different-from)
               (:type :macro)
               (:macro-for add-different-from-assertion)
               (:in-sections all-functions abox-tell)
               (:protected t)
               (:signature (individual-name-1 individual-name-2))
               (:returns)
               (:arguments
                (individual-name-1
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (individual-name-2
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}"))
               (:see-also nil)
               (:description
                "This form declares two individuals NOT to refer to the same domain object.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title delete-tbox)
               (:label delete-tbox)
               (:type :macro)
               (:macro-for forget-tbox)
               (:in-sections all-functions tbox-management)
               (:protected t)
               (:signature (tbox))
               (:returns)
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "Delete the specified TBox from the list of all TBoxes. 
			   Usually this enables the garbage collector to recycle the memory used by this TBox.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title delete-abox)
               (:label delete-abox)
               (:type :macro)
               (:macro-for forget-abox)
               (:in-sections all-functions abox-management)
               (:protected t)
               (:signature (abox))
               (:returns)
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}"))
               (:see-also nil)
               (:description
                "Delete the specified ABox from the list of all ABoxes. 
			   Usually this enable the garbage collector to recycle the memory used by this ABox.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title define-tbox)
               (:label define-tbox)
               (:type :macro)
               (:macro-for define-tbox-1)
               (:in-sections all-functions tbox-management)
               (:protected t)
               (:signature (name &rest axioms))
               (:returns)
               (:arguments
                (name :tbox-name "A TBox name, e.g. @ic{family}")
                (axioms
                 (:list :tbox-axiom)
                 "A list of objects of the following type: A TBox axiom, e.g. @ic{(define-concept mother (and woman (some has-child person)))}"))
               (:see-also nil)
               (:description nil)
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title define-rule)
               (:label define-rule)
               (:type :macro)
               (:macro-for add-rule-axiom)
               (:in-sections all-functions rule-management)
               (:protected t)
               (:signature
                (lefthand-side
                 righthand-side
                 &key
                 forward-rule-p
                 backward-rule-p))
               (:returns)
               (:arguments
                (lefthand-side
                 :rule-lefthand-side
                 "A rule head, the rule consequence, e.g. @ic{(?x mother)}")
                (righthand-side
                 :rule-righthand-side
                 "A rule body, the antecedence, e.g. @ic{(and (?x woman) (?x ?y has-child))}")
                (forward-rule-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (backward-rule-p
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:see-also nil)
               (:description nil)
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title define-primitive-role)
               (:label define-primitive-role)
               (:type :macro)
               (:macro-for :none)
               (:in-sections all-functions tbox-tell)
               (:protected t)
               (:signature
                (name
                 &key
                 parents
                 parent
                 transitive
                 feature
                 domain
                 range
                 inverse
                 symmetric
                 reflexive
                 irreflexive
                 asymmetric
                 compositions))
               (:returns nil "The symbol nil.")
               (:arguments
                (name
                 :cd-attribute
                 "A concrete domain attribute, e.g. @ic{age}")
                (parents
                 (:list :role)
                 "A list of objects of the following type: A role, e.g. @ic{has-child}")
                (parent
                 (:list :role)
                 "A list of objects of the following type: A role, e.g. @ic{has-child}")
                (transitive :boolean
                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (feature
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (domain :concept-expression
                        "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (range :concept-expression
                       "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (inverse :role "A role, e.g. @ic{has-child}")
                (symmetric :boolean
                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (reflexive :boolean
                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (irreflexive :boolean
                             "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (asymmetric :boolean
                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (compositions :unknown "What is this?!"))
               (:see-also nil)
               (:description "Defines a role.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title define-primitive-concept)
               (:label define-primitive-concept)
               (:type :macro)
               (:macro-for add-concept-axiom)
               (:in-sections all-functions tbox-tell)
               (:protected t)
               (:signature (name &optional definition))
               (:returns)
               (:arguments
                (name :concept-name "A concept name, e.g. @ic{woman}")
                (definition
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}"))
               (:see-also nil)
               (:description "Defines a primitive concept.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title define-primitive-attribute)
               (:label define-primitive-attribute)
               (:type :macro)
               (:macro-for defprimattribute)
               (:in-sections all-functions tbox-cd-tell)
               (:protected t)
               (:signature
                (name
                 &key
                 parent
                 parents
                 domain
                 range
                 inverse
                 symmetric
                 asymmetric
                 reflexive
                 irreflexive))
               (:returns)
               (:arguments
                (name
                 :cd-attribute
                 "A concrete domain attribute, e.g. @ic{age}")
                (parent
                 (:list :role)
                 "A list of objects of the following type: A role, e.g. @ic{has-child}")
                (parents
                 (:list :role)
                 "A list of objects of the following type: A role, e.g. @ic{has-child}")
                (domain :concept-expression
                        "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (range :concept-expression
                       "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (inverse :role "A role, e.g. @ic{has-child}")
                (symmetric :boolean
                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (asymmetric :boolean
                            "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (reflexive :boolean
                           "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (irreflexive :boolean
                             "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:see-also nil)
               (:description "Defines an attribute.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title define-prefix)
               (:label define-prefix)
               (:type :macro)
               (:macro-for add-prefix)
               (:in-sections all-functions owl-interface)
               (:protected t)
               (:signature (prefix mapping))
               (:returns)
               (:arguments
                (prefix
                 :prefix-string
                 "A namespace prefix string, e.g. @ic{\"rdfs\"} or @ic{\"family\"}")
                (mapping
                 :url
                 "A URL string, e.g. @ic{\"http://www.example-ontology.com\"}"))
               (:see-also nil)
               (:description nil)
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title define-individual)
               (:label define-individual)
               (:type :macro)
               (:macro-for add-individual)
               (:in-sections all-functions abox-tell)
               (:protected t)
               (:signature (individual-name &optional concept))
               (:returns)
               (:arguments
                (individual-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (concept
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}"))
               (:see-also nil)
               (:description
                "This statement asserts that an individual is distinct 
			   to all other individuals in the ABox")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title define-event-rule)
               (:label define-event-rule)
               (:type :macro)
               (:macro-for add-event-rule)
               (:in-sections all-functions events)
               (:protected t)
               (:signature (head &rest body))
               (:returns)
               (:arguments
                (head
                 :event-rule-head
                 "An event rule head (the rule consequence)")
                (body
                 :event-rule-body
                 "An event rule body (antecedence)"))
               (:see-also nil)
               (:description nil)
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title define-event-assertion)
               (:label define-event-assertion)
               (:type :macro)
               (:macro-for add-event-assertion)
               (:in-sections all-functions events)
               (:protected t)
               (:signature (assertion))
               (:returns)
               (:arguments
                (assertion
                 :abox-assertion
                 "An ABox assertion, e.g. @ic{(instance betty woman)}"))
               (:see-also nil)
               (:description nil)
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title define-distinct-individual)
               (:label define-distinct-individual)
               (:type :macro)
               (:macro-for add-individual)
               (:in-sections all-functions abox-tell)
               (:protected t)
               (:signature (individual-name &optional concept))
               (:returns)
               (:arguments
                (individual-name
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (concept
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}"))
               (:see-also nil)
               (:description
                "This statement asserts that an individual is 
			   distinct to all other individuals in the ABox.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title define-disjoint-primitive-concept)
               (:label define-disjoint-primitive-concept)
               (:type :macro)
               (:macro-for :none)
               (:in-sections all-functions tbox-tell)
               (:protected t)
               (:signature (&whole form name disjoint-list definition))
               (:returns nil "The symbol nil.")
               (:arguments
                (form
                 (:list :concept-expression)
                 "A list of objects of the following type: A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (name :concept-name "A concept name, e.g. @ic{woman}")
                (disjoint-list
                 (:list :concept-name)
                 "A list of objects of the following type: A concept name, e.g. @ic{woman}")
                (definition
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}"))
               (:see-also nil)
               (:description
                "This axiom states the disjointness of a group of concepts.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title define-datatype-property)
               (:label define-datatype-property)
               (:type :macro)
               (:macro-for add-datatype-property)
               (:in-sections all-functions tbox-owl-tell)
               (:protected t)
               (:signature (&rest args))
               (:returns)
               (:arguments (args :unknown "What is this?!"))
               (:see-also nil)
               (:description
                "Defines a role with range from a specified concrete domain. 
			   The name is reminiscent of the OWL language which calls these roles 
			   datatype properties.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title define-concrete-domain-attribute)
               (:label define-concrete-domain-attribute)
               (:type :macro)
               (:macro-for defcdattribute)
               (:in-sections all-functions tbox-cd-tell)
               (:protected t)
               (:signature (name &key domain type))
               (:returns)
               (:arguments
                (name
                 :cd-attribute
                 "A concrete domain attribute, e.g. @ic{age}")
                (domain :concept-expression
                        "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (type
                 :cd-type
                 "A concrete domain base type, e.g. @ic{integer, racer-boolean, string, real}"))
               (:see-also nil)
               (:description "Defines a concrete domain attribute.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title define-concept)
               (:label define-concept)
               (:type :macro)
               (:macro-for add-concept-axiom)
               (:in-sections all-functions tbox-tell)
               (:protected t)
               (:signature (name definition))
               (:returns)
               (:arguments
                (name :concept-name "A concept name, e.g. @ic{woman}")
                (definition
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}"))
               (:see-also nil)
               (:description "Defines a concept.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title define-abox)
               (:label define-abox)
               (:type :macro)
               (:macro-for define-abox-1)
               (:in-sections all-functions abox-management)
               (:protected t)
               (:signature (abox-name &body axioms))
               (:returns)
               (:arguments
                (abox-name :abox-name
                           "The name of an ABox, e.g. @ic{family-abox}")
                (axioms
                 (:list :abox-assertion)
                 "A list of objects of the following type: An ABox assertion, e.g. @ic{(instance betty woman)}"))
               (:see-also nil)
               (:description nil)
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title datatype-role-filler)
               (:label datatype-role-filler)
               (:type :macro)
               (:macro-for add-datatype-role-filler)
               (:in-sections all-functions abox-owl-tell)
               (:protected t)
               (:signature (individual value role &optional type))
               (:returns)
               (:arguments
                (individual
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (value
                 :cd-value
                 "A concrete domain value, e.g. @ic{\"betty\"} or 35")
                (role
                 :datatype-property
                 "An OWL2 datatype property, a special role, e.g. @ic{hasAge}")
                (type
                 :datatype
                 "An OWL2 datatype description, e.g. @ic{(d-base-type |http://www.w3.org/2001/XMLSchema#integer|)}"))
               (:see-also nil)
               (:description
                "Adds a filler of a datatype role w.r.t. an individual.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title constraints)
               (:label constraints)
               (:type :macro)
               (:macro-for add-constraint-assertion)
               (:in-sections all-functions abox-cd-tell)
               (:protected t)
               (:signature (&body forms))
               (:returns)
               (:arguments
                (forms
                 (:list :cd-constraint-expression)
                 "A list of objects of the following type: A concrete-domain constraint expressions, e.g. @ic{(= temperature-fahrenheit (+ (* 1.8 temperature-celsius) 32))}"))
               (:see-also nil)
               (:description
                "This macro asserts a set of concrete domain predicates 
			   for concrete domain objects.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title constraint-entailed?)
               (:label constraint-entailed?)
               (:type :macro)
               (:macro-for constraint-entailed-p)
               (:in-sections all-functions abox-cd-ask)
               (:protected t)
               (:signature (constraint &optional abox-name))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (constraint :cd-constraint-expression
                            "A concrete-domain constraint expressions, e.g. @ic{(= temperature-fahrenheit (+ (* 1.8 temperature-celsius) 32))}")
                (abox-name :abox-name
                           "The name of an ABox, e.g. @ic{family-abox}"))
               (:see-also nil)
               (:description
                "Checks a specified constraint is entailed by an 
			   ABox (and its associated TBox).")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title constrained)
               (:label constrained)
               (:type :macro)
               (:macro-for add-attribute-assertion)
               (:in-sections all-functions abox-cd-tell)
               (:protected t)
               (:signature (individual object attribute))
               (:returns)
               (:arguments
                (individual
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (object
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (attribute
                 :cd-attribute
                 "A concrete domain attribute, e.g. @ic{age}"))
               (:see-also nil)
               (:description
                "Adds a concrete domain attribute assertion to an ABox. 
			   Asserts that an individual is related with a concrete domain object 
			   via an attribute.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title concept?)
               (:label concept?)
               (:type :macro)
               (:macro-for concept-p)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (concept-name &optional tbox-name))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (concept-name
                 :concept-name
                 "A concept name, e.g. @ic{woman}")
                (tbox-name :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "Checks if @arg{concept-name} is a concept name for a concept in the specified TBox.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title concept-synonyms)
               (:label concept-synonyms)
               (:type :macro)
               (:macro-for atomic-concept-synonyms)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (concept-term &optional tbox))
               (:returns
                (:list (:list :concept-name))
                "A list of objects of the following type: A list of objects of the following type: A concept name, e.g. @ic{woman}")
               (:arguments
                (concept-term :concept-expression
                              "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "Returns equivalent concepts for the specified concept in the given TBox.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title concept-subsumes?)
               (:label concept-subsumes?)
               (:type :macro)
               (:macro-for concept-subsumes-p)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (concept-1 concept-2 &optional tbox-name))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (concept-1
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (concept-2
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (tbox-name :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "Checks if two concept terms subsume each other.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title concept-satisfiable?)
               (:label concept-satisfiable?)
               (:type :macro)
               (:macro-for concept-satisfiable-p)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (concept-1 &optional tbox-name))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (concept-1
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (tbox-name :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "Checks if a concept term is satisfiable.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title concept-parents)
               (:label concept-parents)
               (:type :macro)
               (:macro-for atomic-concept-parents)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (concept-term &optional tbox))
               (:returns
                (:list (:list :concept-name))
                "A list of objects of the following type: A list of objects of the following type: A concept name, e.g. @ic{woman}")
               (:arguments
                (concept-term :concept-expression
                              "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "Gets the direct subsumers of the specified concept in the TBox.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title concept-is-primitive?)
               (:label concept-is-primitive?)
               (:type :macro)
               (:macro-for concept-is-primitive-p)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (concept-name &optional tbox))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (concept-name
                 :concept-name
                 "A concept name, e.g. @ic{woman}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "Checks if @arg{concept-name} is a concept name of a so-called 
				@arg{primitive} concept in the specified TBox.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title concept-instances)
               (:label concept-instances)
               (:type :macro)
               (:macro-for retrieve-concept-instances)
               (:in-sections all-functions abox-ask)
               (:protected t)
               (:signature (concept-term &optional abox candidates))
               (:returns
                (:list :abox-individual)
                "A list of objects of the following type: An ABox individual, e.g. @ic{betty}")
               (:arguments
                (concept-term :concept-expression
                              "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (candidates
                 (:list :abox-individual)
                 "A list of objects of the following type: An ABox individual, e.g. @ic{betty}"))
               (:see-also nil)
               (:description
                "Gets all individuals from an ABox that are instances 
			   of the specified concept.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title concept-equivalent?)
               (:label concept-equivalent?)
               (:type :macro)
               (:macro-for concept-equivalent-p)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (concept-1 concept-2 &optional tbox-name))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (concept-1
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (concept-2
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (tbox-name :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description nil)
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title concept-disjoint?)
               (:label concept-disjoint?)
               (:type :macro)
               (:macro-for concept-disjoint-p)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (concept-1 concept-2 &optional tbox-name))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (concept-1
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (concept-2
                 :concept-expression
                 "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (tbox-name :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "Checks if the two concepts are disjoint, e.g. 
			   no individual can be an instance of both concepts.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title concept-descendants)
               (:label concept-descendants)
               (:type :macro)
               (:macro-for atomic-concept-descendants)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (concept-term &optional tbox))
               (:returns
                (:list (:list :concept-name))
                "A list of objects of the following type: A list of objects of the following type: A concept name, e.g. @ic{woman}")
               (:arguments
                (concept-term :concept-expression
                              "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "Gets all atomic concepts of a TBox, which are 
			   subsumed by the specified concept.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title concept-children)
               (:label concept-children)
               (:type :macro)
               (:macro-for atomic-concept-children)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (concept-term &optional tbox))
               (:returns
                (:list (:list :concept-name))
                "A list of objects of the following type: A list of objects of the following type: A concept name, e.g. @ic{woman}")
               (:arguments
                (concept-term :concept-expression
                              "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "Gets the direct subsumees of the specified concept in the TBox.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title concept-ancestors)
               (:label concept-ancestors)
               (:type :macro)
               (:macro-for atomic-concept-ancestors)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (concept-term &optional tbox))
               (:returns
                (:list (:list :concept-name))
                "A list of objects of the following type: A list of objects of the following type: A concept name, e.g. @ic{woman}")
               (:arguments
                (concept-term :concept-expression
                              "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "Gets all atomic concepts of a TBox, which are subsuming 
			   the specified concept.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title clone-tbox)
               (:label clone-tbox)
               (:type :macro)
               (:macro-for create-tbox-clone)
               (:in-sections all-functions tbox-management)
               (:protected t)
               (:signature (tbox &key new-name overwrite))
               (:returns :tbox-name "A TBox name, e.g. @ic{family}")
               (:arguments
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (new-name :tbox-name "A TBox name, e.g. @ic{family}")
                (overwrite
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:see-also nil)
               (:description
                "Returns a new TBox object which is a clone of the 
			   given TBox. The clone keeps all declarations from its original 
			   but it is otherwise fresh, i.e., new declarations can be added. 
			   This function allows one to create new TBox versions without the 
			   need to reload the already known declarations.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title clone-abox)
               (:label clone-abox)
               (:type :macro)
               (:macro-for create-abox-clone)
               (:in-sections all-functions abox-management)
               (:protected t)
               (:signature (abox &key new-name overwrite))
               (:returns
                :abox-name
                "The name of an ABox, e.g. @ic{family-abox}")
               (:arguments
                (abox
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (new-name
                 :abox-name
                 "The name of an ABox, e.g. @ic{family-abox}")
                (overwrite
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)"))
               (:see-also nil)
               (:description
                "Returns a new ABox object which is a clone of the 
			   given ABox. The clone keeps the assertions and the state from its 
			   original but new declarations can be added without modifying the 
			   original ABox. This function allows one to create new ABox versions 
			   without the need to reload (and reprocess) the already known assertions.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title cd-object?)
               (:label cd-object?)
               (:type :macro)
               (:macro-for cd-object-p)
               (:in-sections all-functions abox-cd-ask)
               (:protected t)
               (:signature (object-name &optional abox-name))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (object-name
                 :cd-object
                 "A concrete domain object, e.g. @ic{betty-age}")
                (abox-name :abox-name
                           "The name of an ABox, e.g. @ic{family-abox}"))
               (:see-also nil)
               (:description
                "Checks if @arg{object-name} is a name of a concrete domain 
			   object mentioned in an ABox @arg{abox-name.}")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title cd-attribute?)
               (:label cd-attribute?)
               (:type :macro)
               (:macro-for cd-attribute-p)
               (:in-sections all-functions tbox-cd-ask)
               (:protected t)
               (:signature (attribute &optional tbox-name))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (attribute
                 :cd-attribute
                 "A concrete domain attribute, e.g. @ic{age}")
                (tbox-name :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "Checks if @arg{attribute} is a concrete domain attribute in the specified TBox.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title attribute-filler)
               (:label attribute-filler)
               (:type :macro)
               (:macro-for set-attribute-filler)
               (:in-sections all-functions tbox-cd-tell)
               (:protected t)
               (:signature (individual value attribute &optional type))
               (:returns)
               (:arguments
                (individual
                 :abox-individual
                 "An ABox individual, e.g. @ic{betty}")
                (value
                 :cd-value
                 "A concrete domain value, e.g. @ic{\"betty\"} or 35")
                (attribute
                 :cd-attribute
                 "A concrete domain attribute, e.g. @ic{age}")
                (type
                 :cd-type
                 "A concrete domain base type, e.g. @ic{integer, racer-boolean, string, real}"))
               (:see-also nil)
               (:description
                "Set the filler of an attribute w.r.t. an individual.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title attribute-domain)
               (:label attribute-domain)
               (:type :macro)
               (:macro-for atomic-role-domain)
               (:in-sections all-functions tbox-cd-ask)
               (:protected t)
               (:signature (attribute-name &optional tbox))
               (:returns
                :concept-expression
                "A Racer concept expression, e.g. @ic{(and (some has-child person) woman)}")
               (:arguments
                (attribute-name
                 :cd-attribute
                 "A concrete domain attribute, e.g. @ic{age}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description
                "Returns the domain of attribute name @arg{attribute-name.}")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title asymmetric?)
               (:label asymmetric?)
               (:type :macro)
               (:macro-for asymmetric-p)
               (:in-sections all-functions tbox-ask)
               (:protected t)
               (:signature (role-term &optional tbox-name))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (role-term :role "A role, e.g. @ic{has-child}")
                (tbox-name :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description nil)
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title asymmetric)
               (:label asymmetric)
               (:type :macro)
               (:macro-for role-is-asymmetric)
               (:in-sections all-functions tbox-tell)
               (:protected t)
               (:signature (rolename &optional tbox))
               (:returns)
               (:arguments
                (rolename :role "A role, e.g. @ic{has-child}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}"))
               (:see-also nil)
               (:description nil)
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title all-different)
               (:label all-different)
               (:type :macro)
               (:macro-for add-all-different-assertion)
               (:in-sections all-functions abox-tell)
               (:protected t)
               (:signature (&rest individual-name-set))
               (:returns)
               (:arguments
                (individual-name-set (:list :abox-individual)
                                     "A list of objects of the following type: An ABox individual, e.g. @ic{betty}"))
               (:see-also nil)
               (:description
                "This form declares the argument individuals NOT to 
			   refer to the same domain object.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title abox-una-consistent?)
               (:label abox-una-consistent?)
               (:type :macro)
               (:macro-for abox-una-consistent-p)
               (:in-sections all-functions abox-ask)
               (:protected t)
               (:signature (&optional abox-name))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (abox-name :abox-name
                           "The name of an ABox, e.g. @ic{family-abox}"))
               (:see-also nil)
               (:description
                "Checks if the ABox is consistent if the unique name assumption is imposed.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title abox-realized?)
               (:label abox-realized?)
               (:type :macro)
               (:macro-for abox-realized-p)
               (:in-sections all-functions abox-ask)
               (:protected t)
               (:signature (&optional abox-name))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (abox-name :abox-name
                           "The name of an ABox, e.g. @ic{family-abox}"))
               (:see-also nil)
               (:description
                "Returns @ic{t} if the specified ABox object has been realized.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title abox-prepared?)
               (:label abox-prepared?)
               (:type :macro)
               (:macro-for abox-prepared-p)
               (:in-sections all-functions abox-ask)
               (:protected t)
               (:signature (&optional abox-name))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (abox-name :abox-name
                           "The name of an ABox, e.g. @ic{family-abox}"))
               (:see-also nil)
               (:description
                "It is checked if internal index structures are 
			   already computed for the specified abox.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title abox-consistent?)
               (:label abox-consistent?)
               (:type :macro)
               (:macro-for abox-consistent-p)
               (:in-sections all-functions abox-ask)
               (:protected t)
               (:signature (&optional abox-name))
               (:returns
                :boolean
                "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
               (:arguments
                (abox-name :abox-name
                           "The name of an ABox, e.g. @ic{family-abox}"))
               (:see-also nil)
               (:description "Checks if the ABox is consistent.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title undefquery)
               (:label undefquery)
               (:type :macro)
               (:macro-for undefine-query)
               (:see-also undefine-query))

(add-doc-entry (:title undefine)
               (:label undefine)
               (:type :macro)
               (:macro-for undefine1)
               (:see-also undefine1))

(add-doc-entry (:title unbind)
               (:label unbind)
               (:type :macro)
               (:macro-for unbind1)
               (:see-also unbind1))

(add-doc-entry (:title tbox-retrieve1)
               (:label tbox-retrieve1)
               (:type :macro)
               (:macro-for racer-answer-tbox-query1)
               (:see-also racer-answer-tbox-query1))

(add-doc-entry (:title tbox-retrieve)
               (:label tbox-retrieve)
               (:type :macro)
               (:macro-for racer-answer-tbox-query)
               (:see-also racer-answer-tbox-query))

(add-doc-entry (:title retrieve1)
               (:label retrieve1)
               (:type :macro)
               (:macro-for racer-answer-query1)
               (:see-also racer-answer-query1)
               (:query-equivalent-of apply-abox-rule1))

(add-doc-entry (:title retrieve-with-explanation)
               (:label retrieve-with-explanation)
               (:type :macro)
               (:macro-for racer-answer-query-with-explanation)
               (:see-also racer-answer-query-with-explanation))

(add-doc-entry (:title retrieve-under-premise1)
               (:label retrieve-under-premise1)
               (:type :macro)
               (:macro-for racer-answer-query-under-premise1)
               (:see-also racer-answer-query-under-premise1)
               (:query-equivalent-of apply-abox-rule-under-premise1))

(add-doc-entry (:title retrieve-under-premise)
               (:label retrieve-under-premise)
               (:type :macro)
               (:macro-for racer-answer-query-under-premise)
               (:see-also racer-answer-query-under-premise)
               (:query-equivalent-of apply-abox-rule-under-premise))

(add-doc-entry (:title retrieve)
               (:label retrieve)
               (:type :macro)
               (:macro-for racer-answer-query)
               (:see-also racer-answer-query)
               (:query-equivalent-of apply-abox-rule))

(add-doc-entry (:title rcc-synonym)
               (:label rcc-synonym)
               (:type :macro)
               (:macro-for register-rcc-synonym)
               (:see-also register-rcc-synonym))

(add-doc-entry (:title rcc-related)
               (:label rcc-related)
               (:type :macro)
               (:macro-for rcc-related1)
               (:see-also rcc-related1))

(add-doc-entry (:title rcc-node-label)
               (:label rcc-node-label)
               (:type :macro)
               (:macro-for rcc-node-label1)
               (:see-also rcc-node-label1))

(add-doc-entry (:title rcc-node-description)
               (:label rcc-node-description)
               (:type :macro)
               (:macro-for rcc-node-description1)
               (:see-also rcc-node-description1))

(add-doc-entry (:title rcc-node)
               (:label rcc-node)
               (:type :macro)
               (:macro-for rcc-node1)
               (:see-also rcc-node1))

(add-doc-entry (:title rcc-instance)
               (:label rcc-instance)
               (:type :macro)
               (:macro-for rcc-instance1)
               (:see-also rcc-instance1))

(add-doc-entry (:title rcc-edge-label)
               (:label rcc-edge-label)
               (:type :macro)
               (:macro-for rcc-edge-label1)
               (:see-also rcc-edge-label1))

(add-doc-entry (:title rcc-edge-description)
               (:label rcc-edge-description)
               (:type :macro)
               (:macro-for rcc-edge-description1)
               (:see-also rcc-edge-description1))

(add-doc-entry (:title rcc-edge)
               (:label rcc-edge)
               (:type :macro)
               (:macro-for rcc-edge1)
               (:see-also rcc-edge1))

(add-doc-entry (:title rcc-consistent?)
               (:label rcc-consistent?)
               (:type :macro)
               (:macro-for rcc-consistent-p)
               (:see-also rcc-consistent-p))

(add-doc-entry (:title preprule1)
               (:label preprule1)
               (:type :synonym-macro)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for prepare-abox-rule1))

(add-doc-entry (:title preprule)
               (:label preprule)
               (:type :synonym-macro)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for prepare-abox-rule))

(add-doc-entry (:title prepare-tbox-query1)
               (:label prepare-tbox-query1)
               (:type :macro)
               (:macro-for racer-prepare-tbox-query1)
               (:see-also racer-prepare-tbox-query1))

(add-doc-entry (:title prepare-tbox-query)
               (:label prepare-tbox-query)
               (:type :macro)
               (:macro-for racer-prepare-tbox-query)
               (:see-also racer-prepare-tbox-query))

(add-doc-entry (:title prepare-abox-rule1)
               (:label prepare-abox-rule1)
               (:type :macro)
               (:macro-for racer-prepare-rule1)
               (:see-also racer-prepare-rule1))

(add-doc-entry (:title prepare-abox-rule)
               (:label prepare-abox-rule)
               (:type :macro)
               (:macro-for racer-prepare-rule)
               (:see-also racer-prepare-rule)
               (:rule-equivalent-of prepare-abox-query))

(add-doc-entry (:title prepare-abox-query1)
               (:label prepare-abox-query1)
               (:type :macro)
               (:macro-for racer-prepare-query1)
               (:see-also racer-prepare-query1))

(add-doc-entry (:title prepare-abox-query)
               (:label prepare-abox-query)
               (:type :macro)
               (:macro-for racer-prepare-query)
               (:see-also racer-prepare-query)
               (:query-equivalent-of prepare-abox-rule))

(add-doc-entry (:title node-label)
               (:label node-label)
               (:type :macro)
               (:macro-for node-label1)
               (:see-also node-label1))

(add-doc-entry (:title node-description)
               (:label node-description)
               (:type :macro)
               (:macro-for node-description1)
               (:see-also node-description1))

(add-doc-entry (:title in-rcc-box)
               (:label in-rcc-box)
               (:type :macro)
               (:macro-for set-rcc-box)
               (:see-also set-rcc-box))

(add-doc-entry (:title in-mirror-data-box)
               (:label in-mirror-data-box)
               (:type :macro)
               (:macro-for set-mirror-data-box)
               (:see-also set-mirror-data-box))

(add-doc-entry (:title in-data-box)
               (:label in-data-box)
               (:type :macro)
               (:macro-for set-data-box)
               (:see-also set-data-box))

(add-doc-entry (:title firerule1)
               (:label firerule1)
               (:type :synonym-macro)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for apply-abox-rule1))

(add-doc-entry (:title firerule-under-premise1)
               (:label firerule-under-premise1)
               (:type :synonym-macro)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for apply-abox-rule-under-premise1))

(add-doc-entry (:title firerule-under-premise)
               (:label firerule-under-premise)
               (:type :synonym-macro)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for apply-abox-rule-under-premise))

(add-doc-entry (:title firerule)
               (:label firerule)
               (:type :synonym-macro)
               (:in-sections all-functions)
               (:protected t)
               (:synonym-for apply-abox-rule))

(add-doc-entry (:title evaluate)
               (:label evaluate)
               (:type :macro)
               (:macro-for evaluate1)
               (:see-also evaluate1))

(add-doc-entry (:title edge-label)
               (:label edge-label)
               (:type :macro)
               (:macro-for edge-label1)
               (:see-also edge-label1))

(add-doc-entry (:title edge-description)
               (:label edge-description)
               (:type :macro)
               (:macro-for edge-description1)
               (:see-also edge-description1))

(add-doc-entry (:title description-implies?)
               (:label description-implies?)
               (:type :macro)
               (:macro-for description-implies-p)
               (:see-also description-implies-p))

(add-doc-entry (:title del-rcc-node)
               (:label del-rcc-node)
               (:type :macro)
               (:macro-for del-rcc-node1)
               (:see-also del-rcc-node1))

(add-doc-entry (:title del-rcc-edge)
               (:label del-rcc-edge)
               (:type :macro)
               (:macro-for del-rcc-edge1)
               (:see-also del-rcc-edge1))

(add-doc-entry (:title del-doc-entry)
               (:label del-doc-entry)
               (:type :macro)
               (:macro-for del-doc-entry1)
               (:see-also del-doc-entry1))

(add-doc-entry (:title del-data-node)
               (:label del-data-node)
               (:type :macro)
               (:macro-for del-data-node1)
               (:see-also del-data-node1))

(add-doc-entry (:title del-data-edge)
               (:label del-data-edge)
               (:type :macro)
               (:macro-for del-data-edge1)
               (:see-also del-data-edge1))

(add-doc-entry (:title defquery)
               (:label defquery)
               (:type :macro)
               (:macro-for define-query)
               (:see-also define-query))

(add-doc-entry (:title defpar)
               (:label defpar)
               (:type :macro)
               (:macro-for defpar1)
               (:see-also defpar1))

(add-doc-entry (:title define)
               (:label define)
               (:type :macro)
               (:macro-for define1)
               (:see-also define1))

(add-doc-entry (:title defcon)
               (:label defcon)
               (:type :macro)
               (:macro-for defcon1)
               (:see-also defcon1))

(add-doc-entry (:title def-and-prep-query)
               (:label def-and-prep-query)
               (:type :macro)
               (:macro-for define-and-prepare-query)
               (:see-also define-and-prepare-query))

(add-doc-entry (:title def-and-exec-query)
               (:label def-and-exec-query)
               (:type :macro)
               (:macro-for define-and-execute-query)
               (:see-also define-and-execute-query))

(add-doc-entry (:title data-node)
               (:label data-node)
               (:type :macro)
               (:macro-for data-node1)
               (:see-also data-node1))

(add-doc-entry (:title data-edge)
               (:label data-edge)
               (:type :macro)
               (:macro-for data-edge1)
               (:see-also data-edge1))

(add-doc-entry (:title compute-abox-difference-alternative)
               (:label compute-abox-difference-alternative)
               (:type :macro)
               (:macro-for compute-abox-difference2)
               (:see-also compute-abox-difference2))

(add-doc-entry (:title compute-abox-difference)
               (:label compute-abox-difference)
               (:type :macro)
               (:macro-for compute-abox-difference1)
               (:see-also compute-abox-difference1))

(add-doc-entry (:title apply-abox-rule1)
               (:label apply-abox-rule1)
               (:type :macro)
               (:macro-for racer-apply-rule1)
               (:see-also racer-apply-rule1)
               (:rule-equivalent-of retrieve1))

(add-doc-entry (:title apply-abox-rule-under-premise1)
               (:label apply-abox-rule-under-premise1)
               (:type :macro)
               (:macro-for racer-apply-rule-under-premise1)
               (:see-also racer-apply-rule-under-premise1)
               (:rule-equivalent-of retrieve-under-premise1))

(add-doc-entry (:title apply-abox-rule-under-premise)
               (:label apply-abox-rule-under-premise)
               (:type :macro)
               (:macro-for racer-apply-rule-under-premise)
               (:see-also racer-apply-rule-under-premise)
               (:rule-equivalent-of retrieve-under-premise))

(add-doc-entry (:title apply-abox-rule)
               (:label apply-abox-rule)
               (:type :macro)
               (:macro-for racer-apply-rule)
               (:see-also racer-apply-rule)
               (:rule-equivalent-of retrieve))

(add-doc-entry (:title add-doc-phrase)
               (:label add-doc-phrase)
               (:type :macro)
               (:macro-for add-doc-phrase1)
               (:see-also add-doc-phrase1))

(add-doc-entry (:title add-doc-image-file)
               (:label add-doc-image-file)
               (:type :macro)
               (:macro-for add-doc-image-file1)
               (:see-also add-doc-image-file1))

(add-doc-entry (:title add-doc-image-data-from-file)
               (:label add-doc-image-data-from-file)
               (:type :macro)
               (:macro-for add-doc-image-data-from-file1)
               (:see-also add-doc-image-data-from-file1))

(add-doc-entry (:title add-doc-image-data)
               (:label add-doc-image-data)
               (:type :macro)
               (:macro-for add-doc-image-data1)
               (:see-also add-doc-image-data1))

(add-doc-entry (:title add-doc-entry)
               (:label add-doc-entry)
               (:type :macro)
               (:macro-for add-doc-entry1)
               (:see-also add-doc-entry1))

(add-doc-entry (:title with-bindings)
               (:label with-bindings)
               (:type :env-macro)
               (:macro-for eval-with-bindings)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature ((&key) &body body))
               (:arguments (&body "a description" :type))
               (:see-also)
               (:description
                "If a nRQL query is executed in a @arg{with-bindings}, 
			   lexical environment, then the variables in the query is 
			   considered to be bound as established here.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title with-bindings-evaluated)
               (:label with-bindings-evaluated)
               (:type :env-macro)
               (:macro-for eval-with-bindings)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature ((&key) &body body))
               (:arguments (&body "a description" :type))
               (:see-also)
               (:description
                "Like @funref{with-bindings}, but now the individual forms
			   (entries) in @funref{binding-list} are evaluated to produce the 
			   individual (variable value) pairs.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title with-critical-section)
               (:label with-critical-section)
               (:type :env-macro)
               (:macro-for nil)
               (:in-sections all-functions general)
               (:protected t)
               (:signature (&body body))
               (:arguments (&body "a description" :type))
               (:see-also)
               (:description nil)
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title with-future-bindings)
               (:label with-future-bindings)
               (:type :env-macro)
               (:macro-for eval-with-future-bindings)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature ((&key) &body body))
               (:arguments (&body "a description" :type))
               (:see-also with-future-bindings-evaluated)
               (:description
                "Sometimes, a query must be prepared 
			   (i.e., parsed and compiled) with a premise at execution time, 
			   binding to certain variables in that query will be established, 
			   this means, if @funref{execute-query}, is called in a lexical 
			   environment where certain variables are bound in advance with
			   @funref{with-bindings}. During prepartion time, the query optimizer 
			   must thus be informed that these variables are in fact treated as 
			   individuals. This is what @funref{with-future-bindings} does: 
			   It declares the variables to be individuals, and for query execution 
			   promisses that these variables will be bound with @funref{with-bindings}")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title with-future-bindings-evaluated)
               (:label with-future-bindings-evaluated)
               (:type :env-macro)
               (:macro-for eval-with-future-bindings)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature ((&key) &body body))
               (:arguments (&body "a description" :type))
               (:see-also)
               (:description
                "Like @funref{with-future-bindings}, but now @arg{list-of-variables}
			   is evaluated to produce the list of variables.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title with-nrql-settings)
               (:label with-nrql-settings)
               (:type :env-macro)
               (:macro-for eval-nrql-settings)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature
                ((&key
                  mode
                  dont-show-variables
                  dont-show-lambdas
                  dont-show-head-projection-operators
                  abox-mirroring
                  query-optimization
                  optimizer-use-cardinality-heuristics
                  how-many-tuples
                  timeout
                  warnings
                  add-rule-consequences-automatically
                  dont-add-abox-duplicates
                  two-phase-query-processing-mode
                  phase-two-starts-warning-tokens
                  kb-has-changed-warning-tokens
                  told-information-querying
                  tuple-computation-mode
                  exclude-permutations
                  query-repository
                  report-inconsistent-queries
                  report-tautological-queries
                  query-realization
                  bindings
                  check-abox-consistency
                  use-individual-equivalence-classes
                  rewrite-to-dnf
                  type-of-substrate
                  abox
                  tbox)
                 &body
                 body))
               (:arguments
                (mode
                 :non-negative-integer
                 "A non-negative integer (possibly 0)")
                (dont-show-variables :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-lambdas
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-head-projection-operators
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (abox-mirroring
                 (:one-of nil t :smart :very-smart)
                 "One of the following symbols: @ic{nil, t, :smart, :very-smart}")
                (query-optimization
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (optimizer-use-cardinality-heuristics :boolean
                                                      "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (how-many-tuples
                 :non-negative-integer
                 "A non-negative integer (possibly 0)")
                (timeout :non-negative-integer
                         "A non-negative integer (possibly 0)")
                (warnings
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (add-rule-consequences-automatically :boolean
                                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-add-abox-duplicates
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (two-phase-query-processing-mode
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (phase-two-starts-warning-tokens
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (kb-has-changed-warning-tokens
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (told-information-querying
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (tuple-computation-mode
                 (:one-of
                  :tuple-at-a-time-lazy
                  :tuple-at-a-time-eager
                  :set-at-a-time)
                 "One of the following symbols: @ic{:tuple-at-a-time-lazy, :tuple-at-a-time-eager, :set-at-a-time}")
                (exclude-permutations :boolean
                                      "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (query-repository
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-inconsistent-queries
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-tautological-queries
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (query-realization
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (bindings (:list
                           (:list
                            :nrql-var
                            (:or :abox-individual :substrate-node)))
                          "A list of objects of the following type: A list of length 2 with objects of the following types: A nRQL query variable, e.g. @ic{?x} or @ic{?*x}, One of the following:  An ABox individual, e.g. @ic{betty}, A substrate node, a symbol, e.g. @ic{person1}")
                (check-abox-consistency :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-individual-equivalence-classes
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-to-dnf
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (&body "a description" :type))
               (:see-also
                describe-query-processing-mode
                with-nrql-settings-evaluated
                set-nrql-mode
                execute-query
                racer-prepare-query
                get-answer)
               (:description
                "Establishes a lexical local environment shaddowing the 
			   global environment in which the query answering switches resp.
			   the corresponding variables are rebound to specified values. 
			   The argument forms are not evaluated (see also 
			   @funref{with-nrql-settings-evaluated})")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title with-nrql-settings-evaluated)
               (:label with-nrql-settings-evaluated)
               (:type :env-macro)
               (:macro-for eval-nrql-settings)
               (:in-sections all-functions nrql-abox)
               (:protected t)
               (:signature
                ((&key
                  mode
                  dont-show-variables
                  dont-show-lambdas
                  dont-show-head-projection-operators
                  abox-mirroring
                  query-optimization
                  optimizer-use-cardinality-heuristics
                  how-many-tuples
                  timeout
                  warnings
                  add-rule-consequences-automatically
                  dont-add-abox-duplicates
                  two-phase-query-processing-mode
                  phase-two-starts-warning-tokens
                  kb-has-changed-warning-tokens
                  told-information-querying
                  tuple-computation-mode
                  exclude-permutations
                  query-repository
                  report-inconsistent-queries
                  report-tautological-queries
                  query-realization
                  bindings
                  check-abox-consistency
                  use-individual-equivalence-classes
                  rewrite-to-dnf
                  type-of-substrate
                  abox
                  tbox)
                 &body
                 body))
               (:arguments
                (mode
                 :non-negative-integer
                 "A non-negative integer (possibly 0)")
                (dont-show-variables :boolean
                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-lambdas
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-show-head-projection-operators
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (abox-mirroring
                 (:one-of nil t :smart :very-smart)
                 "One of the following symbols: @ic{nil, t, :smart, :very-smart}")
                (query-optimization
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (optimizer-use-cardinality-heuristics :boolean
                                                      "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (how-many-tuples
                 :non-negative-integer
                 "A non-negative integer (possibly 0)")
                (timeout :non-negative-integer
                         "A non-negative integer (possibly 0)")
                (warnings
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (add-rule-consequences-automatically :boolean
                                                     "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (dont-add-abox-duplicates
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (two-phase-query-processing-mode
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (phase-two-starts-warning-tokens
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (kb-has-changed-warning-tokens
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (told-information-querying
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (tuple-computation-mode
                 (:one-of
                  :tuple-at-a-time-lazy
                  :tuple-at-a-time-eager
                  :set-at-a-time)
                 "One of the following symbols: @ic{:tuple-at-a-time-lazy, :tuple-at-a-time-eager, :set-at-a-time}")
                (exclude-permutations :boolean
                                      "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (query-repository
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-inconsistent-queries
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (report-tautological-queries
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (query-realization
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (bindings (:list
                           (:list
                            :nrql-var
                            (:or :abox-individual :substrate-node)))
                          "A list of objects of the following type: A list of length 2 with objects of the following types: A nRQL query variable, e.g. @ic{?x} or @ic{?*x}, One of the following:  An ABox individual, e.g. @ic{betty}, A substrate node, a symbol, e.g. @ic{person1}")
                (check-abox-consistency :boolean
                                        "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (use-individual-equivalence-classes
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (rewrite-to-dnf
                 :boolean
                 "A boolean: @ic{t} (= true) or @ic{nil} (= false)")
                (type-of-substrate
                 (:one-of
                  :data-substrate
                  :rcc-substrate
                  :mirror-data-substrate
                  :rcc-mirror-substrate)
                 "One of the following symbols: @ic{:data-substrate, :rcc-substrate, :mirror-data-substrate, :rcc-mirror-substrate}")
                (abox :abox-name
                      "The name of an ABox, e.g. @ic{family-abox}")
                (tbox :tbox-name "A TBox name, e.g. @ic{family}")
                (&body "a description" :type))
               (:see-also)
               (:description
                "Like @funref{with-nrql-settings}, but now the argument forms are 
			   evaluated.")
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title with-unique-name-assumption)
               (:label with-unique-name-assumption)
               (:type :env-macro)
               (:macro-for nil)
               (:in-sections all-functions abox-management)
               (:protected t)
               (:signature (&body body))
               (:arguments (&body "a description" :type))
               (:see-also)
               (:description nil)
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title without-unique-name-assumption)
               (:label without-unique-name-assumption)
               (:type :env-macro)
               (:macro-for nil)
               (:in-sections all-functions abox-management)
               (:protected t)
               (:signature (&body body))
               (:arguments (&body "a description" :type))
               (:see-also)
               (:description nil)
               (:remarks nil)
               (:examples nil))

(add-doc-entry (:title owlapi-write-xml-ontology-file)
               (:label owlapi-write-xml-ontology-file)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-writeXMLOntologyFile|))

(add-doc-entry (:title owlapi-write-ontology-file)
               (:label owlapi-write-ontology-file)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-writeOntologyFile|))

(add-doc-entry (:title owlapi-write-functional-ontology-file)
               (:label owlapi-write-functional-ontology-file)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-writeFunctionalOntologyFile|))

(add-doc-entry (:title owlapi-uses-simplified-protocol)
               (:label owlapi-uses-simplified-protocol)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-usesSimplifiedProtocol|))

(add-doc-entry (:title owlapi-uses-incremental-updates)
               (:label owlapi-uses-incremental-updates)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-usesIncrementalUpdates|))

(add-doc-entry (:title owlapi-unload-ontology)
               (:label owlapi-unload-ontology)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-unloadOntology|))

(add-doc-entry (:title owlapi-unload-ontologies)
               (:label owlapi-unload-ontologies)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-unloadOntologies|))

(add-doc-entry (:title owlapi-unload-axioms)
               (:label owlapi-unload-axioms)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-unloadAxioms|))

(add-doc-entry (:title owlapi-unload-axiom)
               (:label owlapi-unload-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-unloadAxiom|))

(add-doc-entry (:title owlapi-store-image)
               (:label owlapi-store-image)
               (:type :synonym-function)
               (:in-sections
                all-functions
                owlapi-management
                io
                persistence)
               (:protected t)
               (:synonym-for |OWLAPI-storeImage|))

(add-doc-entry (:title owlapi-sleep)
               (:label owlapi-sleep)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-sleep|))

(add-doc-entry (:title owlapi-set-return-policy)
               (:label owlapi-set-return-policy)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-setReturnPolicy|))

(add-doc-entry (:title owlapi-set-progress-range)
               (:label owlapi-set-progress-range)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for |OWLAPI-setProgressRange|))

(add-doc-entry (:title owlapi-set-progress)
               (:label owlapi-set-progress)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for |OWLAPI-setProgress|))

(add-doc-entry (:title owlapi-set-current-reasoner)
               (:label owlapi-set-current-reasoner)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-setCurrentReasoner|))

(add-doc-entry (:title owlapi-set-axiom-counter)
               (:label owlapi-set-axiom-counter)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-setAxiomCounter|))

(add-doc-entry (:title owlapi-set-auto-declare-data-properties)
               (:label owlapi-set-auto-declare-data-properties)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-setAutoDeclareDataProperties|))

(add-doc-entry (:title owlapi-save-ontology)
               (:label owlapi-save-ontology)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management io)
               (:protected t)
               (:synonym-for |OWLAPI-saveOntology|))

(add-doc-entry (:title owlapi-restore-image)
               (:label owlapi-restore-image)
               (:type :synonym-function)
               (:in-sections
                all-functions
                owlapi-management
                io
                persistence)
               (:protected t)
               (:synonym-for |OWLAPI-restoreImage|))

(add-doc-entry (:title owlapi-reset-axiom-counter)
               (:label owlapi-reset-axiom-counter)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-resetAxiomCounter|))

(add-doc-entry (:title owlapi-remove-prefix)
               (:label owlapi-remove-prefix)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-removePrefix|))

(add-doc-entry (:title owlapi-reload-loaded-ontologies)
               (:label owlapi-reload-loaded-ontologies)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-reloadLoadedOntologies|))

(add-doc-entry (:title owlapi-register-referenced-entities)
               (:label owlapi-register-referenced-entities)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-registerReferencedEntities|))

(add-doc-entry (:title owlapi-register-object)
               (:label owlapi-register-object)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-registerObject|))

(add-doc-entry (:title owlapi-register-last-answer)
               (:label owlapi-register-last-answer)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-registerLastAnswer|))

(add-doc-entry (:title owlapi-register-declared-entities)
               (:label owlapi-register-declared-entities)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-registerDeclaredEntities|))

(add-doc-entry (:title owlapi-realize)
               (:label owlapi-realize)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-realize|))

(add-doc-entry (:title owlapi-read-xml-ontology-file)
               (:label owlapi-read-xml-ontology-file)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management io)
               (:protected t)
               (:synonym-for |OWLAPI-readXMLOntologyFile|))

(add-doc-entry (:title owlapi-read-xml-ontology-document)
               (:label owlapi-read-xml-ontology-document)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management io)
               (:protected t)
               (:synonym-for |OWLAPI-readXMLOntologyDocument|))

(add-doc-entry (:title owlapi-read-ontology)
               (:label owlapi-read-ontology)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management io)
               (:protected t)
               (:synonym-for |OWLAPI-readOntology|))

(add-doc-entry (:title owlapi-read-functional-ontology-file)
               (:label owlapi-read-functional-ontology-file)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management io)
               (:protected t)
               (:synonym-for |OWLAPI-readFunctionalOntologyFile|))

(add-doc-entry (:title owlapi-read-functional-ontology-document)
               (:label owlapi-read-functional-ontology-document)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management io)
               (:protected t)
               (:synonym-for |OWLAPI-readFunctionalOntologyDocument|))

(add-doc-entry (:title owlapi-parse-native)
               (:label owlapi-parse-native)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-parseNative|))

(add-doc-entry (:title owlapi-parse)
               (:label owlapi-parse)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-parse|))

(add-doc-entry (:title owlapi-next-axiom-use-id)
               (:label owlapi-next-axiom-use-id)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-nextAxiomUseID|))

(add-doc-entry (:title owlapi-new-reasoner1)
               (:label owlapi-new-reasoner1)
               (:type :synonym-function)
               (:in-sections all-functions ignore)
               (:protected t)
               (:synonym-for |OWLAPI-newReasoner1|))

(add-doc-entry (:title owlapi-new-reasoner)
               (:label owlapi-new-reasoner)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-newReasoner|))

(add-doc-entry (:title owlapi-new-ontology)
               (:label owlapi-new-ontology)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-newOntology|))

(add-doc-entry (:title owlapi-merge-ontologies)
               (:label owlapi-merge-ontologies)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-mergeOntologies|))

(add-doc-entry (:title owlapi-manually-apply-changes)
               (:label owlapi-manually-apply-changes)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-manuallyApplyChanges|))

(add-doc-entry (:title owlapi-load-ontology)
               (:label owlapi-load-ontology)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-loadOntology|))

(add-doc-entry (:title owlapi-load-ontologies)
               (:label owlapi-load-ontologies)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-loadOntologies|))

(add-doc-entry (:title owlapi-load-axioms)
               (:label owlapi-load-axioms)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-loadAxioms|))

(add-doc-entry (:title owlapi-load-axiom)
               (:label owlapi-load-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-loadAxiom|))

(add-doc-entry (:title owlapi-keep-annotations)
               (:label owlapi-keep-annotations)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-keepAnnotations|))

(add-doc-entry (:title owlapi-is-transitive)
               (:label owlapi-is-transitive)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-isTransitive|))

(add-doc-entry (:title owlapi-is-symmetric)
               (:label owlapi-is-symmetric)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-isSymmetric|))

(add-doc-entry (:title owlapi-is-sub-class-of)
               (:label owlapi-is-sub-class-of)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-isSubClassOf|))

(add-doc-entry (:title owlapi-is-satisfiable)
               (:label owlapi-is-satisfiable)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-isSatisfiable|))

(add-doc-entry (:title owlapi-is-same-individual)
               (:label owlapi-is-same-individual)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-isSameIndividual|))

(add-doc-entry (:title owlapi-is-reflexive)
               (:label owlapi-is-reflexive)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-isReflexive|))

(add-doc-entry (:title owlapi-is-realised)
               (:label owlapi-is-realised)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-isRealised|))

(add-doc-entry (:title owlapi-is-irreflexive)
               (:label owlapi-is-irreflexive)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-isIrreflexive|))

(add-doc-entry (:title owlapi-is-inverse-functional)
               (:label owlapi-is-inverse-functional)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-isInverseFunctional|))

(add-doc-entry (:title owlapi-is-functional)
               (:label owlapi-is-functional)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-isFunctional|))

(add-doc-entry (:title owlapi-is-equivalent-class)
               (:label owlapi-is-equivalent-class)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-isEquivalentClass|))

(add-doc-entry (:title owlapi-is-entailed)
               (:label owlapi-is-entailed)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-isEntailed|))

(add-doc-entry (:title owlapi-is-different-individual)
               (:label owlapi-is-different-individual)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-isDifferentIndividual|))

(add-doc-entry (:title owlapi-is-defined-object-property)
               (:label owlapi-is-defined-object-property)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-isDefinedObjectProperty|))

(add-doc-entry (:title owlapi-is-defined-individual)
               (:label owlapi-is-defined-individual)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-isDefinedIndividual|))

(add-doc-entry (:title owlapi-is-defined-data-property)
               (:label owlapi-is-defined-data-property)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-isDefinedDataProperty|))

(add-doc-entry (:title owlapi-is-defined-class)
               (:label owlapi-is-defined-class)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-isDefinedClass|))

(add-doc-entry (:title owlapi-is-consistent)
               (:label owlapi-is-consistent)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-isConsistent|))

(add-doc-entry (:title owlapi-is-classified)
               (:label owlapi-is-classified)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-isClassified|))

(add-doc-entry (:title owlapi-is-class)
               (:label owlapi-is-class)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-isClass|))

(add-doc-entry (:title owlapi-is-asymmetric)
               (:label owlapi-is-asymmetric)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-isAsymmetric|))

(add-doc-entry (:title owlapi-init)
               (:label owlapi-init)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-init|))

(add-doc-entry (:title owlapi-ignore-declarations)
               (:label owlapi-ignore-declarations)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-ignoreDeclarations|))

(add-doc-entry (:title owlapi-ignore-annotations)
               (:label owlapi-ignore-annotations)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-ignoreAnnotations|))

(add-doc-entry (:title owlapi-has-type)
               (:label owlapi-has-type)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-hasType|))

(add-doc-entry (:title owlapi-has-object-property-relationship)
               (:label owlapi-has-object-property-relationship)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-hasObjectPropertyRelationship|))

(add-doc-entry (:title owlapi-has-data-property-relationship)
               (:label owlapi-has-data-property-relationship)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-hasDataPropertyRelationship|))

(add-doc-entry (:title owlapi-get-types)
               (:label owlapi-get-types)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-getTypes|))

(add-doc-entry (:title owlapi-get-super-properties)
               (:label owlapi-get-super-properties)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-getSuperProperties|))

(add-doc-entry (:title owlapi-get-super-classes)
               (:label owlapi-get-super-classes)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-getSuperClasses|))

(add-doc-entry (:title owlapi-get-sub-properties)
               (:label owlapi-get-sub-properties)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-getSubProperties|))

(add-doc-entry (:title owlapi-get-sub-classes)
               (:label owlapi-get-sub-classes)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-getSubClasses|))

(add-doc-entry (:title owlapi-get-same-individuals)
               (:label owlapi-get-same-individuals)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-getSameIndividuals|))

(add-doc-entry (:title owlapi-get-related-values)
               (:label owlapi-get-related-values)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-getRelatedValues|))

(add-doc-entry (:title owlapi-get-related-individuals)
               (:label owlapi-get-related-individuals)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-getRelatedIndividuals|))

(add-doc-entry (:title owlapi-get-reasoners)
               (:label owlapi-get-reasoners)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-getReasoners|))

(add-doc-entry (:title owlapi-get-ranges)
               (:label owlapi-get-ranges)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-getRanges|))

(add-doc-entry (:title owlapi-get-prefixes)
               (:label owlapi-get-prefixes)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-getPrefixes|))

(add-doc-entry (:title owlapi-get-ontologies)
               (:label owlapi-get-ontologies)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-getOntologies|))

(add-doc-entry (:title owlapi-get-object-property-values)
               (:label owlapi-get-object-property-values)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-getObjectPropertyValues|))

(add-doc-entry (:title owlapi-get-object-property-relationships)
               (:label owlapi-get-object-property-relationships)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-getObjectPropertyRelationships|))

(add-doc-entry (:title owlapi-get-owl-transitive-object-property-axiom)
               (:label owlapi-get-owl-transitive-object-property-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for
                |OWLAPI-getOWLTransitiveObjectPropertyAxiom|))

(add-doc-entry (:title owlapi-get-owl-symmetric-object-property-axiom)
               (:label owlapi-get-owl-symmetric-object-property-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for
                |OWLAPI-getOWLSymmetricObjectPropertyAxiom|))

(add-doc-entry (:title owlapi-get-owl-sub-class-axiom)
               (:label owlapi-get-owl-sub-class-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for |OWLAPI-getOWLSubClassAxiom|))

(add-doc-entry (:title owlapi-get-owl-sub-annotation-property-of-axiom)
               (:label owlapi-get-owl-sub-annotation-property-of-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for
                |OWLAPI-getOWLSubAnnotationPropertyOfAxiom|))

(add-doc-entry (:title owlapi-get-owl-sub-annotation-property-axiom)
               (:label owlapi-get-owl-sub-annotation-property-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for |OWLAPI-getOWLSubAnnotationPropertyAxiom|))

(add-doc-entry (:title owlapi-get-owl-same-individuals-axiom)
               (:label owlapi-get-owl-same-individuals-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for |OWLAPI-getOWLSameIndividualsAxiom|))

(add-doc-entry (:title owlapi-get-owl-reflexive-object-property-axiom)
               (:label owlapi-get-owl-reflexive-object-property-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for
                |OWLAPI-getOWLReflexiveObjectPropertyAxiom|))

(add-doc-entry (:title
                owlapi-get-owl-really-implicit-declaration-axiom)
               (:label
                owlapi-get-owl-really-implicit-declaration-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for
                |OWLAPI-getOWLReallyImplicitDeclarationAxiom|))

(add-doc-entry (:title owlapi-get-owl-prefix-declaration-axiom)
               (:label owlapi-get-owl-prefix-declaration-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for |OWLAPI-getOWLPrefixDeclarationAxiom|))

(add-doc-entry (:title
                owlapi-get-owl-ontology-version-declaration-axiom)
               (:label
                owlapi-get-owl-ontology-version-declaration-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for
                |OWLAPI-getOWLOntologyVersionDeclarationAxiom|))

(add-doc-entry (:title owlapi-get-owl-ontology-annotation-axiom)
               (:label owlapi-get-owl-ontology-annotation-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for |OWLAPI-getOWLOntologyAnnotationAxiom|))

(add-doc-entry (:title owlapi-get-owl-object-sub-property-axiom)
               (:label owlapi-get-owl-object-sub-property-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for |OWLAPI-getOWLObjectSubPropertyAxiom|))

(add-doc-entry (:title owlapi-get-owl-object-property-range-axiom)
               (:label owlapi-get-owl-object-property-range-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for |OWLAPI-getOWLObjectPropertyRangeAxiom|))

(add-doc-entry (:title owlapi-get-owl-object-property-domain-axiom)
               (:label owlapi-get-owl-object-property-domain-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for |OWLAPI-getOWLObjectPropertyDomainAxiom|))

(add-doc-entry (:title
                owlapi-get-owl-object-property-chain-sub-property-axiom)
               (:label
                owlapi-get-owl-object-property-chain-sub-property-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for
                |OWLAPI-getOWLObjectPropertyChainSubPropertyAxiom|))

(add-doc-entry (:title owlapi-get-owl-object-property-assertion-axiom)
               (:label owlapi-get-owl-object-property-assertion-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for
                |OWLAPI-getOWLObjectPropertyAssertionAxiom|))

(add-doc-entry (:title
                owlapi-get-owl-negative-object-property-assertion-axiom)
               (:label
                owlapi-get-owl-negative-object-property-assertion-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for
                |OWLAPI-getOWLNegativeObjectPropertyAssertionAxiom|))

(add-doc-entry (:title
                owlapi-get-owl-negative-data-property-assertion-axiom)
               (:label
                owlapi-get-owl-negative-data-property-assertion-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for
                |OWLAPI-getOWLNegativeDataPropertyAssertionAxiom|))

(add-doc-entry (:title
                owlapi-get-owl-irreflexive-object-property-axiom)
               (:label
                owlapi-get-owl-irreflexive-object-property-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for
                |OWLAPI-getOWLIrreflexiveObjectPropertyAxiom|))

(add-doc-entry (:title owlapi-get-owl-inverse-object-properties-axiom)
               (:label owlapi-get-owl-inverse-object-properties-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for
                |OWLAPI-getOWLInverseObjectPropertiesAxiom|))

(add-doc-entry (:title
                owlapi-get-owl-inverse-functional-object-property-axiom)
               (:label
                owlapi-get-owl-inverse-functional-object-property-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for
                |OWLAPI-getOWLInverseFunctionalObjectPropertyAxiom|))

(add-doc-entry (:title owlapi-get-owl-imports-declaration-axiom)
               (:label owlapi-get-owl-imports-declaration-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for |OWLAPI-getOWLImportsDeclarationAxiom|))

(add-doc-entry (:title owlapi-get-owl-implicit-declaration-axiom)
               (:label owlapi-get-owl-implicit-declaration-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for |OWLAPI-getOWLImplicitDeclarationAxiom|))

(add-doc-entry (:title owlapi-get-owl-has-key-axiom)
               (:label owlapi-get-owl-has-key-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for |OWLAPI-getOWLHasKeyAxiom|))

(add-doc-entry (:title owlapi-get-owl-functional-object-property-axiom)
               (:label owlapi-get-owl-functional-object-property-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for
                |OWLAPI-getOWLFunctionalObjectPropertyAxiom|))

(add-doc-entry (:title owlapi-get-owl-functional-data-property-axiom)
               (:label owlapi-get-owl-functional-data-property-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for
                |OWLAPI-getOWLFunctionalDataPropertyAxiom|))

(add-doc-entry (:title
                owlapi-get-owl-equivalent-object-properties-axiom)
               (:label
                owlapi-get-owl-equivalent-object-properties-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for
                |OWLAPI-getOWLEquivalentObjectPropertiesAxiom|))

(add-doc-entry (:title owlapi-get-owl-equivalent-data-properties-axiom)
               (:label owlapi-get-owl-equivalent-data-properties-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for
                |OWLAPI-getOWLEquivalentDataPropertiesAxiom|))

(add-doc-entry (:title owlapi-get-owl-equivalent-classes-axiom)
               (:label owlapi-get-owl-equivalent-classes-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for |OWLAPI-getOWLEquivalentClassesAxiom|))

(add-doc-entry (:title owlapi-get-owl-entity-annotation-axiom)
               (:label owlapi-get-owl-entity-annotation-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for |OWLAPI-getOWLEntityAnnotationAxiom|))

(add-doc-entry (:title owlapi-get-owl-disjoint-union-axiom)
               (:label owlapi-get-owl-disjoint-union-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for |OWLAPI-getOWLDisjointUnionAxiom|))

(add-doc-entry (:title owlapi-get-owl-disjoint-object-properties-axiom)
               (:label owlapi-get-owl-disjoint-object-properties-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for
                |OWLAPI-getOWLDisjointObjectPropertiesAxiom|))

(add-doc-entry (:title owlapi-get-owl-disjoint-data-properties-axiom)
               (:label owlapi-get-owl-disjoint-data-properties-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for
                |OWLAPI-getOWLDisjointDataPropertiesAxiom|))

(add-doc-entry (:title owlapi-get-owl-disjoint-classes-axiom)
               (:label owlapi-get-owl-disjoint-classes-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for |OWLAPI-getOWLDisjointClassesAxiom|))

(add-doc-entry (:title owlapi-get-owl-different-individuals-axiom)
               (:label owlapi-get-owl-different-individuals-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for |OWLAPI-getOWLDifferentIndividualsAxiom|))

(add-doc-entry (:title owlapi-get-owl-declaration-axiom)
               (:label owlapi-get-owl-declaration-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for |OWLAPI-getOWLDeclarationAxiom|))

(add-doc-entry (:title owlapi-get-owl-datatype-definition-axiom)
               (:label owlapi-get-owl-datatype-definition-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for |OWLAPI-getOWLDatatypeDefinitionAxiom|))

(add-doc-entry (:title owlapi-get-owl-data-sub-property-axiom)
               (:label owlapi-get-owl-data-sub-property-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for |OWLAPI-getOWLDataSubPropertyAxiom|))

(add-doc-entry (:title owlapi-get-owl-data-property-range-axiom)
               (:label owlapi-get-owl-data-property-range-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for |OWLAPI-getOWLDataPropertyRangeAxiom|))

(add-doc-entry (:title owlapi-get-owl-data-property-domain-axiom)
               (:label owlapi-get-owl-data-property-domain-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for |OWLAPI-getOWLDataPropertyDomainAxiom|))

(add-doc-entry (:title owlapi-get-owl-data-property-assertion-axiom)
               (:label owlapi-get-owl-data-property-assertion-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for |OWLAPI-getOWLDataPropertyAssertionAxiom|))

(add-doc-entry (:title owlapi-get-owl-class-assertion-axiom)
               (:label owlapi-get-owl-class-assertion-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for |OWLAPI-getOWLClassAssertionAxiom|))

(add-doc-entry (:title owlapi-get-owl-axiom-annotation-axiom)
               (:label owlapi-get-owl-axiom-annotation-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for |OWLAPI-getOWLAxiomAnnotationAxiom|))

(add-doc-entry (:title owlapi-get-owl-asymmetric-object-property-axiom)
               (:label owlapi-get-owl-asymmetric-object-property-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for
                |OWLAPI-getOWLAsymmetricObjectPropertyAxiom|))

(add-doc-entry (:title owlapi-get-owl-annotation-property-range-axiom)
               (:label owlapi-get-owl-annotation-property-range-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for
                |OWLAPI-getOWLAnnotationPropertyRangeAxiom|))

(add-doc-entry (:title owlapi-get-owl-annotation-property-domain-axiom)
               (:label owlapi-get-owl-annotation-property-domain-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for
                |OWLAPI-getOWLAnnotationPropertyDomainAxiom|))

(add-doc-entry (:title owlapi-get-owl-annotation-assertion-axiom)
               (:label owlapi-get-owl-annotation-assertion-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-tell)
               (:protected t)
               (:synonym-for |OWLAPI-getOWLAnnotationAssertionAxiom|))

(add-doc-entry (:title owlapi-get-loaded-ontologies)
               (:label owlapi-get-loaded-ontologies)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-getLoadedOntologies|))

(add-doc-entry (:title owlapi-get-inverse-properties)
               (:label owlapi-get-inverse-properties)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-getInverseProperties|))

(add-doc-entry (:title owlapi-get-instances)
               (:label owlapi-get-instances)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-getInstances|))

(add-doc-entry (:title owlapi-get-individuals)
               (:label owlapi-get-individuals)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-getIndividuals|))

(add-doc-entry (:title owlapi-get-inconsistent-classes)
               (:label owlapi-get-inconsistent-classes)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-getInconsistentClasses|))

(add-doc-entry (:title owlapi-get-equivalent-properties)
               (:label owlapi-get-equivalent-properties)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-getEquivalentProperties|))

(add-doc-entry (:title owlapi-get-equivalent-classes)
               (:label owlapi-get-equivalent-classes)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-getEquivalentClasses|))

(add-doc-entry (:title owlapi-get-domains)
               (:label owlapi-get-domains)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-getDomains|))

(add-doc-entry (:title owlapi-get-disjoint-object-properties)
               (:label owlapi-get-disjoint-object-properties)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-getDisjointObjectProperties|))

(add-doc-entry (:title owlapi-get-disjoint-data-properties)
               (:label owlapi-get-disjoint-data-properties)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-getDisjointDataProperties|))

(add-doc-entry (:title owlapi-get-disjoint-classes)
               (:label owlapi-get-disjoint-classes)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-getDisjointClasses|))

(add-doc-entry (:title owlapi-get-different-individuals)
               (:label owlapi-get-different-individuals)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-getDifferentIndividuals|))

(add-doc-entry (:title owlapi-get-descendant-properties)
               (:label owlapi-get-descendant-properties)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-getDescendantProperties|))

(add-doc-entry (:title owlapi-get-descendant-classes)
               (:label owlapi-get-descendant-classes)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-getDescendantClasses|))

(add-doc-entry (:title owlapi-get-data-property-values)
               (:label owlapi-get-data-property-values)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-getDataPropertyValues|))

(add-doc-entry (:title owlapi-get-data-property-relationships)
               (:label owlapi-get-data-property-relationships)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-getDataPropertyRelationships|))

(add-doc-entry (:title owlapi-get-current-reasoner)
               (:label owlapi-get-current-reasoner)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-getCurrentReasoner|))

(add-doc-entry (:title owlapi-get-changes)
               (:label owlapi-get-changes)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-getChanges|))

(add-doc-entry (:title owlapi-get-axioms-per-ontology)
               (:label owlapi-get-axioms-per-ontology)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-getAxiomsPerOntology|))

(add-doc-entry (:title owlapi-get-axioms-of-type-in)
               (:label owlapi-get-axioms-of-type-in)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-getAxiomsOfTypeIn|))

(add-doc-entry (:title owlapi-get-axioms-of-type)
               (:label owlapi-get-axioms-of-type)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-getAxiomsOfType|))

(add-doc-entry (:title owlapi-get-axioms-in)
               (:label owlapi-get-axioms-in)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-getAxiomsIn|))

(add-doc-entry (:title owlapi-get-axioms)
               (:label owlapi-get-axioms)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-getAxioms|))

(add-doc-entry (:title owlapi-get-axiom-counter)
               (:label owlapi-get-axiom-counter)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-getAxiomCounter|))

(add-doc-entry (:title owlapi-get-auto-ontology)
               (:label owlapi-get-auto-ontology)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-getAutoOntology|))

(add-doc-entry (:title owlapi-get-auto-declare-data-properties)
               (:label owlapi-get-auto-declare-data-properties)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-getAutoDeclareDataProperties|))

(add-doc-entry (:title owlapi-get-annotation-axioms-for-axiom)
               (:label owlapi-get-annotation-axioms-for-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-getAnnotationAxiomsForAxiom|))

(add-doc-entry (:title owlapi-get-ancestor-properties)
               (:label owlapi-get-ancestor-properties)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-getAncestorProperties|))

(add-doc-entry (:title owlapi-get-ancestor-classes)
               (:label owlapi-get-ancestor-classes)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-getAncestorClasses|))

(add-doc-entry (:title owlapi-get-all-ontologies)
               (:label owlapi-get-all-ontologies)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-getAllOntologies|))

(add-doc-entry (:title owlapi-find-object-from-id)
               (:label owlapi-find-object-from-id)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-findObjectFromID|))

(add-doc-entry (:title owlapi-find-id-from-object)
               (:label owlapi-find-id-from-object)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-findIDFromObject|))

(add-doc-entry (:title owlapi-export-reasoner)
               (:label owlapi-export-reasoner)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management io)
               (:protected t)
               (:synonym-for |OWLAPI-exportReasoner|))

(add-doc-entry (:title owlapi-export-ontology)
               (:label owlapi-export-ontology)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management io)
               (:protected t)
               (:synonym-for |OWLAPI-exportOntology|))

(add-doc-entry (:title owlapi-enable-transient-axiom-mode)
               (:label owlapi-enable-transient-axiom-mode)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-enableTransientAxiomMode|))

(add-doc-entry (:title owlapi-enable-simplified-protocol)
               (:label owlapi-enable-simplified-protocol)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-enableSimplifiedProtocol|))

(add-doc-entry (:title owlapi-enable-memory-saving-mode)
               (:label owlapi-enable-memory-saving-mode)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-enableMemorySavingMode|))

(add-doc-entry (:title owlapi-enable-lookup-mode)
               (:label owlapi-enable-lookup-mode)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-enableLookupMode|))

(add-doc-entry (:title owlapi-enable-incremental-updates)
               (:label owlapi-enable-incremental-updates)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-enableIncrementalUpdates|))

(add-doc-entry (:title owlapi-dont-register-referenced-entities)
               (:label owlapi-dont-register-referenced-entities)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-dontRegisterReferencedEntities|))

(add-doc-entry (:title owlapi-dont-register-declared-entities)
               (:label owlapi-dont-register-declared-entities)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-dontRegisterDeclaredEntities|))

(add-doc-entry (:title owlapi-dispose-reasoner)
               (:label owlapi-dispose-reasoner)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-disposeReasoner|))

(add-doc-entry (:title owlapi-dispose-ontology)
               (:label owlapi-dispose-ontology)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-disposeOntology|))

(add-doc-entry (:title owlapi-dispose-ontologies)
               (:label owlapi-dispose-ontologies)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-disposeOntologies|))

(add-doc-entry (:title owlapi-dispose-axioms)
               (:label owlapi-dispose-axioms)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-disposeAxioms|))

(add-doc-entry (:title owlapi-dispose-axiom)
               (:label owlapi-dispose-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-disposeAxiom|))

(add-doc-entry (:title owlapi-dispose)
               (:label owlapi-dispose)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-dispose|))

(add-doc-entry (:title owlapi-disable-transient-axiom-mode)
               (:label owlapi-disable-transient-axiom-mode)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-disableTransientAxiomMode|))

(add-doc-entry (:title owlapi-disable-simplified-protocol)
               (:label owlapi-disable-simplified-protocol)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-disableSimplifiedProtocol|))

(add-doc-entry (:title owlapi-disable-memory-saving-mode)
               (:label owlapi-disable-memory-saving-mode)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-disableMemorySavingMode|))

(add-doc-entry (:title owlapi-disable-lookup-mode)
               (:label owlapi-disable-lookup-mode)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-disableLookupMode|))

(add-doc-entry (:title owlapi-disable-incremental-updates)
               (:label owlapi-disable-incremental-updates)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-disableIncrementalUpdates|))

(add-doc-entry (:title owlapi-disable-auto-mode)
               (:label owlapi-disable-auto-mode)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-disableAutoMode|))

(add-doc-entry (:title owlapi-describe-reasoners)
               (:label owlapi-describe-reasoners)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-describeReasoners|))

(add-doc-entry (:title owlapi-describe-reasoner)
               (:label owlapi-describe-reasoner)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-describeReasoner|))

(add-doc-entry (:title owlapi-describe-ontology)
               (:label owlapi-describe-ontology)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-describeOntology|))

(add-doc-entry (:title owlapi-describe-ontologies)
               (:label owlapi-describe-ontologies)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-describeOntologies|))

(add-doc-entry (:title owlapi-contains)
               (:label owlapi-contains)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-contains|))

(add-doc-entry (:title owlapi-consider-declarations)
               (:label owlapi-consider-declarations)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-considerDeclarations|))

(add-doc-entry (:title owlapi-clear-registry)
               (:label owlapi-clear-registry)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-clearRegistry|))

(add-doc-entry (:title owlapi-clear-ontologies)
               (:label owlapi-clear-ontologies)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-clearOntologies|))

(add-doc-entry (:title owlapi-clear-changes)
               (:label owlapi-clear-changes)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-clearChanges|))

(add-doc-entry (:title owlapi-classify)
               (:label owlapi-classify)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-ask)
               (:protected t)
               (:synonym-for |OWLAPI-classify|))

(add-doc-entry (:title owlapi-batch-synchronize)
               (:label owlapi-batch-synchronize)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-batchSynchronize|))

(add-doc-entry (:title owlapi-auto-remove-axioms-from)
               (:label owlapi-auto-remove-axioms-from)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-autoRemoveAxiomsFrom|))

(add-doc-entry (:title owlapi-auto-batch-remove-axioms-from)
               (:label owlapi-auto-batch-remove-axioms-from)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-autoBatchRemoveAxiomsFrom|))

(add-doc-entry (:title owlapi-auto-batch-add-axioms-to)
               (:label owlapi-auto-batch-add-axioms-to)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-autoBatchAddAxiomsTo|))

(add-doc-entry (:title owlapi-auto-apply-changes)
               (:label owlapi-auto-apply-changes)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-autoApplyChanges|))

(add-doc-entry (:title owlapi-auto-add-axioms-to)
               (:label owlapi-auto-add-axioms-to)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-autoAddAxiomsTo|))

(add-doc-entry (:title owlapi-apply-changes)
               (:label owlapi-apply-changes)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-applyChanges|))

(add-doc-entry (:title owlapi-advance-progress)
               (:label owlapi-advance-progress)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-advanceProgress|))

(add-doc-entry (:title owlapi-add-prefix)
               (:label owlapi-add-prefix)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-addPrefix|))

(add-doc-entry (:title owlapi-abort)
               (:label owlapi-abort)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-abort|))

(add-doc-entry (:title owlapi-set-ontology-uri)
               (:label owlapi-set-ontology-uri)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-SetOntologyURI|))

(add-doc-entry (:title owlapi-remove-axioms)
               (:label owlapi-remove-axioms)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-RemoveAxioms|))

(add-doc-entry (:title owlapi-remove-axiom)
               (:label owlapi-remove-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-RemoveAxiom|))

(add-doc-entry (:title owlapi-id-to-axiom)
               (:label owlapi-id-to-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-IDToAxiom|))

(add-doc-entry (:title owlapi-axiom-to-id)
               (:label owlapi-axiom-to-id)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-AxiomToID|))

(add-doc-entry (:title owlapi-axiom-loaded?)
               (:label owlapi-axiom-loaded?)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-AxiomLoaded?|))

(add-doc-entry (:title owlapi-add-axioms)
               (:label owlapi-add-axioms)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-AddAxioms|))

(add-doc-entry (:title owlapi-add-axiom)
               (:label owlapi-add-axiom)
               (:type :synonym-function)
               (:in-sections all-functions owlapi-management)
               (:protected t)
               (:synonym-for |OWLAPI-AddAxiom|))

))
